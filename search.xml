<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6-字符串扩展-padStart，padEnd字符串补全长度的功能</title>
    <url>/ES6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%89%A9%E5%B1%95-padStart%EF%BC%8CpadEnd%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A5%E5%85%A8%E9%95%BF%E5%BA%A6%E7%9A%84%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>padStart(len, str)</p>
<ul>
<li>根据给定长度自动在字符串的前面补充想补充的字符串（只返回修改后的字符串，不修改原字符串）</li>
<li>len 给定的长度，转换后</li>
<li>str 想补充的字符串</li>
</ul>
<p>padStart() 用于<code>头部补全</code>；<br>padEnd() 用于<code>尾部补全</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span><br></pre></td></tr></table></figure>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><a id="more"></a>
<p>上面代码中，padStart 和 padEnd 一共接受2个参数，第一个是用来指定字符串的最小长度，第二个参数是用来补全长度的字符串。</p>
<ol>
<li><p>如果原字符串长度等于或大于指定得最小长度，则返回原字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'xxx'</span>.padStart(<span class="number">2</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxx'</span></span><br><span class="line"><span class="string">'xxx'</span>.padEnd(<span class="number">2</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxx'</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果用来补齐的字符串与原字符串两者的长度之和超过了指定的最小长度，则会截取超过位数的补全字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">5</span>, <span class="string">'123'</span>)  <span class="comment">// 12abc</span></span><br><span class="line"><span class="string">'abc'</span>.padEnd(<span class="number">5</span>, <span class="string">'123'</span>) <span class="comment">// abc12</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果省略第二个参数，默认使用空格补全。下面的代码是生成10位的数值字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>) <span class="comment">// '   x'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>) <span class="comment">// 'x   '</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>padStart() 常见的用途是为数值补全指定位数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'1'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000001"</span></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000012"</span></span><br><span class="line"><span class="string">'123456'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000123456"</span></span><br></pre></td></tr></table></figure></li>
<li><p>padStart() 另一个常用的是提示字符串格式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-MM-12"</span></span><br><span class="line"><span class="string">'09-12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-09-12"</span></span><br></pre></td></tr></table></figure>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1></li>
</ol>
<p><img src="/ES6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%89%A9%E5%B1%95-padStart%EF%BC%8CpadEnd%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A1%A5%E5%85%A8%E9%95%BF%E5%BA%A6%E7%9A%84%E5%8A%9F%E8%83%BD/1.png" alt="1.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Express中的socket.io</title>
    <url>/Express%E4%B8%AD%E7%9A%84socket-io/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>socket.io中文api博客地址：<a href="https://blog.csdn.net/u010528747/article/details/54341751" target="_blank" rel="noopener">https://blog.csdn.net/u010528747/article/details/54341751</a></p>
<h1 id="一、socketio开发时的使用范围"><a href="#一、socketio开发时的使用范围" class="headerlink" title="一、socketio开发时的使用范围"></a>一、socketio开发时的使用范围</h1><p>wifi的IP动态分配机制，socket属于可靠连接，在<font color="#f40">wifi中，其他设备（pc，手机）</font>访问<font color="#f40">都没法通过ip访问</font>，虽然<font color="#f40">能访问http协议</font>的服务，<font color="#f40">但socket不行</font>。</p>
<a id="more"></a>

<h1 id="二、Express中的使用"><a href="#二、Express中的使用" class="headerlink" title="二、Express中的使用"></a>二、Express中的使用</h1><p>express中的代码：<br>先下载 <font color="#f40">npm i socket.io </font><br><font color="#f40">socket.on</font>   是接收数据<br><font color="#f40">io.emit </font>    是发送数据<br><font color="#f40">server.listen()</font>    一定要新开一个端口,它代表socket.io的通信端口<br><font color="#f40">socket.emit</font>        发送的数据应该为字符串格式，所以每次用<font color="#f40">JSON.stringfy()</font>来格式化一下，再在socket.on时<font color="#f40">JSON.parse()</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">"express"</span>)();</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</span><br><span class="line"><span class="comment">// 连接客户端</span></span><br><span class="line">io.on(<span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line">    <span class="comment">// 接收message事件的数据</span></span><br><span class="line">    socket.on(<span class="string">'message'</span>, data =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"服务器收到消息"</span> + data);</span><br><span class="line">        <span class="comment">// io.emit代表广播，socket.emit代表私发</span></span><br><span class="line">        io.emit(<span class="string">'message'</span>, data);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端断开，自带事件</span></span><br><span class="line">    socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         io.emit(<span class="string">'leave'</span>, socket.nickname + <span class="string">' left'</span>)</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8000</span>)  <span class="comment">//一定要新开一个端</span></span><br></pre></td></tr></table></figure>

<h1 id="三、前端代码"><a href="#三、前端代码" class="headerlink" title="三、前端代码"></a>三、前端代码</h1><p>下载 <font color="#f40">npm i socket.io-client</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">"socket.io-client"</span>;</span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">"ws://localhost:8000"</span>);  <span class="comment">//和后端接收和发送socket.io数据的端口</span></span><br><span class="line"></span><br><span class="line"> socket.on(<span class="string">"message"</span>, data =&gt; <span class="built_in">console</span>.log(data))</span><br><span class="line"> socket.emit(<span class="string">"message"</span>,<span class="string">"aaaa"</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"向服务器发送消息"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="四、socket-io私发消息"><a href="#四、socket-io私发消息" class="headerlink" title="四、socket.io私发消息"></a>四、socket.io私发消息</h1><p><font color="#f40">socket.id</font>是对客户端的唯一值，和session.id差不多一个意思，每次客户端连接socket.id都会变。</p>
<h2 id="关键语法："><a href="#关键语法：" class="headerlink" title="关键语法："></a>关键语法：</h2><p><font color="#f40">socket.to(session.id).emit(‘message’, data)</font>    私发给指定session.id的客户端消息<br><font color="#f40">socket.emit(‘message’, data)</font>    给socket客户端发消息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; app &#x3D;&gt; &#123;</span><br><span class="line">    const server &#x3D; require(&#39;http&#39;).createServer(app);</span><br><span class="line">    const io &#x3D; require(&#39;socket.io&#39;)(server);</span><br><span class="line">    let usersObj &#x3D; &#123;&#125;; &#x2F;&#x2F;存放登录的用户的socket.id</span><br><span class="line">    io.on(&#39;connection&#39;, socket &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 接收发的消息</span><br><span class="line">        socket.on(&#39;message&#39;, data &#x3D;&gt; &#123;</span><br><span class="line">            &#x2F;&#x2F; 把发送方的id值当做key值，socket.id当value值存放在usersObj，每次刷新页面socket.id都会</span><br><span class="line">            let msgData &#x3D; JSON.parse(data);</span><br><span class="line">            usersObj[msgData.from] &#x3D; socket.id;</span><br><span class="line"></span><br><span class="line">            console.log(&quot;服务器收到消息&quot; + data);</span><br><span class="line">            &#x2F;&#x2F; 将消息私发给指定的客户端</span><br><span class="line">            socket.to(usersObj[msgData.to]).emit(&#39;message&#39;, data);</span><br><span class="line">            &#x2F;&#x2F; 给socket客户端发消息</span><br><span class="line">            socket.emit(&#39;message&#39;, data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    server.listen(8000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express处理前端动态请求（/:id）</title>
    <url>/Express%E5%A4%84%E7%90%86%E5%89%8D%E7%AB%AF%E5%8A%A8%E6%80%81%E8%AF%B7%E6%B1%82%EF%BC%88-id%EF%BC%89/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、app-get-、app-post"><a href="#一、app-get-、app-post" class="headerlink" title="一、app.get()、app.post()"></a>一、app.get()、app.post()</h1><p>配置客户端路由（请求地址）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.post(&#39;&#x2F;get_json&#x2F;:id&#39;, function (req, res) &#123;</span><br><span class="line">  &#x2F;&#x2F; 响应块代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这里配置了一个POST请求的地址。将app.post()改成app.get()也是可以的，只是请求类型会变成get。</p>
<a id="more"></a>

<h1 id="2-req-params"><a href="#2-req-params" class="headerlink" title="2. req.params"></a>2. req.params</h1><p>一个对象，其包含了一系列的属性，这些属性和在路由中命名的参数名是一一对应的。例如，如果你有/user/<font color="#f40">:name</font>路由，name属性可通过<font color="#f40">req.params.name的方式获取到</font>，这个对象默认值为{}。<br>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;前端代码</span><br><span class="line">this.$axios(&#123;</span><br><span class="line">method:&quot;get&quot;,</span><br><span class="line">url:&#96;http:&#x2F;&#x2F;localhost:3333&#x2F;aabbb&#96;</span><br><span class="line">&#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;).catch(err&#x3D;&gt;&#123;</span><br><span class="line">console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;后端代码</span><br><span class="line">app.use(&#39;&#x2F;:id&#39;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(req.params)</span><br><span class="line">    res.send(&#39;ok&#39;)  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行结果<br><img src="/Express%E5%A4%84%E7%90%86%E5%89%8D%E7%AB%AF%E5%8A%A8%E6%80%81%E8%AF%B7%E6%B1%82%EF%BC%88-id%EF%BC%89/1.png" alt="1.png"></p>
<p>或者也可以这样写（只是修改了后端代码）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;后端代码</span><br><span class="line">app.use(&#39;&#x2F;aa:id&#39;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(req.params)</span><br><span class="line">    res.send(&#39;ok&#39;)  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行结果<br><img src="/Express%E5%A4%84%E7%90%86%E5%89%8D%E7%AB%AF%E5%8A%A8%E6%80%81%E8%AF%B7%E6%B1%82%EF%BC%88-id%EF%BC%89/2.png" alt="2.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>Express实现文件上传原理 form enctype属性  path模块  multer模块</title>
    <url>/Express%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86%20form%20enctype%E5%B1%9E%E6%80%A7%20%20path%E6%A8%A1%E5%9D%97%20%20multer%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、要实现文件上传原理要用到的知识点"><a href="#一、要实现文件上传原理要用到的知识点" class="headerlink" title="一、要实现文件上传原理要用到的知识点"></a>一、要实现文件上传原理要用到的知识点</h1><ul>
<li>form enctype属性</li>
<li>multer模块</li>
<li>path模块</li>
</ul>
<h1 id="二、form-enctype属性"><a href="#二、form-enctype属性" class="headerlink" title="二、form enctype属性"></a>二、form enctype属性</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><code>用form提交数据时，要提交的数据input标签都要有name属性，否则该值提交无效。</code></p>
<a id="more"></a>
<p>正常情况，form标签的enctype默认属性是   <code>application/x-www-form-urlencoded</code>   是以字符串形式传输的，这次实现文件上传要用到  <code>multipart/form-data</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:3000"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>&lt;form enctype=&quot;value&quot;&gt;</code></p>
<h2 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">application/x-www-form-urlencoded</td>
<td align="left">在发送前编码所有<code>字符</code>（默认）</td>
</tr>
<tr>
<td align="left">multipart/form-data</td>
<td align="left">不对字符编码。在使用包含<code>文件上传</code>控件的表单时，必须使用该值。</td>
</tr>
<tr>
<td align="left">text/plain</td>
<td align="left">空格转换为 “+” 加号，但不对特殊字符编码。</td>
</tr>
</tbody></table>
<h1 id="三、multer模块"><a href="#三、multer模块" class="headerlink" title="三、multer模块"></a>三、multer模块</h1><p>先安装 <code>cnpm i multer --save</code><br>该模块是以中间件的形式存在的<br>用来接收form表单中的以文件形式上传的文件<br>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line">server.use(multer().any());</span><br></pre></td></tr></table></figure>
<p><code>.any()</code>代表可以接受任何文件类型<br>可以用<code>req.files</code>来查看接收的文件<br>例如：(req.files接收到的数据)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ &#123; <span class="attr">fieldname</span>: <span class="string">'file'</span>,  <span class="comment">// from表单中的name属性的属性值</span></span><br><span class="line">    originalname: <span class="string">'Adobe CC.ico'</span>,  <span class="comment">// 上传的文件名字</span></span><br><span class="line">    encoding: <span class="string">'7bit'</span>,      <span class="comment">//文件编码</span></span><br><span class="line">    mimetype: <span class="string">'image/x-icon'</span>,    <span class="comment">//文件的 MIME 类型</span></span><br><span class="line">    destination: <span class="string">'./save/'</span>,       <span class="comment">//保存路径</span></span><br><span class="line">    filename: <span class="string">'8b3222e43d3cbbe7ab159589256d1552'</span>,  <span class="comment">//保存在 destination 中的文件名</span></span><br><span class="line">    path: <span class="string">'save\\8b3222e43d3cbbe7ab159589256d1552'</span>,<span class="comment">//已上传文件的完整路径</span></span><br><span class="line">    size: <span class="number">36462</span>   <span class="comment">//文件大小（字节单位）   </span></span><br><span class="line">    &#125; ]</span><br></pre></td></tr></table></figure>
<p>接收的文件是以数组的形式发送到后端的，数组里面只有一项，是对象  </p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fieldname</td>
<td align="left">Field name 由表单指定</td>
</tr>
<tr>
<td align="left">originalname</td>
<td align="left">用户计算机上的文件的名称</td>
</tr>
<tr>
<td align="left">encoding</td>
<td align="left">文件编码</td>
</tr>
<tr>
<td align="left">mimetype</td>
<td align="left">文件的 MIME 类型</td>
</tr>
<tr>
<td align="left">size</td>
<td align="left">文件大小（字节单位）</td>
</tr>
<tr>
<td align="left">destination</td>
<td align="left">保存路径</td>
</tr>
<tr>
<td align="left">filename</td>
<td align="left">保存在 destination 中的文件名</td>
</tr>
<tr>
<td align="left">path</td>
<td align="left">已上传文件的完整路径</td>
</tr>
<tr>
<td align="left">buffer</td>
<td align="left">一个存放了整个文件的 Buffer</td>
</tr>
</tbody></table>
<p><code>multer({dest:&#39;地址&#39;})</code>  自动帮你储存 - <code>名字自动改成hash值</code> 防止重名<br>缺点：没有后缀<br>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line">app.use(multer(&#123;<span class="attr">dest</span>:<span class="string">'./images'</span>&#125;).any())</span><br><span class="line">app.use(<span class="string">'/files'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.files)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>打印的信息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[ </span><br><span class="line">    &#123; <span class="attr">fieldname</span>: <span class="string">'f1'</span>,</span><br><span class="line">    originalname: <span class="string">'web.txt'</span>,</span><br><span class="line">    encoding: <span class="string">'7bit'</span>,</span><br><span class="line">    mimetype: <span class="string">'text/plain'</span>,</span><br><span class="line">    destination: <span class="string">'./images'</span>,</span><br><span class="line">    filename:<span class="string">'3e49baaa770dfd21acdfe64d6312b7dd'</span>, <span class="comment">//转化成hash值</span></span><br><span class="line">    path: <span class="string">'images\\33ac0bc106b02c443e6096f45de68c14'</span>,</span><br><span class="line">    size: <span class="number">121</span> &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>效果图：<br><img src="/Express%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86%20form%20enctype%E5%B1%9E%E6%80%A7%20%20path%E6%A8%A1%E5%9D%97%20%20multer%E6%A8%A1%E5%9D%97/1.png" alt="1.png"></p>
<h1 id="四、path模块"><a href="#四、path模块" class="headerlink" title="四、path模块"></a>四、path模块</h1><p>先安装 <code>cnpm i path --save</code><br>path.parse(string)用来解析文件路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">let</span> str = path.parse(<span class="string">'C:\Users\m1883\Pictures\Icons\Adobe CC.ico'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">root</span>: <span class="string">'C:'</span>,</span><br><span class="line">  dir: <span class="string">'C:'</span>,</span><br><span class="line">  base: <span class="string">'Usersm1883PicturesIconsAdobe CC.ico'</span>,</span><br><span class="line">  ext: <span class="string">'.ico'</span>,</span><br><span class="line">  name: <span class="string">'Usersm1883PicturesIconsAdobe CC'</span> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>各个属性的描述</p>
<ul>
<li><code>root</code>  在什么根目录</li>
<li><code>dir</code> 绝对地址</li>
<li><code>base</code> 文件名+后缀</li>
<li><code>ext</code> 后缀</li>
<li><code>name</code> 文件名</li>
</ul>
<h1 id="五、最终代码"><a href="#五、最终代码" class="headerlink" title="五、最终代码"></a>五、最终代码</h1><p>前端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:3000"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>后端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> server = express();</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br><span class="line">server.use(multer(&#123; <span class="attr">dest</span>: <span class="string">'./save/'</span> &#125;).any());</span><br><span class="line">server.use(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.rename(req.files[<span class="number">0</span>].path, req.files[<span class="number">0</span>].path + path.parse(req.files[<span class="number">0</span>].originalname).ext, (err) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">'ok'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行结果<br><img src="/Express%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86%20form%20enctype%E5%B1%9E%E6%80%A7%20%20path%E6%A8%A1%E5%9D%97%20%20multer%E6%A8%A1%E5%9D%97/2.png" alt="2.png"><br><img src="/Express%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8E%9F%E7%90%86%20form%20enctype%E5%B1%9E%E6%80%A7%20%20path%E6%A8%A1%E5%9D%97%20%20multer%E6%A8%A1%E5%9D%97/3.png" alt="3.png"></p>
<p>若想要往数据库里传真正的文件名字需要，否则含有路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.parse(src).name+path.parse(req.files[<span class="number">0</span>].originalname).ext;</span><br></pre></td></tr></table></figure>
<h2 id="第二种：直接在请求中完成"><a href="#第二种：直接在请求中完成" class="headerlink" title="第二种：直接在请求中完成"></a>第二种：直接在请求中完成</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前端编辑页面上传的商品图片</span></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="comment">//解析图片文件,并保存位置</span></span><br><span class="line"><span class="keyword">const</span> upload = (multer(&#123; <span class="attr">dest</span>: path.resolve(__dirname, <span class="string">"../../static/product"</span>) &#125;).any());</span><br><span class="line">useRouter.post(<span class="string">"/productIamge_upload"</span>, upload, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.files)</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        status: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Generator函数</title>
    <url>/Generator%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、什么是Generator函数"><a href="#一、什么是Generator函数" class="headerlink" title="一、什么是Generator函数"></a>一、什么是Generator函数</h1><p>Generator 函数是 ES6 提供的一种<code>异步编程解决方案</code>，语法行为与传统函数完全不同。  </p>
<p><strong>Generator和普通函数的区别</strong></p>
<ol>
<li>写法的不同，Generator函数function后要加上<code>星号</code>，Generator函数是可以<code>暂停执行</code>的。<br>例子：<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generator函数的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>Generator函数体内使用<code>yield</code>语句，可以定义不同的内部状态；状态其实就是数据。使用yield进行暂停操作，和async await异步处理中的<code>await</code>效果一样。</li>
</ol>
<h1 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h1><p>Generator函数配合yield的使用，想要获取到yield的数据，要使用<code>next()</code>进行迭代获取。<br>next()返回的是一个对象，对象里面有两个属性，一个是<code>value</code>，一个是<code>done</code>。<br><code>value</code>代表<code>yield后面表达式的值</code>，<code>done</code>代表<code>是否遍历结束</code>，true表示遍历结束，false表示未结束。<br>下面的例子中第四次打印的value为undefined是因为yield已经遍历结束。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'c'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gen = generator();</span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>
<p>next（）方法允许逻辑</p>
<ul>
<li>遇到yield表达式，就<code>暂停执行后面的操作</code>，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值；</li>
<li>下一次调用next方法时，再继续往下执行，直到遇到<code>下一个yield表达式</code>；</li>
<li>没有再遇到新的yield表达式，就<code>一直运行到函数结束</code>，<code>直到return语句为止</code>，并将<code>return语句</code>后面的表达式的<code>值</code>，作为返回的对象的<code>value属性值</code>；</li>
<li>如果该函数没有return语句，则返回的对象的value属性值为undefined；</li>
</ul>
<p>下面的例子就有点复杂了，但要记住上面的next()方法的逻辑就好理解一些</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(z);</span><br><span class="line">    <span class="keyword">yield</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = foo(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一次next()结果</span></span><br><span class="line"><span class="comment">    &#123; value: 6, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第二次next()结果</span></span><br><span class="line"><span class="comment">    NaN</span></span><br><span class="line"><span class="comment">    &#123; value: NaN, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第三次next()结果</span></span><br><span class="line"><span class="comment">    undefined</span></span><br><span class="line"><span class="comment">    &#123; value: NaN, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br></pre></td></tr></table></figure>
<p>第一次的next()的结果很好理解<br>第二次的next()就有点魔幻了，下面好好解释一下：  </p>
<ul>
<li>y为什么成了NaN？<br>因为<code>y=2 * undefined</code>。  </li>
<li>但为什么第二次执行next()，yield(x+1)变成了undefined？<br>因为第一次只是执行了<code>yield(x+1)</code>，甚至连乘以2的操作都没执行到，因为<code>next()是遇到yield表达式就会执行完停止</code>，所以第二次执行next()的时候，根本就不知道第一次的next()的执行结果是什么，因为<code>第一次没有执行到给y赋值的时候</code>，所以就变成了<code>var y = 2 * undefined</code>了。<br>同理，第三次next()的执行结果是因为第二次next()只是执行到了yield(y/3)就停止了，所以第三次的next()执行结果就为5+NaN+undefined，结果为NaN</li>
</ul>
<p><strong>next的参数</strong><br>next方法可以带一个参数，该<code>参数会成为上一个yield的返回值，并从上一次yield开始，直到下一个yield停止</code>。<br>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(z);</span><br><span class="line">    <span class="keyword">yield</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = foo(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// &#123; value: 6, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    24</span></span><br><span class="line"><span class="comment">    &#123; value: 8, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next(<span class="number">12</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    13</span></span><br><span class="line"><span class="comment">    &#123; value: 42, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next(<span class="number">13</span>));</span><br></pre></td></tr></table></figure>
<p>第一次next()的value是<code>5+1=6</code><br>第二次next()的value为8是因为next()的有参数，参数变成上一次yield的返回值，也就是说<code>var y = 2 * 12;</code>，然后到yield(y/3)执行完停止，所以value为8<br>第三次next()的value为42因为next()有参数，上一次的yield开始，变成了<code>var z = 13</code>,到yield(x+y+z)结束，所以value等于<code>x+y+z = 5+24+13 = 42</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Git如何同时提交到github和码云gitee上</title>
    <url>/Git%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0github%E5%92%8C%E7%A0%81%E4%BA%91gitee%E4%B8%8A/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>使用多个远程库时，要注意git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。仍然以learngit本地库为例，先删除已关联的名为origin的远程库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure>
<p>然后，先关联GitHub的远程库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add github git@github.com:xxx&#x2F;LearnGit.git</span><br></pre></td></tr></table></figure>
<p>注意，远程库的名称叫<code>github</code>，不叫<code>origin</code>了。  </p>
<a id="more"></a>
<p>接着，再关联码云的远程库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:xxx&#x2F;LearnGit.git</span><br></pre></td></tr></table></figure>
<p>同样注意，远程库的名称叫<code>gitee</code>，不叫<code>origin</code>。  </p>
<p>现在，我们用git remote -v查看远程库信息，可以看到两个远程库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitee   git@gitee.com:xxx&#x2F;LearnGit.git (fetch)</span><br><span class="line">gitee   git@gitee.com:xxx&#x2F;LearnGit.git (push)</span><br><span class="line">github  git@github.com:xxx&#x2F;LearnGit.git (fetch)</span><br><span class="line">github  git@github.com:xxx&#x2F;LearnGit.git (push)</span><br></pre></td></tr></table></figure>
<p>如果要推送到<code>GitHub</code>，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure>

<p>如果要推送到码云，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<p>这样一来，本地库就可以同时与多个远程库互相同步</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>H5中的canvas验证码详解</title>
    <url>/H5%E4%B8%AD%E7%9A%84canvas%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="先看效果图"><a href="#先看效果图" class="headerlink" title="先看效果图"></a>先看效果图</h1><p><img src="/H5%E4%B8%AD%E7%9A%84canvas%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%A6%E8%A7%A3/7.png" alt></p>
<h1 id="代码阶段"><a href="#代码阶段" class="headerlink" title="代码阶段"></a>代码阶段</h1><p>由于这个canvas是我在vue项目里写的，所以为了照顾一下没学过vue的，就用了原生的js整理了一下，里面用到了一些es6的语法，包括class  模板字符串`` 等，代码里面都有注释。</p>
<a id="more"></a>

<p>html部分代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"250px"</span> <span class="attr">height</span>=<span class="string">"100px"</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span></span><br><span class="line">  该浏览器不支持canvas</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js部分代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="keyword">this</span>.curCanvas();</span><br><span class="line">        &#125;</span><br><span class="line">        curCanvas() &#123;</span><br><span class="line">            <span class="keyword">let</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">"#canvas"</span>);</span><br><span class="line">            <span class="keyword">let</span> ctx = myCanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">            <span class="keyword">let</span> canvasH = myCanvas.offsetHeight; <span class="comment">// canvas 高</span></span><br><span class="line">            <span class="keyword">let</span> canvasW = myCanvas.offsetWidth; <span class="comment">//canvas宽</span></span><br><span class="line">            ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvasW, canvasH); <span class="comment">// 每次先清空一下canvas画布，不然会和之前的重叠</span></span><br><span class="line">            ctx.fillStyle = <span class="string">"rgba(0,0,0,0.7)"</span>;</span><br><span class="line">            ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, canvasW, canvasH);</span><br><span class="line">            <span class="comment">// 生成干扰点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">this</span>.producePoint(ctx, canvasW, canvasH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 随机验证码</span></span><br><span class="line">            <span class="keyword">let</span> str = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">let</span> arr = <span class="keyword">this</span>.allCharacter();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                str += arr[<span class="keyword">this</span>.randomValue(<span class="number">0</span>, <span class="number">61</span>)];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 核心代码</span></span><br><span class="line">            <span class="comment">// 设置的验证码就四个字符，遍历每个字符的时候，先把原点位移到设置好的位置，在进行旋转</span></span><br><span class="line">            <span class="comment">//每次都是位移旋转之后再回复原位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> colorR = <span class="keyword">this</span>.randomValue(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">                <span class="keyword">let</span> colorG = <span class="keyword">this</span>.randomValue(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">                <span class="keyword">let</span> colorB = <span class="keyword">this</span>.randomValue(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">                <span class="keyword">let</span> deg = <span class="keyword">this</span>.randomValue(<span class="number">-30</span>, <span class="number">30</span>);</span><br><span class="line">                <span class="keyword">let</span> x = <span class="keyword">this</span>.randomValue(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">                <span class="keyword">let</span> y = <span class="keyword">this</span>.randomValue(<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">                <span class="comment">// 设置颜色 和字体大小以及样式</span></span><br><span class="line">                ctx.font = <span class="string">"3rem sans-serif"</span>;</span><br><span class="line">                ctx.fillStyle = <span class="string">`rgb(<span class="subst">$&#123;colorR&#125;</span>,<span class="subst">$&#123;colorG&#125;</span>,<span class="subst">$&#123;colorB&#125;</span>)`</span>;</span><br><span class="line">                <span class="comment">// 先把原点调到字符出现的位置，再旋转 ，然后填充字符</span></span><br><span class="line">                ctx.translate(x + <span class="number">50</span> * i, y);</span><br><span class="line">                ctx.rotate((<span class="built_in">Math</span>.PI / <span class="number">180</span>) * deg);</span><br><span class="line">                ctx.textBaseline =<span class="string">"top"</span></span><br><span class="line">                ctx.fillText(str[i], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 把原点和旋转角度复位</span></span><br><span class="line">                ctx.rotate((<span class="built_in">Math</span>.PI / <span class="number">180</span>) * -deg);</span><br><span class="line">                ctx.translate(-(x + <span class="number">50</span> * i), -y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最小值到最大值之间的随机值</span></span><br><span class="line">        randomValue(min, max) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min)) + min;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取0-9和a-z之间的字符</span></span><br><span class="line">        allCharacter() &#123;</span><br><span class="line">            <span class="keyword">let</span> arr = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">48</span>; i &lt; <span class="number">58</span>; i++) &#123;</span><br><span class="line">                arr.push(<span class="built_in">String</span>.fromCharCode(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">65</span>; j &lt; <span class="number">123</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= <span class="number">91</span> &amp;&amp; j &lt;= <span class="number">96</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                arr.push(<span class="built_in">String</span>.fromCharCode(j));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成干扰点</span></span><br><span class="line">        producePoint(ctx, canvasW, canvasH) &#123;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            <span class="keyword">let</span> x = <span class="keyword">this</span>.randomValue(<span class="number">5</span>, canvasW - <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">let</span> y = <span class="keyword">this</span>.randomValue(<span class="number">5</span>, canvasH - <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">let</span> r = <span class="keyword">this</span>.randomValue(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">let</span> colorR = <span class="keyword">this</span>.randomValue(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">            <span class="keyword">let</span> colorG = <span class="keyword">this</span>.randomValue(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">            <span class="keyword">let</span> colorB = <span class="keyword">this</span>.randomValue(<span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line">            ctx.arc(x, y, r, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">            ctx.fillStyle = <span class="string">`rgb(<span class="subst">$&#123;colorR&#125;</span>,<span class="subst">$&#123;colorG&#125;</span>,<span class="subst">$&#123;colorB&#125;</span>)`</span>;</span><br><span class="line">            ctx.fill();</span><br><span class="line">            ctx.closePath();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">new</span> Canvas();</span><br></pre></td></tr></table></figure>
<h1 id="细节方面的问题"><a href="#细节方面的问题" class="headerlink" title="细节方面的问题"></a>细节方面的问题</h1><ul>
<li>其实之前canvas的位移translate是困扰我很久的，因为一旦位移translate没有复位，下一次的位移接着上次的计算，后来查了一些资料才知道。所以每次位移之后，把字符填充上之后又复位了回来（旋转也一定要复位不然和位移是一样的，都会叠加计算）。</li>
<li>每次刚开始要clearRect清除画布内容，否则刷新页面还是会叠加上次的画布内容（主要是我本次用的画布背景透明度是0.7，所以刷新页面会明显看到叠加的效果，如果一开始画布背景的透明度是1的话，不用clearRect效果也是一样的。） </li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Html5</tag>
      </tags>
  </entry>
  <entry>
    <title>H5动画帧requestAnimationFrame</title>
    <url>/H5%E5%8A%A8%E7%94%BB%E5%B8%A7requestAnimationFrame/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在Web应用中，实现动画效果的方法比较多，JavaScript 中可以通过定时器 <code>setTimeout</code> 来实现，<code>css3</code> 可以使用 <code>transition</code> 和 <code>animation</code> 来实现，html5 中的 <code>canvas</code> 也可以实现。除此之外，html5 还提供一个专门用于请求动画的 API，即 <code>requestAnimationFrame（rAF）</code>，顾名思义就是 “<code>请求动画帧</code>”。 为了深入理解  <code>rAF</code> 背后的原理（后文的 <code>rAF</code> 均指的是 <code>requestAnimationFrame</code>），我们首先需要了解一下与之相关的几个概念：</p>
<a id="more"></a>
<h1 id="屏幕绘制频率"><a href="#屏幕绘制频率" class="headerlink" title="屏幕绘制频率"></a>屏幕绘制频率</h1><p>即图像在屏幕上更新的速度，也即屏幕上的图像每秒钟出现的次数，它的单位是赫兹(<code>Hz</code>)。 对于一般笔记本电脑，这个频率大概是<code>60Hz</code>， 可以在桌面上 右键 &gt; 屏幕分辨率 &gt; 高级设置 &gt; 监视器 中查看和设置。这个值的设定受屏幕分辨率、屏幕尺寸和显卡的影响，原则上设置成让眼睛看着舒适的值都行。<br><code>当你对着电脑屏幕什么也不做的情况下，显示器也会以每秒60次的频率正在不断的更新屏幕上的图像</code>。为什么你感觉不到这个变化？ 那是因为人的眼睛有<code>视觉停留效应</code>，即前一副画面留在大脑的印象还没消失，紧接着后一副画面就跟上来了，这中间只间隔了<code>16.7ms(1000/60≈16.7)</code>， 所以会让你误以为屏幕上的图像是静止不动的。而屏幕给你的这种感觉是对的，试想一下，如果刷新频率变成1次/秒，屏幕上的图像就会出现严重的闪烁，这样就很容易引起眼睛疲劳、酸痛和头晕目眩等症状。</p>
<h1 id="CSS-动画原理"><a href="#CSS-动画原理" class="headerlink" title="CSS 动画原理"></a>CSS 动画原理</h1><p>根据上面的原理我们知道，你眼前所看到图像正在以每秒 <code>60</code> 次的频率绘制，由于频率很高，所以你感觉不到它在绘制。而 <code>动画本质就是要让人眼看到图像被绘制而引起变化的视觉效果，这个变化要以连贯的、平滑的方式进行过渡</code>。 那怎么样才能做到这种效果呢？<br><code>60Hz</code> 的屏幕每<code>16.7ms 绘制一次</code>，如果在屏幕每次绘制前，将元素的位置向左移动一个像素，即1px，这样一来，屏幕每次绘制出来的图像位置都比前一个要差1px，你就会看到图像在移动；而由于人眼的视觉停留效应，当前位置的图像停留在大脑的印象还没消失，紧接着图像又被移到了下一个位置，这样你所看到的效果就是，图像在流畅的移动。这就是视觉效果上形成的动画。 </p>
<h1 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h1><p>理解了上面的概念以后，我们不难发现，<code>setTimeout</code> 其实就是通过设置一个间隔时间来不断的改变图像的位置，从而达到动画效果的。但我们会发现，利用 <code>seTimeout</code> 实现的动画在某些低端机上会出现卡顿、抖动的现象。 这种现象的产生有两个原因：</p>
<ul>
<li><code>setTimeout</code> 的执行时间并不是确定的。在JavaScript中， setTimeout 任务被放进了异步队列中，<code>只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行</code>，所以 <code>setTimeout 的实际执行时机一般要比其设定的时间晚一些</code>。</li>
<li>刷新频率受 <code>屏幕分辨率</code> 和 <code>屏幕尺寸</code> 的影响，不同设备的屏幕绘制频率可能会不同，而 setTimeout 只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。</li>
</ul>
<p>以上两种情况都会导致 <code>setTimeout 的执行步调和屏幕的刷新步调不一致</code>，从而引起<code>丢帧</code>现象。 那为什么步调不一致就会引起丢帧呢？<br>首先要明白，setTimeout 的执行只是在内存中对元素属性进行改变，这个变化必须要等到屏幕下次绘制时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素。假设屏幕每隔<code>16.7ms</code>刷新一次，而<code>setTimeout</code> 每隔<code>10ms</code>设置图像向左移动<code>1px</code>， 就会出现如下绘制过程（表格）：</p>
<table>
<thead>
<tr>
<th>时间点</th>
<th>情况</th>
</tr>
</thead>
<tbody><tr>
<td>第 0 ms</td>
<td>屏幕未绘制等待中，setTimeout 也未执行，等待中</td>
</tr>
<tr>
<td>第 10 ms</td>
<td>屏幕未绘制等待中，setTimeout 开始执行并设置元素属性 left=1px</td>
</tr>
<tr>
<td>第 16.7 ms</td>
<td>屏幕开始绘制，屏幕上的元素向左移动了 1px， setTimeout 未执行，继续等待中</td>
</tr>
<tr>
<td>第 20 ms</td>
<td>屏幕未绘制，等待中，setTimeout 开始执行并设置 left=2px</td>
</tr>
<tr>
<td>第 30 ms</td>
<td>屏幕未绘制，等待中，setTimeout 开始执行并设置 left=3px</td>
</tr>
<tr>
<td>第 33.4  ms</td>
<td>屏幕开始绘制，屏幕上的元素向左移动了 3px， setTimeout 未执行，继续等待中</td>
</tr>
<tr>
<td>…</td>
<td>….</td>
</tr>
</tbody></table>
<p>从上面的绘制过程中可以看出，屏幕<code>没有更新 left=2px</code> 的那一帧画面，元素直接从<code>left=1px</code> 的位置跳到了 <code>left=3px</code> 的的位置，这就是丢帧现象，这种现象就会引起动画卡顿。</p>
<h1 id="rAF"><a href="#rAF" class="headerlink" title="rAF"></a>rAF</h1><p>与 setTimeout 相比，<code>rAF 最大的优势</code>是 <code>由系统来决定回调函数的执行时机</code>。具体一点讲就是，<code>系统每次绘制之前会主动调用 rAF 中的回调函数</code>，如果系统绘制率是 <code>60Hz</code>，那么回调函数就每<code>16.7ms</code> 被执行一次，如果绘制频率是<code>75Hz</code>，那么这个间隔时间就变成了 <code>1000/75=13.3ms</code>。换句话说就是，<code>rAF</code> 的执行步伐跟着系统的绘制频率走。<code>它能保证回调函数在屏幕每一次的绘制间隔中只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题</code>。<br>这个API的调用很简单，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">varprogress = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    progress += <span class="number">1</span>;<span class="comment">//修改图像的位置</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(progress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">           <span class="comment">//在动画没有结束前，递归渲染</span></span><br><span class="line">           <span class="built_in">window</span>.requestAnimationFrame(render);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一帧渲染</span></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(render);</span><br></pre></td></tr></table></figure>
<h2 id="除此之外，rAF-还有以下两个优势："><a href="#除此之外，rAF-还有以下两个优势：" class="headerlink" title="除此之外，rAF 还有以下两个优势："></a>除此之外，rAF 还有以下两个优势：</h2><ol>
<li><strong>CPU节能</strong>：使用 setTimeout 实现的动画，当页面被隐藏或最小化时，setTimeout 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，而且还浪费 CPU 资源。而 rAF 则完全不同，<code>当页面处理未激活的状态下</code>，该页面的屏幕<code>绘制任务</code>也会被系统暂停，因此跟着系统步伐走的 rAF 也会停止渲染，<code>当页面被激活时，动画就从上次停留的地方继续执行，有效节省了 CPU 开销</code>。</li>
<li><strong>函数节流</strong>：在高频率事件(resize,scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，使用 rAF 可保证<code>每个绘制间隔内</code>，函数<code>只被执行一次</code>，这样既能保证流畅性，也能更好的节省函数执行的开销。一个绘制间隔内函数执行多次时没有意义的，因为显示器每16.7ms 绘制一次，多次绘制并不会在屏幕上体现出来。</li>
</ol>
<h1 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h1><p>由于 <code>rAF</code> 目前还存在兼容性问题，而且不同的浏览器还需要带不同的前缀。因此需要通过优雅降级的方式对 <code>rAF</code> 进行封装，优先使用高级特性，然后再根据不同浏览器的情况进行回退，直止只能使用 <code>setTimeout</code> 的情况，因此可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame       ||</span><br><span class="line">          <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">          <span class="built_in">window</span>.mozRequestAnimationFrame    ||</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">          &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>但这种写法没有考虑 cancelAnimationFrame 的兼容性，并且不是所有的设备绘制时间间隔都是1000/60，下面的代码是比较全的一个 polyfill</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Date</span>.now)</span><br><span class="line">    <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;returnnewDate().getTime(); &#125;;</span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">     </span><br><span class="line">    varvendors = [<span class="string">'webkit'</span>,<span class="string">'moz'</span>];</span><br><span class="line">    <span class="keyword">for</span>(vari = <span class="number">0</span>; i &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++i) &#123;</span><br><span class="line">        varvp = vendors[i];</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vp+<span class="string">'RequestAnimationFrame'</span>];</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame = (<span class="built_in">window</span>[vp+<span class="string">'CancelAnimationFrame'</span>]</span><br><span class="line">                                   || <span class="built_in">window</span>[vp+<span class="string">'CancelRequestAnimationFrame'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/iP(ad|hone|od).*OS 6/</span>.test(<span class="built_in">window</span>.navigator.userAgent)<span class="comment">// iOS6 is buggy</span></span><br><span class="line">        || !<span class="built_in">window</span>.requestAnimationFrame || !<span class="built_in">window</span>.cancelAnimationFrame) &#123;</span><br><span class="line">        varlastTime = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            varnow = <span class="built_in">Date</span>.now();</span><br><span class="line">            varnextTime = <span class="built_in">Math</span>.max(lastTime + <span class="number">16</span>, now);</span><br><span class="line">            returnsetTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback(lastTime = nextTime); &#125;,</span><br><span class="line">                              nextTime - now);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame = clearTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原创发布 <a href="http://www.cnblogs.com/onepixel/p/7078617.html" target="_blank" rel="noopener">@一像素</a></p>
</blockquote>
<h1 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h1><ol>
<li>return 可以停止动画帧</li>
<li>window.cancelAnimationFrame(动画名)可以取消动画,<br>例子:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> frame1 =   <span class="built_in">window</span>.requestAnimationFrame(fn);</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame(frame1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>想要有动画效果，window.requestAnimationFrame()要在函数体内才行<br>例子:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(.....)&#123;   <span class="comment">// 当满足某条件时，停止动画</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>总例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div id=<span class="string">"map"</span> ref=<span class="string">"map"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/css</span></span><br><span class="line"><span class="regexp">#map &#123;</span></span><br><span class="line"><span class="regexp">  position: absolute;</span></span><br><span class="line"><span class="regexp">  width: 300px;</span></span><br><span class="line"><span class="regexp">  height: 180px;</span></span><br><span class="line"><span class="regexp">  background: red;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/js</span></span><br><span class="line"><span class="regexp"> move() &#123;</span></span><br><span class="line"><span class="regexp">      this.$nextTick(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        let mapL = parseInt(window.getComputedStyle(this.$refs.map).left); /</span><span class="regexp">/ 获取元素的left值</span></span><br><span class="line"><span class="regexp">        mapL += 1;  /</span><span class="regexp">/ 每次绘制left值加1</span></span><br><span class="line"><span class="regexp">        this.$refs.map.style.left = mapL + "px";</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 当位移量加上元素的宽度等于大于屏幕的宽度时，停止运动</span></span><br><span class="line"><span class="regexp">        if (parseInt(this.$refs.map.style.left) + this.$refs.map.offsetWidth &gt;= window.innerWidth) &#123;</span></span><br><span class="line"><span class="regexp">          return;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 绘制函数</span></span><br><span class="line"><span class="regexp">        window.requestAnimationFrame(this.move);</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Html5</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 中cookie 、cookie的js插件、Local Storage、Session Storage</title>
    <url>/JS%20%E4%B8%ADcookie%20%E3%80%81cookie%E7%9A%84js%E6%8F%92%E4%BB%B6%E3%80%81Local%20Storage%E3%80%81Session%20Storage/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="cookie、Local-Storage、Session-Storage-定义"><a href="#cookie、Local-Storage、Session-Storage-定义" class="headerlink" title="cookie、Local Storage、Session Storage 定义"></a>cookie、Local Storage、Session Storage 定义</h1><p><font color="#f40">Cookie（局限性）</font>：用户可以禁用cookie，<font color="#f40">最多只能存储4kb</font>，cookie有过期时间的（一般我们设置的时间最长1个月，<font color="#f40">用户使用杀毒软件也可以清除我们的cookie</font>），cookie还需要指定作用域，不可以跨域调用。</p>
<p><font color="#f40">LocalStorage</font>：持久化存储到本地，没有过期时间，<font color="#f40">最大可存储5MB</font><br>都是采用的明文存储，我们在控制台（Resource）下可以看到存储的信息，所以本地存储都是不安全的（不要存储重要的信息，如果需要的话，我们需要对重要的信息进行严格的加密—md5加密）</p>
<p><font color="#f40">WebStorage(localStorage(常用，sessionStorage))</font><br>由于我们的localStorage可以存储很多的数据，我们在项目中把不经常更新的数据进行存储，下一次打开页面，先把本地缓存的数据展示，减少对于服务器的请求压力—移动端的本地缓存。</p>
<p><font color="#f40">sessionStorage</font>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</p>
<a id="more"></a>
<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><p>Cookie 以名/值对形式存储，如下所示:<br>username=John Doe</p>
<h2 id="使用-JavaScript-创建Cookie（增）"><a href="#使用-JavaScript-创建Cookie（增）" class="headerlink" title="使用 JavaScript 创建Cookie（增）"></a>使用 JavaScript 创建Cookie（增）</h2><p>JavaScript 中，<font color="#f40">创建 cookie</font> 如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Doe"</span>;</span><br></pre></td></tr></table></figure>
<p><font color="#f40">设置cookie的生命周期</font>。默认情况下，cookie 在浏览器关闭时删除，<font color="#f40">可以用max-age单位是秒</font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Doe; max-age=5"</span>;<span class="comment">//cookie生命周期为5秒</span></span><br></pre></td></tr></table></figure>
<p>您可以使用<font color="#f40">path 参数告诉浏览器 cookie 的路径</font> 。默认情况下，cookie 属于当前页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Doe;max-age=5 ; path=/"</span>;</span><br></pre></td></tr></table></figure>

<h2 id="使用-JavaScript-删除-Cookie-删"><a href="#使用-JavaScript-删除-Cookie-删" class="headerlink" title="使用 JavaScript 删除 Cookie(删)"></a>使用 JavaScript 删除 Cookie(删)</h2><p>删除 cookie 非常简单。您只需要设置 max-age 参数为0即可，如下所示，设置为 max-age=0;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"username=;max-age=0;"</span>;</span><br></pre></td></tr></table></figure>
<p>注意，当您删除时不必指定 cookie 的值。</p>
<h2 id="使用-JavaScript-修改-Cookie（改）"><a href="#使用-JavaScript-修改-Cookie（改）" class="headerlink" title="使用 JavaScript 修改 Cookie（改）"></a>使用 JavaScript 修改 Cookie（改）</h2><p>在 JavaScript 中，修改 cookie 类似于创建 cookie，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie=<span class="string">"username=John Smith; path=/"</span>;</span><br></pre></td></tr></table></figure>
<p>旧的 cookie 将被覆盖。</p>
<h2 id="JavaScript-读取-Cookie（查）"><a href="#JavaScript-读取-Cookie（查）" class="headerlink" title="JavaScript 读取 Cookie（查）"></a>JavaScript 读取 Cookie（查）</h2><p>在 JavaScript 中, 可以使用以下代码来读取 cookie，<font color="#f40">以字符串的形式返回 ，每对的cookie值都是以；结尾的，可以截取用</font><br>有些浏览器不识别汉字需要编码<br><font color="#f40">encodeURIComponent()</font>    对汉字进行编码<br><font color="#f40">decodeURIComponent()</font>　  对编码的结果进行解码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br></pre></td></tr></table></figure>
<p>运行结果<br><img src="/JS%20%E4%B8%ADcookie%20%E3%80%81cookie%E7%9A%84js%E6%8F%92%E4%BB%B6%E3%80%81Local%20Storage%E3%80%81Session%20Storage/1.png" alt></p>
<p><img src="/JS%20%E4%B8%ADcookie%20%E3%80%81cookie%E7%9A%84js%E6%8F%92%E4%BB%B6%E3%80%81Local%20Storage%E3%80%81Session%20Storage/2.png" alt></p>
<h1 id="轻量级JS-Cookie插件js-cookie的使用方法"><a href="#轻量级JS-Cookie插件js-cookie的使用方法" class="headerlink" title="轻量级JS Cookie插件js-cookie的使用方法"></a>轻量级JS Cookie插件js-cookie的使用方法</h1><p>介绍：js-cookie插件是一个JS操作cookie的插件，源文件只有3.34 KB，非常轻量级。js-cookie也支持npm和Bower安装和管理。</p>
<h2 id="引入js-cookie-js"><a href="#引入js-cookie-js" class="headerlink" title="引入js-cookie.js"></a>引入js-cookie.js</h2><ul>
<li><p>直接引用cdn：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>本地下载下来后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/path/to/js.cookie.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模块化开发时:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="js-cookie-js常用的API和方法"><a href="#js-cookie-js常用的API和方法" class="headerlink" title="js-cookie.js常用的API和方法"></a>js-cookie.js常用的API和方法</h2><ol>
<li><p>设置cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; max-age: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">''</span> &#125;);<span class="comment">//7秒过期</span></span><br><span class="line">Cookies.set(<span class="string">'name'</span>, &#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;);<span class="comment">//设置一个json</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>读取cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Cookies.get(<span class="string">'name'</span>);<span class="comment">//获取cookie</span></span><br><span class="line">Cookies.get(); <span class="comment">//读取所有的cookie</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Cookies.remove(<span class="string">'name'</span>); <span class="comment">//删除cookie时必须是同一个路径。</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="localStorage和sessionStorage"><a href="#localStorage和sessionStorage" class="headerlink" title="localStorage和sessionStorage"></a>localStorage和sessionStorage</h1><p>localStorage和sessionStorage的语法是一样的</p>
<p>// 保存数据到sessionStorage</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.setItem(<span class="string">'key'</span>, <span class="string">'value'</span>);</span><br></pre></td></tr></table></figure>

<p>// 从sessionStorage获取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = sessionStorage.getItem(<span class="string">'key'</span>);</span><br></pre></td></tr></table></figure>
<p>也可以直接用sessionStorage.key</p>
<p>// 从sessionStorage删除保存的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.removeItem(<span class="string">'key'</span>);</span><br></pre></td></tr></table></figure>

<p>// 从sessionStorage删除所有保存的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sessionStorage.clear();</span><br></pre></td></tr></table></figure>

<p>注意：<br>往localStorage和sessionStorage传值的话，比如传对象或者数组的时候记得先把其转换成json对象，用JSON.stringify();获取值的时候再用<font color="#f40">JSON.parse()或者eval(“(“+ JSON+”)”)</font>等方法去解析JSON。<br>例子：<br><img src="/JS%20%E4%B8%ADcookie%20%E3%80%81cookie%E7%9A%84js%E6%8F%92%E4%BB%B6%E3%80%81Local%20Storage%E3%80%81Session%20Storage/3.png" alt></p>
<p>localStorage的语法和sessionStorage是一样的</p>
<p>关于cookie、localStorage和sessionStorage的区别详细的讲解<br><a href="https://www.cnblogs.com/pengc/p/8714475.html" target="_blank" rel="noopener">https://www.cnblogs.com/pengc/p/8714475.html</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Html5</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Jest测试之匹配器</title>
    <url>/Jest%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%8C%B9%E9%85%8D%E5%99%A8/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="运行Jest"><a href="#运行Jest" class="headerlink" title="运行Jest"></a>运行Jest</h1><ol>
<li>安装jest</li>
</ol>
<ul>
<li>yarn安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add --dev jest</span><br></pre></td></tr></table></figure></li>
<li>npm 安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev jest</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>添加运行脚本<a id="more"></a>
在package.json中添加运行脚本<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>:<span class="string">"jest --watchAll"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
创建测试文件名字的格式 <code>*.test.js</code>,比如：<code>index.test.js</code></li>
</ol>
<h1 id="toBe"><a href="#toBe" class="headerlink" title="toBe"></a>toBe</h1><p>toBe选择器是严格匹配的，对象的引用地址不同是会报错的。</p>
<ul>
<li>简单的例子<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBe 简单的例子'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="number">1</span>+<span class="number">1</span>).toBe(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>使用对象时<br>错误例子<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBe 对象的错误例子'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">    expect(obj).toBe(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);  <span class="comment">// 报错，因为引用地址不一样</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
正确的例子<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBe 对象的正确例子'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> newObj = obj;</span><br><span class="line">    expect(obj).toBe(newObj);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="toEqual"><a href="#toEqual" class="headerlink" title="toEqual"></a>toEqual</h1><p>和toBe类似，但不同的是对于对象的判断处理。toEqual不会要求对象的引用地址不一样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toEqual'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line">    expect(<span class="number">1</span> + <span class="number">1</span>).toEqual(<span class="number">2</span>);</span><br><span class="line">    expect(obj).toEqual(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toBeNull"><a href="#toBeNull" class="headerlink" title="toBeNull"></a>toBeNull</h1><p>测试是否为null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeNull'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="literal">null</span>).toBeNull();      <span class="comment">// 通过</span></span><br><span class="line">    expect(<span class="literal">undefined</span>).toBeNull();  <span class="comment">// 失败</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toBeUndefined"><a href="#toBeUndefined" class="headerlink" title="toBeUndefined"></a>toBeUndefined</h1><p>测试是否为undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeUndefined'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="literal">undefined</span>).toBeUndefined();  <span class="comment">// 通过</span></span><br><span class="line">    expect(<span class="literal">null</span>).toBeUndefined();      <span class="comment">// 失败</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toBeTruthy"><a href="#toBeTruthy" class="headerlink" title="toBeTruthy"></a>toBeTruthy</h1><p>测试是否为true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeTruthy'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="number">1</span>).toBeTruthy();     <span class="comment">// 通过</span></span><br><span class="line">    expect(<span class="literal">null</span>).toBeTruthy();  <span class="comment">// 失败</span></span><br><span class="line">    expect(<span class="number">0</span>).toBeTruthy();     <span class="comment">// 失败</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toBeFalsy"><a href="#toBeFalsy" class="headerlink" title="toBeFalsy"></a>toBeFalsy</h1><p>测试是否为false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeFalsy'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="literal">false</span>).toBeFalsy();     <span class="comment">// 通过</span></span><br><span class="line">    expect(<span class="literal">null</span>).toBeFalsy();      <span class="comment">// 通过</span></span><br><span class="line">    expect(<span class="literal">true</span>).toBeFalsy();      <span class="comment">// 失败</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toHaveBeenCalled"><a href="#toHaveBeenCalled" class="headerlink" title="toHaveBeenCalled"></a>toHaveBeenCalled</h1><p>函数是否被调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drinkAll</span>(<span class="params">callback, drink</span>) </span>&#123;</span><br><span class="line">    callback(drink)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">'toHaveBeenCalled'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> mockFn = jest.fn();  <span class="comment">//jest的模拟出的一个函数</span></span><br><span class="line">    drinkAll(mockFn,<span class="string">"water"</span>);</span><br><span class="line">    expect(mockFn).toHaveBeenCalled();  <span class="comment">// 通过</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toHaveBeenCalled-1"><a href="#toHaveBeenCalled-1" class="headerlink" title="toHaveBeenCalled"></a>toHaveBeenCalled</h1><p>函数是否被调用的次数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drinkAll</span>(<span class="params">callback, drink</span>) </span>&#123;</span><br><span class="line">    callback(drink)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">'toHaveBeenCalledTimes'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> mockFn = jest.fn();</span><br><span class="line">    drinkAll(mockFn,<span class="string">"water"</span>);</span><br><span class="line">    drinkAll(mockFn,<span class="string">"water"</span>);</span><br><span class="line">    expect(mockFn).toHaveBeenCalledTimes(<span class="number">2</span>);  <span class="comment">// 通过</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toHaveBeenCalledWith"><a href="#toHaveBeenCalledWith" class="headerlink" title="toHaveBeenCalledWith"></a>toHaveBeenCalledWith</h1><p>函数被调用时的所有参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drinkAll</span>(<span class="params">callback, drink</span>) </span>&#123;</span><br><span class="line">    callback(drink,<span class="string">"milk"</span>)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">'toHaveBeenCalled'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> mockFn = jest.fn();</span><br><span class="line">    drinkAll(mockFn,<span class="string">"water"</span>);</span><br><span class="line">    expect(mockFn).toHaveBeenCalledWith(<span class="string">"water"</span>,<span class="string">"milk"</span>);  <span class="comment">// 通过  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="数字相关的匹配器"><a href="#数字相关的匹配器" class="headerlink" title="数字相关的匹配器"></a>数字相关的匹配器</h1><ul>
<li><p>toBeGreaterThan(number | bigint)<br>等价符号 <code>&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeGreaterThan'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="number">1</span>).toBeGreaterThan(<span class="number">0</span>);  <span class="comment">// 通过  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>toBeGreaterThanOrEqual(number | bigint)<br>等价符号 <code>&gt;=</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeGreaterThanOrEqual'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="number">1</span>).toBeGreaterThanOrEqual(<span class="number">1</span>);  <span class="comment">// 通过  </span></span><br><span class="line">    expect(<span class="number">1</span>).toBeGreaterThanOrEqual(<span class="number">0</span>);  <span class="comment">// 通过  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>toBeLessThan(number | bigint)<br>等价符号 <code>&lt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeLessThan'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="number">1</span>).toBeLessThan(<span class="number">2</span>);  <span class="comment">// 通过  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>toBeLessThanOrEqual(number | bigint)<br>等价符号 <code>&lt;=</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toBeLessThanOrEqual'</span>, () =&gt; &#123;</span><br><span class="line">    expect(<span class="number">1</span>).toBeLessThanOrEqual(<span class="number">2</span>);  <span class="comment">// 通过  </span></span><br><span class="line">    expect(<span class="number">1</span>).toBeLessThanOrEqual(<span class="number">1</span>);  <span class="comment">// 通过  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="toContain-item"><a href="#toContain-item" class="headerlink" title="toContain(item)"></a>toContain(item)</h1><p>测试是否存在数组中，相当于 <code>===</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toContain'</span>, () =&gt; &#123;</span><br><span class="line">    expect([<span class="number">1</span>,<span class="number">2</span>]).toContain(<span class="number">2</span>);  <span class="comment">// 通过  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="toContainEqual-item"><a href="#toContainEqual-item" class="headerlink" title="toContainEqual(item)"></a>toContainEqual(item)</h1><p>当要测试数组中的对象是否存在时，需要用到toContainEqual</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'toContainEqual'</span>, () =&gt; &#123;</span><br><span class="line">    expect([<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;]).toContainEqual(<span class="number">2</span>);  <span class="comment">// 通过  </span></span><br><span class="line">    expect([<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;]).toContainEqual(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;);  <span class="comment">// 通过  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考<a href="https://jestjs.io/docs/en/expect" target="_blank" rel="noopener">Jest官方文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Jest</tag>
      </tags>
  </entry>
  <entry>
    <title>Node如何获取前端的cookie</title>
    <url>/Node%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E7%9A%84cookie/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><p>下面的代码实现使用的是express框架</p>
<h2 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h2><p>核心代码<font color="#f40">req.headers.cookie</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.get(&quot;&#x2F;init&quot;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">res.header(&quot;Content-Type&quot;, &quot;application&#x2F;json; charset&#x3D;utf-8&quot;);</span><br><span class="line">var cookies &#x3D; req.headers.cookie;</span><br><span class="line">console.log(cookies)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行结果：<br><img src="/Node%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E7%9A%84cookie/1.png" alt="1.png"><br>前端cookie：<br><img src="/Node%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AF%E7%9A%84cookie/2.png" alt="2.png"></p>
<h1 id="把cookie以字符串的形式切割成了对象"><a href="#把cookie以字符串的形式切割成了对象" class="headerlink" title="把cookie以字符串的形式切割成了对象"></a>把cookie以字符串的形式切割成了对象</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.get(&quot;&#x2F;init&quot;,(req,res)&#x3D;&gt;&#123;</span><br><span class="line">res.header(&quot;Content-Type&quot;, &quot;application&#x2F;json; charset&#x3D;utf-8&quot;);</span><br><span class="line">var cookies &#x3D; req.headers.cookie;</span><br><span class="line">console.log(cookies)</span><br><span class="line">&#x2F;&#x2F; 判断cookie是否存在</span><br><span class="line">if (cookies) &#123;</span><br><span class="line">    let arr &#x3D; cookies.split(&quot;;&quot;)</span><br><span class="line">    let cookiesObj &#x3D; &#123;&#125;; &#x2F;&#x2F;对象形式的cookie</span><br><span class="line">    arr.forEach(item &#x3D;&gt; &#123;</span><br><span class="line">        let objArr &#x3D; item.split(&quot;&#x3D;&quot;);</span><br><span class="line">        cookiesObj[objArr[0].trim()] &#x3D; objArr[1].trim()</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(cookiesObj)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>React hooks中useContext更新数据的方法</title>
    <url>/React%20hooks%E4%B8%ADuseContext%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="关于context的知识点"><a href="#关于context的知识点" class="headerlink" title="关于context的知识点"></a>关于context的知识点</h1><p>context 是react 提供的<code>实现数据共享的api</code>，<code>解决props层层传递的问题</code></p>
<ol>
<li><code>React.createContext()</code>创建Context对象</li>
<li>使用<code>Context Provider</code>包裹组件 <code>给他的后代组件提供数据</code></li>
<li>Context Provider所有的后代组件，都可以<code>通过Context.Consumer获取到Context数据</code></li>
</ol>
<a id="more"></a>
<p>useContext(context)</p>
<ol>
<li><code>useContext(context)</code>是针对context（上下文）提出的api</li>
<li>它接受<code>React.createContext()的返回结果作为参数</code>也就是context对象 并返回最近的context</li>
<li>使用useContext 将不再需要Provider和Consumer</li>
<li>当最近的<code>context更新</code>时，那么使用该conntext的hook将会<code>重新渲染</code></li>
</ol>
<h1 id="本次用的Hook"><a href="#本次用的Hook" class="headerlink" title="本次用的Hook"></a>本次用的Hook</h1><ul>
<li>useState</li>
<li>useContext</li>
</ul>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul>
<li>父组件App</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, createContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ChildA <span class="keyword">from</span> <span class="string">'./components/childA'</span>;</span><br><span class="line"><span class="keyword">import</span> ChildB <span class="keyword">from</span> <span class="string">'./components/childB'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> InitContext = createContext(&#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">    &lt;InitContext.Provider</span><br><span class="line">    <span class="comment">// value就是通过context 共享的数据 这里是store</span></span><br><span class="line">      value=&#123;&#123;  </span><br><span class="line">        count,</span><br><span class="line">        setCount</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div className=<span class="string">"App"</span> &gt;</span><br><span class="line">        &lt;ChildA /&gt;</span><br><span class="line">        &lt;ChildB /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>InitContext.Provider&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<ul>
<li>子组件ChildA</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InitContext &#125; <span class="keyword">from</span> <span class="string">'../../App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ChildA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contextData = useContext(InitContext);  <span class="comment">// 接收一个 context 对象并返回该 context 的当前值。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;contextData.count&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ChildA;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>子组件ChildB</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InitContext &#125; <span class="keyword">from</span> <span class="string">'../../App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ChildB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contextData = useContext(InitContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加</span></span><br><span class="line">    <span class="keyword">const</span> add = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 调用contextData中的setCount方法来改变contextData中的count值</span></span><br><span class="line">        contextData.setCount(contextData.count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; add()&#125;&gt;增加&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ChildB;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React中fontawesome图标库的使用步骤</title>
    <url>/React%E4%B8%ADfontawesome%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>使用的是最新版<code>svg</code>的，之前版本使用的的<code>font icon</code></p>
<h1 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i --save @fortawesome&#x2F;fontawesome-svg-core</span><br><span class="line"></span><br><span class="line">npm i --save @fortawesome&#x2F;react-fontawesome</span><br><span class="line"></span><br><span class="line">npm i --save  @fortawesome&#x2F;free-solid-svg-icons</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、组件中引入"><a href="#二、组件中引入" class="headerlink" title="二、组件中引入"></a>二、组件中引入</h1><p>和官网的图标名有点不一样，比如官网的图标名是<code>coffee</code>，这里因为就应该是<code>faCoffee</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;FontAwesomeIcon&#125; from &#39;@fortawesome&#x2F;react-fontawesome&#39;</span><br><span class="line"></span><br><span class="line">import &#123;faCoffee&#125; from &#39;@fortawesome&#x2F;free-solid-svg-icons&#39;</span><br></pre></td></tr></table></figure>
<h1 id="三、组件中使用"><a href="#三、组件中使用" class="headerlink" title="三、组件中使用"></a>三、组件中使用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FontAwesomeIcon icon &#x3D;&#123;faCoffee&#125; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h1 id="四、图标以字符串形式引入的方式"><a href="#四、图标以字符串形式引入的方式" class="headerlink" title="四、图标以字符串形式引入的方式"></a>四、图标以字符串形式引入的方式</h1><ol>
<li>添加指定的图标<br>例子:<br>引入的<code>faCoffee</code>，使用的时候变成<code>coffee</code>，就是去掉fa，然后小写<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FontAwesomeIcon &#125; <span class="keyword">from</span> <span class="string">"@fortawesome/react-fontawesome"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">"@fortawesome/fontawesome-svg-core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; faCoffee &#125; <span class="keyword">from</span> <span class="string">'@fortawesome/free-solid-svg-icons'</span></span><br><span class="line">library.add(faCoffee);</span><br><span class="line"></span><br><span class="line">&lt;FontAwesomeIcon icon =<span class="string">"coffee"</span> /&gt;</span><br></pre></td></tr></table></figure></li>
<li>添加所有的图标<br>例子：<br>用的是fas参数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FontAwesomeIcon &#125; <span class="keyword">from</span> <span class="string">"@fortawesome/react-fontawesome"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; library &#125; <span class="keyword">from</span> <span class="string">"@fortawesome/fontawesome-svg-core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fas &#125; <span class="keyword">from</span> <span class="string">'@fortawesome/free-solid-svg-icons'</span></span><br><span class="line">library.add(fas);</span><br><span class="line"></span><br><span class="line">&lt;FontAwesomeIcon icon =<span class="string">"coffee"</span> /&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React中的proxy</title>
    <url>/React%E4%B8%AD%E7%9A%84proxy/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、安装http-proxy-middleware"><a href="#一、安装http-proxy-middleware" class="headerlink" title="一、安装http-proxy-middleware"></a>一、安装http-proxy-middleware</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install http-proxy-middleware --save</span><br></pre></td></tr></table></figure>
<h1 id="二、进行配置"><a href="#二、进行配置" class="headerlink" title="二、进行配置"></a>二、进行配置</h1><p>安装middleware插件后，在src目录中新建setupProxy.js文件，在文件中放入如下代码：</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(createProxyMiddleware(<span class="string">'/api'</span>, &#123;</span><br><span class="line">    target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">    secure: <span class="literal">false</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      <span class="string">"^/api"</span>: <span class="string">"/api"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单来说就是当接口是以/api开头才用代理。</p>
<p>比如：<br>本来是在localhost:8080启动的react，<br><font color="#f40">axios.get(“/api/a”)请求，最后代理路径就是<a href="http://localhost:3000/api/a" target="_blank" rel="noopener">http://localhost:3000/api/a</a> </font></p>
<p><font color="#f40">pathRewrite ： 路径重写功能</font> 默认的好像是pathRewrite: {<br>“^/xxx”: “”} 这个xxx是和createProxyMiddleware()第一个参数对应的。<br>上诉例子就是当匹配到/api开头的接口，开头的 <font color="#f40">/api不变</font>。如果上诉例子这样写 ==pathRewrite: {“^/api”: “/api”}== 意思就是开头的 <font color="#f40">/api</font> 变成了 ==””==（空字符串）<br>这个功能相当于js中的replace功能</p>
<h1 id="三、然后运行项目"><a href="#三、然后运行项目" class="headerlink" title="三、然后运行项目"></a>三、然后运行项目</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React使用ref操作dom</title>
    <url>/React%E4%BD%BF%E7%94%A8ref%E6%93%8D%E4%BD%9Cdom/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="第一种（不推荐）"><a href="#第一种（不推荐）" class="headerlink" title="第一种（不推荐）"></a>第一种（不推荐）</h1><p>用法：<font color="#f40">ref=”名字”</font><br>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">   <span class="keyword">this</span>.refs.dom.style.width = <span class="string">"100px"</span>;</span><br><span class="line">   <span class="keyword">this</span>.refs.dom.style.height = <span class="string">"100px"</span>;</span><br><span class="line">   <span class="keyword">this</span>.refs.dom.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> render() &#123;</span><br><span class="line">   <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"dom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>  运行效果图：<br>  <a id="more"></a><br>  <img src="/React%E4%BD%BF%E7%94%A8ref%E6%93%8D%E4%BD%9Cdom/1.png" alt="1.png"><br>  会有一个警告（意思是不推荐这种方法）：</p>
<blockquote>
<p>Warning: A string ref, “dom”, has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead.</p>
</blockquote>
<h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><p>用法：<font color="#f40">ref={(dom)=&gt;this.mode = dom}</font><br>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">this</span>.mode.style.width = <span class="string">"100px"</span>;</span><br><span class="line">  <span class="keyword">this</span>.mode.style.height = <span class="string">"100px"</span>;</span><br><span class="line">  <span class="keyword">this</span>.mode.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&lt;div ref=&#123;(dom</span>)=&gt;</span><span class="keyword">this</span>.mode = dom&#125;&gt;&lt;<span class="regexp">/div&gt;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>运行效果：<br><img src="/React%E4%BD%BF%E7%94%A8ref%E6%93%8D%E4%BD%9Cdom/2.png" alt="2.png"></p>
<h1 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h1><p>父组件操作子组件的dom元素<br><font color="#f40">父组件给子组件传参this：scope={this}</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyDiv</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&lt;div ref=&#123;(dom</span>)=&gt;</span>&#123;props.scope.myDiv=dom&#125;&#125;&gt;&lt;<span class="regexp">/div&gt;)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class Test extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">    this.myDiv.style.width ="100px";</span></span><br><span class="line"><span class="regexp">    this.myDiv.style.height ="100px";</span></span><br><span class="line"><span class="regexp">    this.myDiv.style.backgroundColor ="red";</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (&lt;MyDiv scope=&#123;this&#125; /</span>&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果图：<br>和上面的例子的效果是一样的。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React修改eslint配置</title>
    <url>/React%E4%BF%AE%E6%94%B9eslint%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、在package-json中添加rules"><a href="#一、在package-json中添加rules" class="headerlink" title="一、在package.json中添加rules"></a>一、在package.json中添加rules</h1><p>在package.json中找到eslintConfig这一项，在里面添加rules进行修改即可<br>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"eslintConfig"</span>: &#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"react-app"</span>,</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"jsx-a11y/anchor-is-valid"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、打开webpack进行配置修改"><a href="#二、打开webpack进行配置修改" class="headerlink" title="二、打开webpack进行配置修改"></a>二、打开webpack进行配置修改</h1><p>运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run eject</span><br></pre></td></tr></table></figure>
<p>这时候就会多出个config文件夹，里面有个<font color="#f40">webpack.config.js</font>是用来配置webpack的。</p>
<p>如果仅仅是在package.json修改后的话，重新打开服务器你会发现，修改的eslint配置并<font color="#f40">没有更新</font>，这是因为webpack.config.js 里面有个<font color="#f40">eslint-loader</font>的配置，其中有个<font color="#f40">cache</font>配置默认设置的是<font color="#f40">true</font>，要把它修改为false，再<font color="#f40">重启一下服务器</font>就好了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React只更新state中对象中的某一项值，setState中的回调</title>
    <url>/React%E5%8F%AA%E6%9B%B4%E6%96%B0state%E4%B8%AD%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%80%E9%A1%B9%E5%80%BC%EF%BC%8CsetState%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="只更新state中对象中的某一项值"><a href="#只更新state中对象中的某一项值" class="headerlink" title="只更新state中对象中的某一项值"></a>只更新state中对象中的某一项值</h1><p>要用到<code>Object.assign()</code>方法<br>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state &#x3D; &#123;</span><br><span class="line">count: [</span><br><span class="line">    &#123; num: 0, title: &quot;用户总数&quot;, background: &quot;#66ef66&quot; &#125;,</span><br><span class="line">    &#123; num: 0, title: &quot;商品总数&quot;, background: &quot;#f9cb4a&quot; &#125;,</span><br><span class="line">    &#123; num: 0, title: &quot;订单总数&quot;, background: &quot;#f93232&quot; &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>想要更新count数组每一项中第一个对象中的num值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">    count:[</span><br><span class="line">              Object.assign(&#123;&#125;,this.state.count[0],&#123;num:1&#125;),</span><br><span class="line">              Object.assign(&#123;&#125;,this.state.count[1],&#123;num:2&#125;),</span><br><span class="line">              Object.assign(&#123;&#125;,this.state.count[2],&#123;num:3&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="setState中的回调"><a href="#setState中的回调" class="headerlink" title="setState中的回调"></a>setState中的回调</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>由于有时候setState是异步操作的，这就导致了，setState时获取state值时有可能还没更新。<br>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state &#x3D;&#123;value:1&#125;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">    value: 2</span><br><span class="line">&#125;)</span><br><span class="line">console.log(this.state.value)  &#x2F;&#x2F; 1</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>setState的参数：setState(updater, [callback])<br>用setState的回调方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.state &#x3D;&#123;value:1&#125;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">    value: 2</span><br><span class="line">&#125;, () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(this.state.value) &#x2F;&#x2F;2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React的Hooks中useContext和useReduce组合使用实现redux效果</title>
    <url>/React%E7%9A%84Hooks%E4%B8%ADuseContext%E5%92%8CuseReduce%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%E5%AE%9E%E7%8E%B0redux%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="先声明一个useReducer文件"><a href="#先声明一个useReducer文件" class="headerlink" title="先声明一个useReducer文件"></a>先声明一个useReducer文件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initData = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;<span class="comment">//初始数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 派发事件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state , action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"sub"</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"change"</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, <span class="attr">count</span>: action.changeCount &#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ContextData = createContext(&#123;&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="在App-js中引入"><a href="#在App-js中引入" class="headerlink" title="在App.js中引入"></a>在App.js中引入</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reducer, ContextData, initData &#125; <span class="keyword">from</span> <span class="string">"./useReducer"</span> <span class="comment">//引入useReducer文件</span></span><br><span class="line"><span class="keyword">import</span>  Children <span class="keyword">from</span> <span class="string">"./Children"</span> <span class="comment">//引入Children组件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&lt;!-- 获取是state和dispatch --&gt;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initData);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  &lt;!--ContextData.Provider包裹子元素，让子元素获取到useContext中的值--&gt;</span><br><span class="line">    &lt;ContextData.Provider value=&#123;&#123;</span><br><span class="line">      state,</span><br><span class="line">      dispatch <span class="comment">// 把 dispatch 也作为 context 的一部分共享下去，从而在嵌套组件中调用以实现更新顶层的 state</span></span><br><span class="line">    &#125;&#125;&gt;</span><br><span class="line">      &lt;div className=<span class="string">"app"</span>&gt;</span><br><span class="line">            &lt;Children /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ContextData.Provider&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<h1 id="子组件Children中调用"><a href="#子组件Children中调用" class="headerlink" title="子组件Children中调用"></a>子组件Children中调用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123;useEffect, useContext &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; ContextData &#125; from &quot;..&#x2F;..&#x2F;useReducer&quot;;</span><br><span class="line">const Children &#x3D; ()&#x3D;&gt;&#123;</span><br><span class="line">    &lt;!-- 获取到useContext中存的值 --&gt;</span><br><span class="line">    const &#123; state, dispatch &#125; &#x3D; useContext(ContextData);</span><br><span class="line">    useEffect(()&#x3D;&gt;&#123;</span><br><span class="line">        dispatch(&#123;type:&quot;add&quot;&#125;) &#x2F;&#x2F;派发事件</span><br><span class="line">        console.log(state)      &#x2F;&#x2F;获取祖先组件的useReducer的值</span><br><span class="line">        dispatch(&#123;type:&quot;change&quot;,changeCount:110&#125;) &#x2F;&#x2F;派发事件，通过第二个参数去修改值</span><br><span class="line">    &#125;,[])</span><br><span class="line">  return(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        children子组件</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Children;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React组件传参父子，爷孙，兄弟</title>
    <url>/React%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82%E7%88%B6%E5%AD%90%EF%BC%8C%E7%88%B7%E5%AD%99%EF%BC%8C%E5%85%84%E5%BC%9F/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="父子组件传参"><a href="#父子组件传参" class="headerlink" title="父子组件传参"></a>父子组件传参</h1><p>父组件在子组件上写上类似html标签的属性和属性值，子组件用props接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">text</span>=<span class="string">"来自父组件的参数"</span> /&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.text);  <span class="comment">// 来自父组件的参数</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果是:   </p>
<a id="more"></a>
<p><code>来自父组件的参数</code></p>
<h1 id="爷孙组件传参"><a href="#爷孙组件传参" class="headerlink" title="爷孙组件传参"></a>爷孙组件传参</h1><p>父子传参的方法用两遍就行了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">text</span>=<span class="string">"来自爷组件的参数"</span> /&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">Sun</span> <span class="attr">childText</span>=<span class="string">&#123;this.props.text&#125;/</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 孙组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sun</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.childText); <span class="comment">// 来自爷组件的参数</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.childText&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果是：<br><code>来自爷组件的参数</code></p>
<h1 id="兄弟组件传参"><a href="#兄弟组件传参" class="headerlink" title="兄弟组件传参"></a>兄弟组件传参</h1><p>其中一个子组件把数据通过props传给父组件，父组件在给其他的子组件传参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line">      data:<span class="string">"我是ChildB组件"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  change()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      data:<span class="string">"我是ChildA组件传过来的数据"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildA</span> <span class="attr">dataChange</span>=<span class="string">&#123;()</span>=&gt;</span>this.change()&#125;/&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ChildB</span> <span class="attr">data</span>=<span class="string">&#123;this.state.data&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildA</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">&lt;button onClick=&#123;(</span>)=&gt;</span><span class="keyword">this</span>.props.dataChange(<span class="string">"ChildA"</span>)&#125;&gt;click&lt;<span class="regexp">/button&gt;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 子组件B</span></span><br><span class="line"><span class="regexp">class ChildB extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">  return (&lt;div&gt;&#123;this.props.data&#125;&lt;/</span>div&gt;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>点击之前：<br><img src="/React%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82%E7%88%B6%E5%AD%90%EF%BC%8C%E7%88%B7%E5%AD%99%EF%BC%8C%E5%85%84%E5%BC%9F/1.png" alt="1.png"><br>点击之后：<br><img src="/React%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82%E7%88%B6%E5%AD%90%EF%BC%8C%E7%88%B7%E5%AD%99%EF%BC%8C%E5%85%84%E5%BC%9F/2.png" alt="2.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript中的接口interface</title>
    <url>/TypeScript%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3interface/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口是由<code>interface</code>去定义的，知识点分为</p>
<ul>
<li>属性接口</li>
<li>函数类型接口</li>
<li>可索引接口</li>
<li>类类型接口</li>
<li>接口扩展</li>
</ul>
<h1 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h1><p>每个属性用分号结尾，而不是逗号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface UserInfo &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">obj: UserInfo</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.name, obj.age);  <span class="comment">// www 18</span></span><br><span class="line">&#125;</span><br><span class="line">person(&#123; <span class="attr">name</span>: <span class="string">"www"</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h1><p>对函数的参数和返回值进行约束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代表函数接口为UserInfo时，</span></span><br><span class="line"><span class="comment"> * 参数name为string，age为number，</span></span><br><span class="line"><span class="comment"> * 回值类型为string;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface UserInfo &#123;</span><br><span class="line">  (name: string, <span class="attr">age</span>: number): string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: UserInfo = <span class="function"><span class="keyword">function</span> (<span class="params">name: string, age: number</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name + age;</span><br><span class="line">&#125;;</span><br><span class="line">person(<span class="string">"www"</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure>
<h1 id="可索引接口"><a href="#可索引接口" class="headerlink" title="可索引接口"></a>可索引接口</h1><p>对数组和对象进行约束（不常用）</p>
<p>数组例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组为接口UserArr的类型，</span></span><br><span class="line"><span class="comment"> * 数组中的每项值为string，</span></span><br><span class="line"><span class="comment"> * 索引值为number类型，如：arr[0],arr[1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface UserArr &#123;</span><br><span class="line">  [index: number]: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr: UserArr = [<span class="string">"name"</span>, <span class="string">"age"</span>];</span><br><span class="line"><span class="comment">// 正确例子</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"sex"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误例子</span></span><br><span class="line">arr[<span class="string">"like"</span>] = <span class="string">"yes"</span></span><br></pre></td></tr></table></figure>
<p>对象例子：<br>当index的类型为string时，代表是对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当index的类型为string时，代表是对象</span></span><br><span class="line"><span class="comment"> * 对象的属性值为string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface UserObj &#123;</span><br><span class="line">  [index: string]: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: UserObj = &#123;<span class="attr">name</span>:<span class="string">"www"</span>,<span class="attr">age</span>:<span class="string">"18"</span>&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="类类型接口"><a href="#类类型接口" class="headerlink" title="类类型接口"></a>类类型接口</h1><p>对类进行约束，用<code>implements</code>来获取接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当class的接口为Person时，</span></span><br><span class="line"><span class="comment"> * name的属性值为string，</span></span><br><span class="line"><span class="comment"> * age方法的可以不传入参数，有参数的话参数num为number，返回值为number</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">interface Person &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age(num: number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="title">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(arg_name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = arg_name;</span><br><span class="line">  &#125;</span><br><span class="line">  age(num: number) &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> man = <span class="keyword">new</span> Man(<span class="string">"www"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(man.age(<span class="number">18</span>))  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure>


<h1 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h1><p>接口是可以用<code>extends</code>继承的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Things接口</span></span><br><span class="line">interface Things &#123;</span><br><span class="line">  run(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承接口Things，要求class要有run和eat方法</span></span><br><span class="line">interface Doing extends Things &#123;</span><br><span class="line">  eat(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Person获取接口Doing</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Doing</span> </span>&#123;</span><br><span class="line">  name: string;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is running"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is eating"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">"www"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.run()); <span class="comment">// www is running</span></span><br><span class="line"><span class="built_in">console</span>.log(person.eat()); <span class="comment">// www is eating</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>antd中setFieldsValue导致提示消失</title>
    <url>/antd%E4%B8%ADsetFieldsValue%E5%AF%BC%E8%87%B4%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h1><p>当表单输入时，限制用户最大输入的长度时，会导致提示错误消息消失<br>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 校验金额</span></span><br><span class="line"> <span class="keyword">const</span> validateMoney = <span class="function">(<span class="params">rule: RuleObject, value: StoreValue</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (value.length &gt; <span class="number">20</span>) &#123;</span><br><span class="line">        form.setFieldsValue(&#123; <span class="attr">cashOutAmount</span>: value.slice(<span class="number">0</span>, <span class="number">21</span>) &#125;);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'不能超过20位'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Form form=&#123;form&#125;&gt;</span><br><span class="line">    &lt;Form.Item</span><br><span class="line">        name=<span class="string">"cashOutAmount"</span></span><br><span class="line">        label=<span class="string">"提现金额"</span></span><br><span class="line">        rules=&#123;[&#123; <span class="attr">validator</span>: validateMoney &#125;]&#125;</span><br><span class="line">        validateTrigger=<span class="string">"onChange"</span></span><br><span class="line">    &gt;</span><br><span class="line">        &lt;Input/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Form&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行如下<br>当输入超过20位时，虽然已经校验失败了，但是提示消息不见了。<br><img src="/antd%E4%B8%ADsetFieldsValue%E5%AF%BC%E8%87%B4%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1/1.png" alt="1.png"></p>
<h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h1><p>可能<code>setFieldsValue</code>是异步的原因导致消息不提示</p>
<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>使用<code>setFields</code>方法<br>例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 校验金额</span></span><br><span class="line"> <span class="keyword">const</span> validateMoney = <span class="function">(<span class="params">rule: RuleObject, value: StoreValue</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (value.length &gt; <span class="number">20</span>) &#123;</span><br><span class="line">         form.setFields([</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">'cashOutAmount'</span>,</span><br><span class="line">                    value: value.slice(<span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            ]);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'不能超过20位'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Form form=&#123;form&#125;&gt;</span><br><span class="line">    &lt;Form.Item</span><br><span class="line">        name=<span class="string">"cashOutAmount"</span></span><br><span class="line">        label=<span class="string">"提现金额"</span></span><br><span class="line">        rules=&#123;[&#123; <span class="attr">validator</span>: validateMoney &#125;]&#125;</span><br><span class="line">        validateTrigger=<span class="string">"onChange"</span></span><br><span class="line">    &gt;</span><br><span class="line">        &lt;Input/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Form&gt;</span><br></pre></td></tr></table></figure>
<p>运行后<br><img src="/antd%E4%B8%ADsetFieldsValue%E5%AF%BC%E8%87%B4%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1/2.png" alt="2.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>css3中hover的使用及细节</title>
    <url>/css3%E4%B8%ADhover%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h2 id="首先第一条很重要"><a href="#首先第一条很重要" class="headerlink" title="首先第一条很重要"></a>首先第一条很重要</h2><p> 元素添加hover伪类选择器时候一定要<font color="#f40">紧贴这hover</font>，不能有<font color="#f40">空格</font>，有空格的话表示给该元素的所有子元素设置里hover样式。</p>
<a id="more"></a>

<p>错误例子：</p>
<figure class="highlight"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">ul :hover&#123;&#125; //ul的所有子元素设置了hover样式</span><br></pre></td></tr></table></figure>
<p>正确例子：</p>
<figure class="highlight"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">ul:hover&#123;&#125; // ul会显示出想要的效果</span><br></pre></td></tr></table></figure>
<h2 id="第二"><a href="#第二" class="headerlink" title="第二"></a>第二</h2><p>当想要在父元素添加hover在指定的子元素的实现效果<br><font color="#f40">子元素应该写在hover后面空格隔开</font></p>
<figure class="highlight"><figcaption><span>html</span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">li</span>&#123;</span><br><span class="line">               <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">               <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">               <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">               <span class="attribute">transition</span>:transfrom <span class="number">2s</span> linear;</span><br><span class="line">          &#125;</span><br><span class="line">          ul:hover .one&#123;            // 子元素写在hover后面空格隔开</span><br><span class="line">               <span class="selector-tag">transform</span><span class="selector-pseudo">:rotateY(90deg)</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.two</span>&#123;</span><br><span class="line">               <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.thr</span>&#123;</span><br><span class="line">               <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(<span class="number">360deg</span>);</span><br><span class="line">          &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div style="width: 300px;height : 300px; background-color:#ccc"&gt;&lt;/div&gt;</span><br><span class="line">     &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">          &lt;li class="one"&gt;di1ge&lt;/li&gt;</span><br><span class="line">          &lt;li class="two"&gt;di2ge&lt;/li&gt;</span><br><span class="line">          &lt;li class="thr"&gt;di3ge&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>这个例子中就是当鼠标经过ul的时候，li会在设置的角度旋转</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>仅可以给<font color="#f40">自身的子元素</font>设置样式，给其他元素子元素设置无效<br>接着上个例子举例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div:hover .one&#123;&#125;  &#x2F;&#x2F;不显示任何效果，hover失效</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>css3中flex如何实现子元素等分</title>
    <url>/css3%E4%B8%ADflex%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AD%90%E5%85%83%E7%B4%A0%E7%AD%89%E5%88%86/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、属性"><a href="#一、属性" class="headerlink" title="一、属性"></a>一、属性</h1><p><font color="#f40">justify-content: space-between;</font><br>这个属性能够让子元素之间的间隔实现平均分配剩余空间,并没有让元素等分。</p>
<h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// html部分</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">// css 部分</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ul</span> <span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">35</span>, <span class="number">238</span>, <span class="number">238</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ul</span> <span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">80</span>, <span class="number">252</span>, <span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">ul</span> <span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">242</span>, <span class="number">245</span>, <span class="number">72</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>实现的效果</p>
<a id="more"></a>
<p><img src="/css3%E4%B8%ADflex%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AD%90%E5%85%83%E7%B4%A0%E7%AD%89%E5%88%86/1.png" alt="1.png"></p>
<h1 id="三、实现子元素等分"><a href="#三、实现子元素等分" class="headerlink" title="三、实现子元素等分"></a>三、实现子元素等分</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><font color="#f40">将子元素的width设为100%</font></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>和上面的例子代码是基本一样的，唯一不一样的就是li的width为100%</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果：<br><img src="/css3%E4%B8%ADflex%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AD%90%E5%85%83%E7%B4%A0%E7%AD%89%E5%88%86/2.png" alt="2.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css3</tag>
      </tags>
  </entry>
  <entry>
    <title>css中实现单行居中，多行居左</title>
    <url>/css%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%A4%9A%E8%A1%8C%E5%B1%85%E5%B7%A6/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>正常情况下对齐方式只能是按照一个方向排列，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是单行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是多行居中显示我是多行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<a id="more"></a>
<p><img src="/css%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%A4%9A%E8%A1%8C%E5%B1%85%E5%B7%A6/1.png" alt="1.png"></p>
<p>想要实现单行居中，多行居左。步骤如下：</p>
<ol>
<li>把子元素转化为<code>行内块级元素</code>，因为行内块级元素会<code>受到父元素的text-align属性的影响</code>，而且行内块级元素不设置width的情况下，它的width是由它的内容所决定的。</li>
<li>子元素将文本向左对齐</li>
</ol>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">        text-align: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是单行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是多行居中显示我是多行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/css%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%A4%9A%E8%A1%8C%E5%B1%85%E5%B7%A6/2.png" alt="2.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css取消事件的属性</title>
    <url>/css%E5%8F%96%E6%B6%88%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">pointer-events</span><span class="selector-pseudo">:none</span>;</span><br></pre></td></tr></table></figure>
<p>当pointer-events属性值为<code>none</code>时，<code>元素永远不会成为鼠标事件的target</code>。但是，当其后代元素的pointer-events属性指定其他值时，鼠标事件可以指向后代元素，在这种情况下，鼠标事件将在捕获或冒泡阶段触发父元素的事件侦听器。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;www.baidu.com&quot;&gt;链接&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; css</span><br><span class="line">a&#123;</span><br><span class="line">    pointer-events:none</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>点击a标签将不会跳转地址</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>当pointer-evnets:none时，<code>css属性cursor（鼠标样式）也会失效</code>。</li>
<li>pointer-events的属性值中除了<code>none</code>和<code>auto</code>，其他的都只适用于svg</li>
</ul>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><table>
<thead>
<tr>
<th>浏览器</th>
<th>最低兼容的版本</th>
</tr>
</thead>
<tbody><tr>
<td>IE</td>
<td>11</td>
</tr>
<tr>
<td>Chrome</td>
<td>4</td>
</tr>
<tr>
<td>Edge</td>
<td>12</td>
</tr>
<tr>
<td>Firefox</td>
<td>3.6</td>
</tr>
<tr>
<td>Opera</td>
<td>15</td>
</tr>
<tr>
<td>Safari</td>
<td>4</td>
</tr>
<tr>
<td>移动端浏览器</td>
<td>都兼容</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css让元素的高度随着宽度变化而变化的正方形</title>
    <url>/css%E8%AE%A9%E5%85%83%E7%B4%A0%E7%9A%84%E9%AB%98%E5%BA%A6%E9%9A%8F%E7%9D%80%E5%AE%BD%E5%BA%A6%E5%8F%98%E5%8C%96%E8%80%8C%E5%8F%98%E5%8C%96%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    width：100%;     /*必须是100%*/ </span><br><span class="line">    <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">    <span class="selector-tag">padding-top</span><span class="selector-pseudo">:100</span>%  <span class="comment">/*padding-bottom:100% 也行*/</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样会使元素的高度等于宽度，形成一个正方形。 </p>
<a id="more"></a>

<p>注意：  </p>
<ul>
<li>width必须为100%，不能为具体值;   </li>
<li>父元素的宽度必须有具体指,如：width:100px</li>
</ul>
<p>例子：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">   <span class="selector-id">#wrapper</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100px</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-id">#wrapper</span> <span class="selector-id">#app</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">padding-top</span>: <span class="number">100%</span>;</span><br><span class="line">     <span class="attribute">background</span>: red;</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* html代码 */</span></span><br><span class="line">   &lt;div id="wrapper"&gt;</span><br><span class="line">   &lt;div id="app"&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>运行效果:<br><img src="/css%E8%AE%A9%E5%85%83%E7%B4%A0%E7%9A%84%E9%AB%98%E5%BA%A6%E9%9A%8F%E7%9D%80%E5%AE%BD%E5%BA%A6%E5%8F%98%E5%8C%96%E8%80%8C%E5%8F%98%E5%8C%96%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2/6.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>div加入onblur事件</title>
    <url>/div%E5%8A%A0%E5%85%A5onblur%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>一般情况下，div是<code>没有onblur事件</code>的，但是给div加上<code>tabindex</code>属性后，就可以<code>使用onblur事件</code>了。  </p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>定义tabindex属性后，元素是默认会在聚焦的时候加上<code>outline</code>的样式，也就是onfocus时候，样式为div:focus{…}，那么在IE中可以通过<code>hidefocus=&quot;true&quot;</code>去除。其他浏览器通过outline=0进行去除，可以通过样式去修改，比如<code>div:focus{outline:none}</code>。</p>
<a id="more"></a>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">tabindex</span>=<span class="string">'1'</span> <span class="attr">onfocus</span>=<span class="string">'alert("得到焦点");'</span> <span class="attr">onblur</span>=<span class="string">'alert("失去焦点");'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="tabindex属性"><a href="#tabindex属性" class="headerlink" title="tabindex属性"></a>tabindex属性</h1><p>tabindex 全局属性 指示其元素是否可以聚焦，以及它是否/在何处参与顺序键盘导航（通常使用<code>Tab</code>键，因此得名）。<br>它接受一个整数作为值，具有不同的结果，具体取决于整数的值：  </p>
<ul>
<li><code>tabindex=负值</code> (通常是tabindex=“-1”)，表示元素是<code>可聚焦</code>的，但是<code>不能通过</code>键盘导航来访问到该元素，用JS做页面小组件内部键盘导航的时候非常有用。</li>
<li><code>tabindex=&quot;0&quot;</code> ，表示元素是<code>可聚</code>焦的，并且<code>可以通过</code>键盘导航来聚焦到该元素，它的相对顺序是当前处于的<code>DOM结构</code>来决定的。</li>
<li><code>tabindex=正值</code>，表示元素是<code>可聚焦</code>的，并且<code>可以通过</code>键盘导航来访问到该元素；它的相对顺序按照<code>tabindex 的数值递增而滞后获焦</code>。如果多个元素拥有相同的 tabindex，它们的相对顺序按照他们在当前DOM中的先后顺序决定。</li>
</ul>
<p>根据键盘序列导航的顺序，值为 0 、非法值、或者没有 tabindex 值的元素应该放置在 tabindex 值为正值的元素后面。  </p>
<p>如果我们在 <code>&lt;div&gt;</code> 上设置了 tabindex 属性，它的子元素内容<code>不能使用箭头键来滚动</code>，除非我们在内容上<code>也设置 tabindex</code>。</p>
<blockquote>
<p>注：tabindex 的最大值不应超过 32767。如果没有指定，它的默认值为 0。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>emotion中React的typeScript使用说明</title>
    <url>/emotion%E4%B8%ADReact%E7%9A%84typeScript%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>React的TypeScript中使用手册:</p>
<h1 id="emotion-react"><a href="#emotion-react" class="headerlink" title="@emotion/react"></a>@emotion/react</h1><p>举一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* @jsxImportSource @emotion&#x2F;react *&#x2F;</span><br><span class="line">import &#123; css &#125; from &#39;@emotion&#x2F;react&#39;</span><br><span class="line"></span><br><span class="line"> &lt;div</span><br><span class="line">    css&#x3D;&#123;css&#96;</span><br><span class="line">        color: red</span><br><span class="line">    &#96;&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>这个例子的css样式没有生效的，反而会报错，报错信息如：<code>Property &#39;css&#39; does not exist on type &#39;DetailedHTMLProps&lt;HTMLAttributes&lt;HTMLDivElement&gt;, HTMLDivElement&gt;&#39;</code></p>
<a id="more"></a>
<h3 id="解决方案如下："><a href="#解决方案如下：" class="headerlink" title="解决方案如下："></a>解决方案如下：</h3><ul>
<li>第一种：在文件的头部添加 <code>/* @jsxImportSource @emotion/react */</code>，让组件识别出emotion样式。<br>例子如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* @jsxImportSource @emotion&#x2F;react *&#x2F;</span><br><span class="line">import &#123; css &#125; from &#39;@emotion&#x2F;react&#39;</span><br><span class="line"></span><br><span class="line"> &lt;div</span><br><span class="line">    css&#x3D;&#123;css&#96;</span><br><span class="line">        color: red</span><br><span class="line">    &#96;&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>
<li>第二种：用babel插件<code>@emotion/babel-plugin</code>(ps: 因为该项目使用的是nextjs，所以使用的babel插件也和其他的react框架会有所差异，官方推荐原生的react使用的是<a href="https://emotion.sh/docs/@emotion/babel-preset-css-prop" target="_blank" rel="noopener">@emotion/babel-preset-css-prop</a>)<br>在nextjs中的babel文件配置如下:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"next/babel"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"preset-react"</span>: &#123;</span><br><span class="line">            <span class="attr">"runtime"</span>: <span class="string">"automatic"</span>,</span><br><span class="line">            <span class="attr">"importSource"</span>: <span class="string">"@emotion/react"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"@emotion/babel-plugin"</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>配置完babel插件后在使用emotion的css样式会出现效果，但是css仍然会报错，这就需要在<code>tsconfig.json</code>文件中添加 <code>&quot;jsxImportSource&quot;: &quot;@emotion/react&quot;</code>，然后重启项目就行了。<br>例子如下(前提是babel和tsconfig.js配置完成后)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">'@emotion/react'</span></span><br><span class="line"></span><br><span class="line"> &lt;div</span><br><span class="line">    css=&#123;css`</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">red</span></span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示： css={css``}中css反引号中样式的写法和普通的css写法是一样的。如：  </p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;div</span><br><span class="line">    css=&#123;css`</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-top</span>: 10<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000000</span>;</span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="emotion-styled的使用方法"><a href="#emotion-styled的使用方法" class="headerlink" title="@emotion/styled的使用方法"></a>@emotion/styled的使用方法</h1><p>@emotion/styled基本没什么注意的点，直接开干，举个例子：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"@emotion/styled"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Wrap = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    border: 1px solid #000;</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Wrap&gt;</span><br><span class="line">      emotion</span><br><span class="line">    &lt;<span class="regexp">/Wrap&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>通过styled的形式定义css样式来生成组件，写法还有一种:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 括号的形式</span></span><br><span class="line"><span class="keyword">const</span> Wrap = styled(<span class="string">'div'</span>)<span class="string">`   </span></span><br><span class="line"><span class="string">  border: 1px solid #000;</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;Wrap&gt;</span><br><span class="line">    emotion</span><br><span class="line">  &lt;<span class="regexp">/Wrap&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>
<p>使用参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Wrap = styled.div&lt;&#123; <span class="attr">diyBgColor</span>:string &#125;&gt;<span class="string">` </span></span><br><span class="line"><span class="string">  border: 1px solid #000;</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props=&gt;props.diyBgColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;Wrap diyBgColor=<span class="string">'#f40'</span>&gt;</span><br><span class="line">    emotion</span><br><span class="line">  &lt;<span class="regexp">/Wrap&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>

<p>以上是emotion在react typescript中的基本使用方式，本人暂时没有时间去整理react的js中使用说明。</p>
<blockquote>
<p><a href="https://emotion.sh/docs/typescript" target="_blank" rel="noopener">Emotion的React的TypeScript官方文档</a><br><a href="https://emotion.sh/docs/introduction" target="_blank" rel="noopener">Emotion所有官方文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>express中req.session显示undefined的解决方案</title>
    <url>/express%E4%B8%ADreq-session%E6%98%BE%E7%A4%BAundefined%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="先看一下源码"><a href="#先看一下源码" class="headerlink" title="先看一下源码"></a>先看一下源码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">  <span class="keyword">const</span> router = express.Router();</span><br><span class="line">  app.use(<span class="string">"/api"</span>, router);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建session</span></span><br><span class="line">  <span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line">  app.use(session(&#123;</span><br><span class="line">      secret: <span class="string">'dfafadfadfa'</span>, <span class="comment">//秘钥</span></span><br><span class="line">      resave: <span class="literal">true</span>,          <span class="comment">//即使 session 没有被修改，也保存 session 值，默认为 true。</span></span><br><span class="line">      saveUninitialized: <span class="literal">true</span>,<span class="comment">//无论有没有session cookie，每次请求都设置个session cookie ，默认给个标示为 connect.sid</span></span><br><span class="line">      cookie: (<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">secure</span>: <span class="literal">false</span> &#125;)<span class="comment">//当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。</span></span><br><span class="line">  &#125;))</span><br><span class="line">  </span><br><span class="line">  router.use(<span class="string">"/aaa"</span>,(req,res)=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(req.session)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p>结果当访问到api/aaa地址时，node打印出来的是undefined</p>
<a id="more"></a>
<h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>是因为路由写在了session上面导致的。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>把session写在路由上面即可<br>正确代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建session</span></span><br><span class="line">    <span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line">    app.use(session(&#123;</span><br><span class="line">        secret: <span class="string">'dfafadfadfa'</span>, <span class="comment">//秘钥</span></span><br><span class="line">        resave: <span class="literal">true</span>,          <span class="comment">//即使 session 没有被修改，也保存 session 值，默认为 true。</span></span><br><span class="line">        saveUninitialized: <span class="literal">true</span>,<span class="comment">//无论有没有session cookie，每次请求都设置个session cookie ，默认给个标示为 connect.sid</span></span><br><span class="line">        cookie: (<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">secure</span>: <span class="literal">false</span> &#125;)<span class="comment">//当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。</span></span><br><span class="line">    &#125;))</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 创建路由</span></span><br><span class="line">    <span class="keyword">const</span> router = express.Router();</span><br><span class="line">    app.use(<span class="string">"/api"</span>, router);</span><br><span class="line">    </span><br><span class="line">        router.use(<span class="string">"/aaa"</span>,(req,res)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(req.session)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title>fs.writeFile写入object对象数据解决方案</title>
    <url>/fs-writeFile%E5%86%99%E5%85%A5object%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>如果是要写入<code>object</code>数据的话，会出现<code>[object,object]</code>的情况<br>例如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.writeFile(<span class="string">"./data.json"</span>, &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;, </span><br><span class="line"> err =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>
<p>运行之后的<code>data.json</code>文件的内容为 <code>[object,object]</code></p>
<a id="more"></a>
<p><img src="/fs-writeFile%E5%86%99%E5%85%A5object%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1.png" alt="1.png"></p>
<h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h1><p>因为<code>writeFile</code>是最终是通过<code>将内容转换成字节码</code>进行写入的，而类型为<code>Object内容没办法转换成字节码</code>，会被<code>先转换成字符类型</code>。最终出现上述类型。</p>
<h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><p>用<code>JSON.stringify</code> 可以解决<br>例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.writeFile(<span class="string">"./data.json"</span>, <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;), </span><br><span class="line"> err =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>
<p>运行之后的<code>data.json</code>文件的内容为 <code>[object,object]</code><br><img src="/fs-writeFile%E5%86%99%E5%85%A5object%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2.png" alt="2.png"></p>
<p>这里可以优化一下的，因为data.json文件中的数据并没有缩进和换行，一旦数据量大的话，会照成数据结构看起来不清晰，所以在<code>JSON.stringify中添加可选参数</code>，<code>进行缩进换行。</code><br>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.writeFile(<span class="string">"./data.json"</span>, <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;, <span class="literal">null</span>, <span class="string">'\t'</span>), </span><br><span class="line">err =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>
<p>运行之后的<code>data.json</code>文件的内容为 <code>[object,object]</code><br><img src="/fs-writeFile%E5%86%99%E5%85%A5object%E5%AF%B9%E8%B1%A1%E6%95%B0%E6%8D%AE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3.png" alt="3.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>git忽略文件或文件夹.gitignore</title>
    <url>/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9-gitignore/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="gitignore文件配置"><a href="#gitignore文件配置" class="headerlink" title=".gitignore文件配置"></a>.gitignore文件配置</h1><p>如果没有.gitignore文件创建一个，有的话可以直接修改。可以使用<code>ls -a</code>查看所有的隐藏的文件。</p>
<h1 id="gitignore规则"><a href="#gitignore规则" class="headerlink" title=".gitignore规则"></a>.gitignore规则</h1><p>简单举几个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server&#x2F;node_modules    过滤server文件夹中的node_modules文件夹</span><br><span class="line">server&#x2F;myDoc.docx      过滤server文件夹中的myDoc.docx文件</span><br><span class="line">*.zip                  过滤以.zip后缀的文件</span><br><span class="line">!root&#x2F;                 不过滤root文件</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="gitignore立即生效"><a href="#gitignore立即生效" class="headerlink" title=".gitignore立即生效"></a>.gitignore立即生效</h1><p>如果当前.gitignore规则中忽略的文件在之前的版本已经被提交过了，那么这些文件在之后的提交也不会被忽略。<br>解决方法是先把本地的缓存删除完毕，让其变成未追踪状态，然后提交。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm -r --cached . &#x2F;&#x2F; 删除本地缓存</span><br><span class="line">git add . &#x2F;&#x2F; 添加要提交的文件</span><br><span class="line">git commit -m &#39;update&#39; &#x2F;&#x2F; 更新本地的缓存</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git的基本操作</title>
    <url>/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>在进行git 操作之前，先进行一个配置，这个配置告诉git  用户和邮箱<br>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;wxb&quot; </span><br><span class="line">git config --global user.email &quot;******@163.com&quot;</span><br></pre></td></tr></table></figure>
<p>参考下面的流程图：</p>
<a id="more"></a>
<p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1.png" alt="1.png"></p>
<p><code>git init</code> : 初始化仓库<br><code>git status</code> :  查看git工作区（仓库）的一个状态<br><code>git add</code> ：添加文件到暂存区<br><code>git add</code> . :    添加所有未到暂存区的文件<br><code>git commit -m &quot;备注：1.0&quot;</code>   : 将暂存区的文件进入提交区，文件被git真正意义的管理起来<br><code>git log</code>:查看日志信息</p>
<p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/2.png" alt="2.png"></p>
<p>commit 后面的hash（哈希）值是每次git commit 生成的<code>commit  id</code>值<br><code>git reset --hard (commitid)</code> : 切换到指定的id值版本(这个id可以根据git log查看日志信息去找到) </p>
<p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3.png" alt="3.png"></p>
<p><code>git log --pretty=oneline</code> : 让git log 日志只显示 commit id 和 备注</p>
<p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/4.png" alt="4.png"></p>
<p><code>git reset --hard HEAD^</code>    回退到上个版本<br><code>git reset --hard HEAD^^</code>  回退到上上个版本</p>
<p>注意：进行版本回退之后，发现commit最新的没了，可以使用<code>git reflog</code>进行所有的commitid 的查询</p>
<p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/5.png" alt="5.png"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery中的ajax、fetch和axios的区别</title>
    <url>/jquery%E4%B8%AD%E7%9A%84ajax%E3%80%81fetch%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="jquery-ajax"><a href="#jquery-ajax" class="headerlink" title="jquery ajax"></a>jquery ajax</h1><p>对原生XHR的封装。</p>
<p>优点</p>
<ul>
<li>无页面刷新</li>
<li>异步</li>
<li>支持JSONP</li>
<li>为以后的优秀的http请求库打下来基础<a id="more"></a>
缺点</li>
<li>本身是针对MVC的,不符合现在前端MVVM的模式</li>
<li>会造成回调地狱</li>
</ul>
<h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><p>Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如  <code>Service Workers</code>。是基于Promise设计的，可以搭配上async/await使用。<br>关于service worker的一篇文章的介绍 <a href="https://www.jianshu.com/p/1bc5bf8be43d" target="_blank" rel="noopener">Service Workers简介</a>。</p>
<p>兼容性如下</p>
<p><img src="/jquery%E4%B8%AD%E7%9A%84ajax%E3%80%81fetch%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/1.png" alt="fetch兼容性"></p>
<p>优点：</p>
<ul>
<li>符合MVVM模式，脱离了XHR，是ES规范里新的实现方式</li>
<li>基于标准的Promise实现，支持async/await</li>
<li>更加底层，提供的API丰富（request, response）</li>
<li>可以取消发送请求</li>
</ul>
<p>缺点：</p>
<ul>
<li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li>
<li>不支持JSONP</li>
<li>fetch只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</li>
<li>fetch默认不会带cookie，需要添加配置项</li>
<li>fetch没有办法原生监测请求的进度，而XHR可以</li>
</ul>
<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>Axios本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范。</p>
<p>优点：</p>
<ul>
<li>浏览器和node.js都能用</li>
<li>支持 Promise API</li>
<li>客户端支持防止CSRF</li>
<li>提供了拦截器</li>
<li>可以取消发送请求</li>
<li>提供了一些并发请求的接口（重要，方便了很多的操作）</li>
</ul>
<p>缺点：</p>
<ul>
<li>采用的是XHR方式，所以输入、输出和用事件来跟踪的状态混杂在一个对象里</li>
</ul>
<p><strong>客户端支持防止CSRF的实现方式：</strong><br>每个请求都带一个从<code>cookie</code>中拿到的<code>key</code>, 根据浏览器<code>同源策略</code>，假冒的网站是<code>拿不到你cookie中的key</code>，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略。</p>
<h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><h3 id="一、-拦截器流程图"><a href="#一、-拦截器流程图" class="headerlink" title="一、 拦截器流程图"></a>一、 拦截器流程图</h3><p><img src="/jquery%E4%B8%AD%E7%9A%84ajax%E3%80%81fetch%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/2.png" alt="拦截器流程图"></p>
<h3 id="二、拦截器的应用场景"><a href="#二、拦截器的应用场景" class="headerlink" title="二、拦截器的应用场景"></a>二、拦截器的应用场景</h3><p>对请求和其响应进行特定的处理的时候。</p>
<ol>
<li>每个请求都附带后端返回的<code>token</code>，可以使用 <code>axios request 拦截器</code>，在这里，我们给每个请求都加 token,这样就可以节省每个请求再一次次的复制粘贴代码。</li>
<li>当token失效或者后端返回错误信息，都可以用 <code>axios response 拦截器</code>，我们统一处理所有请求成功之后响应过来的数据，然后对特殊数据进行处理，其他的正常分发。</li>
</ol>
<h3 id="三、拦截器的使用"><a href="#三、拦截器的使用" class="headerlink" title="三、拦截器的使用"></a>三、拦截器的使用</h3><p>主要用的方法：</p>
<ol>
<li><p>实例化axios<br>axios.create([config])<br>简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,    <span class="comment">// 发送请求的前置的url</span></span><br><span class="line">  timeout: <span class="number">10000</span>,                              <span class="comment">// 请求超时的时间</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;      <span class="comment">// 请求的headers</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>请求拦截器<br>axios.interceptors.request.use(function (config) {},function (error) {})<br>例子： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>响应拦截器<br>axios.interceptors.response.use(function (config) {},function (error) {})<br>例子：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除拦截器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意：<br>请求拦截器和响应拦截器的两个回调函数参数，需要<code>有返回值</code>才能<code>继续</code>。  </p>
<ul>
<li>请求拦截器要返回回调函数的参数才行，否则请求将会被拦截，无法发送到后端，例子如下：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> $axios = axios.create(&#123;</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求没法发送出去的情况</span></span><br><span class="line">$axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">name</span>: <span class="string">'wxb'</span> &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);   <span class="comment">// undefined， 请求也没有发送出去</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求发送出去的情况</span></span><br><span class="line">$axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">name</span>: <span class="string">'wxb'</span> &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);   <span class="comment">// &#123;config:&#123;xxx&#125;,data:&#123;xxx&#125;,headers:&#123;xxx&#125;,request:&#123;xxx&#125;,status:xxx,statusText:'xx'&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>响应拦截器返回什么数据，then就接收到什么数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> $axios = axios.create(&#123;</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子1</span></span><br><span class="line">$axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">params</span>:&#123;<span class="attr">name</span>: <span class="string">'wxb'</span>&#125; &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子2</span></span><br><span class="line">$axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">params</span>:&#123;<span class="attr">name</span>: <span class="string">'wxb'</span>&#125; &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">// &#123;config:&#123;xxx&#125;,data:&#123;xxx&#125;,headers:&#123;xxx&#125;,request:&#123;xxx&#125;,status:xxx,statusText:'xx'&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章<br><a href="http://axios-js.com/zh-cn/docs/index.html" target="_blank" rel="noopener">axios中文文档</a><br><a href="http://www.lucklnk.com/godaddy/details/aid/195114672" target="_blank" rel="noopener">axios拦截器实际应用场景</a><br><a href="https://segmentfault.com/a/1190000008484070" target="_blank" rel="noopener">fetch使用的常见问题及其解决办法</a><br><a href="https://juejin.cn/post/6844903599143649294" target="_blank" rel="noopener">Jquery ajax, Axios, Fetch区别之我见</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Javescript</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>js中用x，y坐标来实现模拟点击功能</title>
    <url>/js%E4%B8%AD%E7%94%A8x%EF%BC%8Cy%E5%9D%90%E6%A0%87%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、应用场景"><a href="#一、应用场景" class="headerlink" title="一、应用场景"></a>一、应用场景</h1><p>目前我想到的应用场景就只有一个，就是用手机上用脚本自动点击指定位置的元素。<br>手机有个名为Auto.js的软件，这款软件可以写脚本的，脚本是可以在其他软件上运行的（真心给力的脚本软件，比如可以写一个蚂蚁森林收集能量的脚本、抢限时优惠卷的脚本等等），只不过要用auto.js的语法。<br>我当时用auto.js写手机上的一些脚本的时候就经常用一个click(x,y)的方法可以实现指定坐标元素点击的功能。<br>对Auto.js这款软件就不多介绍了，想多了解的话自行百度。</p>
<h1 id="二、什么是Document-elementFromPoint"><a href="#二、什么是Document-elementFromPoint" class="headerlink" title="二、什么是Document.elementFromPoint()"></a>二、什么是Document.elementFromPoint()</h1><a id="more"></a>
<h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><ul>
<li>返回的是DOM元素.</li>
<li>x 和 y 是坐标数值, 不需要单位比如px.<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.elementFromPoint(x, y);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h2><p>简单来说就是以<font color="#f40">浏览器窗口的左上角为原点</font>计算，获取对应的<font color="#f40">x坐标点</font>和<font color="#f40">y坐标点</font>的<font color="#f40">元素</font>。x,y指的是<font color="#f40">clientX</font>,<font color="#f40">clientY</font>。</p>
<h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p id=<span class="string">"para1"</span>&gt;Some text here&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button&gt;blue&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;red&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> el = <span class="built_in">document</span>.elementFromPoint(<span class="number">69</span>, <span class="number">61</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(el);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：<br>因为坐标(69, 61)对应就是名为red的button，所以就会获取到该元素。<br><img src="/js%E4%B8%AD%E7%94%A8x%EF%BC%8Cy%E5%9D%90%E6%A0%87%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E5%8A%9F%E8%83%BD/1.png" alt="1.png"></p>
<h1 id="三、什么是MouseEvent"><a href="#三、什么是MouseEvent" class="headerlink" title="三、什么是MouseEvent()"></a>三、什么是MouseEvent()</h1><h2 id="MouseEvent-的语法："><a href="#MouseEvent-的语法：" class="headerlink" title="MouseEvent()的语法："></a>MouseEvent()的语法：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> event = <span class="keyword">new</span> MouseEvent(typeArg, mouseEventInit);</span><br></pre></td></tr></table></figure>
<p>typeArg：事件名称<br>mouseEventInit （可选）<br>初始化 MouseEvent 的字典，有下列属性字段：</p>
<ul>
<li>“<font color="#f40">bubbles</font>“，Boolean 型可选，默认为true</li>
<li>“<font color="#f40">cancelable</font>“，Boolean 型可选，默认为true</li>
<li>“<font color="#f40">view</font>“，默认为window（我也不知道其他值是什么，目前就知道好像只能是window）</li>
<li>“<font color="#f40">screenX</font>“，long 型可选，默认为 0，设置鼠标事件发生时相对于用户屏幕的水平坐标位置；该操作并不会改变真实鼠标的位置。</li>
<li>“<font color="#f40">screenY</font>“，long 型可选，默认为 0，设置鼠标事件发生时相对于用户屏幕的垂直坐标位置；该操作并不会改变真实鼠标的位置。</li>
<li>“<font color="#f40">clientX</font>“，long 型可选，默认为 0，设置鼠标事件时相对于客户端窗口的水平坐标位置；该操作并不会改变真实鼠标的位置。</li>
<li>“<font color="#f40">clientY</font>“，long 型可选，默认为 0，设置鼠标事件时相对于客户端窗口的垂直坐标位置；该操作并不会改变真实鼠标的位置。</li>
<li>“<font color="#f40">ctrlKey</font>“，Boolean 型可选，默认为false，标明是否同时按下 ctrl 键。</li>
<li>“<font color="#f40">shiftKey</font>“，Boolean 型可选，默认为false，标明是否同时按下 shift 键。</li>
<li>“<font color="#f40">altKey</font>“，Boolean 型可选，默认为 false，标明是否同时按下 alt 键。</li>
<li>“<font color="#f40">metaKey</font>“，Boolean 型可选，默认为false，标明是否同时按下 meta 键。</li>
<li>“<font color="#f40">button</font>“，short 型可选，默认为 0，描述了当事件发生时，哪个按键被按下或释放：</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>主按键被按下（通常为左键）或未初始化</td>
</tr>
<tr>
<td>1</td>
<td>辅助按键被按下 (通常为中键)</td>
</tr>
<tr>
<td>2</td>
<td>次按键被按下 (通常为右键)</td>
</tr>
</tbody></table>
<ul>
<li>“<font color="#f40">buttons</font>“，无符号 short 型可选，默认为 0，描述了当事件发生时哪些按键被按下：</li>
</ul>
<table>
<thead>
<tr>
<th>位域值（Bit-field value）</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>无按键被按下</td>
</tr>
<tr>
<td>1</td>
<td>主按键被按下 (通常为左键)</td>
</tr>
<tr>
<td>2</td>
<td>次按键被按下 (通常为右键)</td>
</tr>
<tr>
<td>4</td>
<td>辅助按键被按下 (通常为中键)</td>
</tr>
</tbody></table>
<ul>
<li>“<font color="#f40">relatedTarget</font>“，EventTarget 型可选，默认为 null，若事件为 mouseenter 或 mouseover，则表示刚离开的元素；若事件为 mouseout 或 mouseleave，则表示刚进入的元素。</li>
<li>“<font color="#f40">region</font>“，DOMString 型可选，默认为null，标明点击事件影响的区域 DOM 的 id。不影响任何区域的话，请传null值。</li>
</ul>
<h2 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h2><p>构造器创建一个 MouseEvent。<br>MouseEvent接口 指<font color="#f40">鼠标事件</font>。使用此接口的<font color="#f40">常见事件</font>包括：<font color="#f40">click</font>，<font color="#f40">dblclick</font>，<font color="#f40">mouseup</font>，<font color="#f40">mousedown</font>。</p>
<h1 id="四、实现模拟点击"><a href="#四、实现模拟点击" class="headerlink" title="四、实现模拟点击"></a>四、实现模拟点击</h1><p>将上述的Document.elementFromPoint()和MouseEvent()结合使用。<br>例子：<br>相当于一开始加载就点击过了对应坐标的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p id=<span class="string">"para1"</span>&gt;Some text here&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button&gt;blue&lt;/</span>button&gt;</span><br><span class="line">    &lt;button&gt;red&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建了一个点击事件</span></span><br><span class="line">  <span class="keyword">let</span> event = <span class="keyword">new</span> MouseEvent(<span class="string">"click"</span>,&#123;</span><br><span class="line">    bubbles: <span class="literal">true</span>,  <span class="comment">// 事件冒泡：true为允许;false为不允许</span></span><br><span class="line">    cancelable: <span class="literal">true</span>, <span class="comment">// 默认事件：true为允许;false为不允许</span></span><br><span class="line">    view: <span class="built_in">window</span>, </span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 获取改坐标的元素</span></span><br><span class="line">  <span class="keyword">let</span> el = <span class="built_in">document</span>.elementFromPoint(x,y);</span><br><span class="line">  <span class="comment">// 设置元素点击事件触发打印innerText的内容</span></span><br><span class="line">  el.onclick=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target.innerText)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 为该元素派发事件</span></span><br><span class="line">  el.dispatchEvent(event);</span><br><span class="line">&#125;</span><br><span class="line">click(<span class="number">69</span>, <span class="number">61</span>);</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/js%E4%B8%AD%E7%94%A8x%EF%BC%8Cy%E5%9D%90%E6%A0%87%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E5%8A%9F%E8%83%BD/2.png" alt="2.png"></p>
<blockquote>
<p>推荐一篇关于<font color="#f40">js原生创建模拟事件和自定义事件的方法</font>博客链接<br><a href="https://www.cnblogs.com/libin-1/p/5944334.html" target="_blank" rel="noopener">https://www.cnblogs.com/libin-1/p/5944334.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的XMLHttpRequest对象</title>
    <url>/js%E4%B8%AD%E7%9A%84XMLHttpRequest%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul>
<li>XMLHttpRequest对象是<code>ajax技术的核心</code>。</li>
<li>JavaScript通过这个对象可以自己发送请求，同时也自己处理响应。</li>
<li>得到了几乎所有现代浏览器的支持。</li>
</ul>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><p>微软最早在<code>IE5</code>中以<code>ActiveX对象</code>的形式实现了一个名叫<code>XMLHTTP</code>的对象。在IE中创建新的对象要使用下列代码：</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.3.0'</span>);</span><br></pre></td></tr></table></figure>
<p>其他浏览器则基于<code>XMLHttpRequest</code>来创建新对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>
<p>更麻烦的是，<code>不同IE版本</code>中使用的<code>XMLHTTP对象也不完全相同</code>。为了兼容所有浏览器，这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHTTPObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &lt;!-- 判断浏览器是否支持XMLHttpRequest --&gt;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRquest === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.6.0'</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.3.0'</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> request = getHTTPObject();</span><br></pre></td></tr></table></figure>
<h1 id="open方法"><a href="#open方法" class="headerlink" title="open方法"></a>open方法</h1><p>XMLHttpRequest对象的HTTP和HTTPS请求必须通过<code>opent方法初始化</code>。这个方法必须在实际发送请求之前调用，以用来验证请求方法，URL以及用户信息。这个方法不能确保URL存在或者用户信息必须正确。初始化请求可以接受5个参数，一般常用前3个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open( Method, URL, Asynchronous, UserName, Password )</span><br></pre></td></tr></table></figure>
<ol>
<li>第一个参数是<code>请求方法</code>，如下</li>
</ol>
<ul>
<li>GET (IE7+,Mozilla 1+)</li>
<li>POST (IE7+,Mozilla 1+)</li>
<li>HEAD (IE7+)</li>
<li>PUT</li>
<li>DELETE</li>
<li>OPTIONS (IE7+)  </li>
</ul>
<p>使用<code>POST</code>请求的方法的话，需要发送合适的<code>请求头信息</code>，例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.setRequestHeader(&quot;Content-type&quot;, &quot;application&#x2F;x-www-form-urlencoded&quot;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二个参数是string类型，<code>标示请求的URL</code>。</li>
<li>第三个参数是boolean类型，<code>用于指定请求是否以异步方式发送和处理</code>。</li>
<li>第四个参数是string类型，指定<code>用户名</code>。</li>
<li>第五个参数是string类型，指定<code>密码</code>。</li>
</ol>
<h1 id="onreadystatechange事件处理函数"><a href="#onreadystatechange事件处理函数" class="headerlink" title="onreadystatechange事件处理函数"></a>onreadystatechange事件处理函数</h1><p>它会在服务器给XMLHttpRequest对象送回响应的时候被触发执行。<br>将自动在XMLHttpRequest对象的<code>readyState属性改变</code>时被触发。</p>
<h1 id="readyState-属性"><a href="#readyState-属性" class="headerlink" title="readyState 属性"></a>readyState 属性</h1><p>服务器在向XMLHttpRequest对象发回响应时，该对象有许多属性可用，浏览器会在不同阶段更新readyState属性的值，它有5个可能的值：</p>
<ul>
<li>0 表示未初始化</li>
<li>1 表示正在加载</li>
<li>2 表示加载完毕</li>
<li>3 表示正在交互</li>
<li>4 表示完成</li>
</ul>
<p>只有<code>readyState</code>属性的值变成了<code>4</code>，就<code>可以访问服务器发送回来的数据</code>了。</p>
<h1 id="status属性"><a href="#status属性" class="headerlink" title="status属性"></a>status属性</h1><p>代表请求的响应状态，如200，404等。</p>
<h1 id="send方法"><a href="#send方法" class="headerlink" title="send方法"></a>send方法</h1><p>向服务器发送请求，默认发送的<code>null</code>。  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.send(null)</span><br></pre></td></tr></table></figure>
<p>send方法也可以<code>发送参数</code>，但<code>仅限post请求</code>才行，<code>get</code>请求发送参数需要在<code>open</code>里面的<code>第二个参数</code>里的请求地址后面添加。下面举个例子：   </p>
<p>get请求发送参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3030/api?foo=bar&amp;lorem=ipsum'</span>, <span class="literal">true</span>);     <span class="comment">// 发送的参数数据 &#123; foo: 'bar', lorem: 'ipsum' &#125;</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(request.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<p>post请求发送参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">request.open(<span class="string">'post'</span>, <span class="string">'http://localhost:3030/api'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//发送合适的请求头信息</span></span><br><span class="line">request.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"></span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request.readyState === <span class="number">4</span> &amp;&amp; request.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(request.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line">request.send(<span class="string">"foo=bar&amp;lorem=ipsum"</span>); <span class="comment">// 发送的参数数据 &#123; foo: 'bar', lorem: 'ipsum' &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>内容部分参考自<a href="https://www.ituring.com.cn/book/42" target="_blank" rel="noopener">《JavaScript DOM 编程艺术》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的get和set方法</title>
    <url>/js%E4%B8%AD%E7%9A%84get%E5%92%8Cset%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="get和set的介绍"><a href="#get和set的介绍" class="headerlink" title="get和set的介绍"></a>get和set的介绍</h1><p>get 和 set方法可以使用在<code>对象</code>或者<code>构造函数</code>中，但不能出现在普通的function里。<br>vue中的计算属性<code>computed</code>默认使用的就是vue已经<code>封装好的get方法</code>。  </p>
<h1 id="get和set的使用方法"><a href="#get和set的使用方法" class="headerlink" title="get和set的使用方法"></a>get和set的使用方法</h1><ol>
<li><p>get和set是方法，因为是方法，所以可以进行判断  </p>
</li>
<li><p>get一般是要<code>返回</code>的；而set是<code>设置</code>，不用返回</p>
</li>
<li><p>get 和 set的方法名可以重名</p>
</li>
<li><p>set方法必须要有<code>形参</code>，<code>否则报错</code></p>
</li>
<li><p>如果调用对象内部的属性约定的命名方式是变量名前加_</p>
</li>
</ol>
<p>对象的例子</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    a:<span class="number">18</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    <span class="keyword">get</span> sum()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span> .b;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> changeBValue(val) &#123;</span><br><span class="line">         <span class="keyword">this</span>.b = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a  <span class="comment">// 18</span></span><br><span class="line">obj.b  <span class="comment">// 2</span></span><br><span class="line">obj.sum <span class="comment">// 20</span></span><br><span class="line">obj.changeBValue = <span class="number">10</span></span><br><span class="line">obj.b  <span class="comment">// 10</span></span><br><span class="line">obj.sum <span class="comment">// 28</span></span><br></pre></td></tr></table></figure>

<p>构造函数的例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> sum()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> sum(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = val;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> P();</span><br><span class="line"><span class="built_in">console</span>.log(p)  <span class="comment">//&#123;a: 1, b: 2&#125;</span></span><br><span class="line">p.sum   <span class="comment">// 3</span></span><br><span class="line">p.sum =  <span class="number">3</span>;  </span><br><span class="line">p.sum   <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(p)  <span class="comment">// &#123;a: 3, b: 2&#125;</span></span><br></pre></td></tr></table></figure>

<p>即get是对象的属性值返回的方法，set是属性值修改的方法</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>判断浏览器类型</title>
    <url>/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h2 id="判断浏览器类型用的方法是"><a href="#判断浏览器类型用的方法是" class="headerlink" title="判断浏览器类型用的方法是"></a>判断浏览器类型用的方法是</h2><p><font color="#f40"> navigator.userAgent </font>  //取得浏览器的userAgent字符串<br>例子  </p>
<a id="more"></a>
<ul>
<li>Chrom浏览器<br><img src="/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B/0.png" alt></li>
<li>Firefox浏览器<br><img src="/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B/1.png" alt></li>
<li>Opera浏览器<br><img src="/js%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B1%BB%E5%9E%8B/2.png" alt></li>
</ul>
<h2 id="重点说一下Opera"><a href="#重点说一下Opera" class="headerlink" title="重点说一下Opera"></a>重点说一下Opera</h2><p>Opera之前用的引擎是自家的研发的 <strong>Presto</strong>  ，2016年以后改用chrome浏览器的<strong>webkit</strong>引擎,所以说做网上教的正常的浏览器判断，会把Opera判断成Chrome，Opera的名字改成了<strong>OPR</strong>,所以判断浏览器类型方法是（只区分浏览器，不考虑版本）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myBrowser</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串</span></span><br><span class="line">    <span class="keyword">var</span> isOpera = userAgent.indexOf(<span class="string">"OPR"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (isOpera) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Opera"</span></span><br><span class="line">    &#125;; <span class="comment">//判断是否Opera浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Firefox"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"FF"</span>;</span><br><span class="line">    &#125; <span class="comment">//判断是否Firefox浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Chrome"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Safari"</span>;</span><br><span class="line">    &#125; <span class="comment">//判断是否Safari浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span> &amp;&amp; !isOpera) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"IE"</span>;</span><br><span class="line">    &#125;; <span class="comment">//判断是否IE浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js对象和数组之间相互转换</title>
    <url>/js%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="有个终极方法解决数组和对象的相互转换问题"><a href="#有个终极方法解决数组和对象的相互转换问题" class="headerlink" title="有个终极方法解决数组和对象的相互转换问题"></a>有个终极方法解决数组和对象的相互转换问题</h1><p>下面的两个例子都是es6语法。</p>
<ol>
<li>数组转换成对象：<br>知识点： 扩展运算符…<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;...arr&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">//&#123;0: 1, 1: 2, 2: 3&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>对象转换成数组<br>知识点： Object.values(obj)<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js图片懒加载的实现原理</title>
    <url>/js%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h1><p>当打开一个有很多图片的页面时，先只加载页面上看到的图片，等滚动到页面下面时，再加载所需的图片。这就是图片懒加载。</p>
<h1 id="二、作用"><a href="#二、作用" class="headerlink" title="二、作用"></a>二、作用</h1><p>减少或延迟请求数，缓解浏览器的压力，增强用户体验。</p>
<h1 id="三、实现方式"><a href="#三、实现方式" class="headerlink" title="三、实现方式"></a>三、实现方式</h1><a id="more"></a>

<p>1､设置图片src属性为同一张图片，同时自定义一个data-src属性来存储图片的真实地址<br></p>
<p>2､ 页面初始化显示的时候或者浏览器发生滚动的时候判断图片是否在视野中<br></p>
<p>3､ 当图片在视野中时，通过js自动改变该区域的图片的src属性为真实地址</p>
<h1 id="四、代码部分"><a href="#四、代码部分" class="headerlink" title="四、代码部分"></a>四、代码部分</h1><p>1、html 部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;smashinghub.com&#x2F;wp-content&#x2F;uploads&#x2F;2014&#x2F;08&#x2F;cool-loading-animated-gif-3.gif&quot; alt&#x3D;&quot;1&quot; data-src&#x3D;&quot;http:&#x2F;&#x2F;cdn.jirengu.com&#x2F;book.jirengu.com&#x2F;img&#x2F;1.jpg&quot;&gt;</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">    &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;smashinghub.com&#x2F;wp-content&#x2F;uploads&#x2F;2014&#x2F;08&#x2F;cool-loading-animated-gif-3.gif&quot; alt&#x3D;&quot;20&quot; data-src&#x3D;&quot;http:&#x2F;&#x2F;cdn.jirengu.com&#x2F;book.jirengu.com&#x2F;img&#x2F;20.jpg&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">      max-width: 800px;</span><br><span class="line">      margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .container:after&#123;</span><br><span class="line">      content: &#39;&#39;;</span><br><span class="line">      display: block;</span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">    .container img &#123;</span><br><span class="line">      float: left;</span><br><span class="line">      width: 50%;</span><br><span class="line">    &#125;</span><br><span class="line">    h1&#123;</span><br><span class="line">      clear: both;</span><br><span class="line">    &#125; </span><br><span class="line">&#x2F;*注：img都是浮动，如果不清除浮动，h1的值高度就相当于container里面最高的，不是实际的数值*&#x2F;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>2、js 部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  start() &#x2F;&#x2F; 一开始没有滚动，也需要触发一次 </span><br><span class="line"></span><br><span class="line">  $(window).on(&#39;scroll&#39;, function()&#123;&#x2F;&#x2F; 滚动时，显示对应图片</span><br><span class="line">    start()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  function start()&#123;</span><br><span class="line">    $(&#39;.container img&#39;).not(&#39;[data-isLoaded]&#39;).each(function()&#123;</span><br><span class="line">      var $node &#x3D; $(this)</span><br><span class="line">      if( isShow($node) )&#123;</span><br><span class="line">        loadImg($node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function isShow($node)&#123; &#x2F;&#x2F; 判断图片是否在视野中</span><br><span class="line">    return $node.offset().top &lt;&#x3D; $(window).height() + $(window).scrollTop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function loadImg($img)&#123; </span><br><span class="line">    $img.attr(&#39;src&#39;, $img.attr(&#39;data-src&#39;))</span><br><span class="line">    $img.attr(&#39;data-isLoaded&#39;, 1) &#x2F;&#x2F; 区别图片是否被加载过，防止重新加载</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js数据的类型以及Number的精讲</title>
    <url>/js%E6%95%B0%E6%8D%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8ANumber%E7%9A%84%E7%B2%BE%E8%AE%B2/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="js中的数据类型"><a href="#js中的数据类型" class="headerlink" title="js中的数据类型"></a>js中的数据类型</h1><ul>
<li>基本数据类型<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Null</li>
<li>Undefined</li>
<li>Symbol</li>
<li>BigInt<a id="more"></a></li>
</ul>
</li>
<li>引用数据类型<ul>
<li>object<ul>
<li>普通对象  {a:1}</li>
<li>数组对象  [1,2]</li>
<li>正则对象  /\w/g</li>
<li>日期对象  new Date()</li>
<li>Math数学函数 Math.random()</li>
<li>…</li>
</ul>
</li>
<li>function</li>
</ul>
</li>
</ul>
<h2 id="为什么说function单独的引用数据类型？"><a href="#为什么说function单独的引用数据类型？" class="headerlink" title="为什么说function单独的引用数据类型？"></a>为什么说function单独的引用数据类型？</h2><p>所有对象都有<strong>proto</strong>属性，是用来通过<strong>proto</strong>找到它的原型即prototype，<font color="#f40">function声明的变量的<strong>proto</strong>指向Function的prototype，其它对象的<strong>proto</strong>指向Object的prototype</font>。</p>
<h1 id="数据类型检测"><a href="#数据类型检测" class="headerlink" title="数据类型检测"></a>数据类型检测</h1><ul>
<li><font color="#f40">typeof</font>    检测数据类型的逻辑运算</li>
<li><font color="#f40">instanceof </font>   检测是否为某个类的实例</li>
<li><font color="#f40">constructor</font>   检测构造函数</li>
<li><font color="#f40">Object.prototype.toString.call</font> 检测数据类型的</li>
</ul>
<h1 id="Number详情"><a href="#Number详情" class="headerlink" title="Number详情"></a>Number详情</h1><h2 id="Number的类型"><a href="#Number的类型" class="headerlink" title="Number的类型"></a>Number的类型</h2><p>NaN/isNaN/Infinity/parseInt/Number</p>
<ul>
<li><font color="#f40">NaN</font>: 全称Not A Number，<font color="#f40">不是有效数字</font>，<font color="#f40">NaN和谁都不相等，包括它自己</font></li>
<li><font color="#f40">isNaN</font>： 检测是否为非有效数字，如果不是有效数字返回true，是有效数字返回false。<ul>
<li><font color="#f40">要处理的值不是Number类型时，先转换成Number再检测</font>，比如isNaN(“10px”) =&gt; isNaN(Number(“10px”)) =&gt; isNaN(NaN) =&gt; true</li>
</ul>
</li>
<li><font color="#f40">Infinity</font>：默认是无穷大，加负号为无穷小</li>
<li><font color="#f40">parseInt</font>：处理的值是字符串，从字符串左侧开始查找有效数字（遇到非有效数字就停止查找），<font color="#f40">如果处理的值不是字符串，会先转换成字符串再开始查找有效数字</font></li>
<li><font color="#f40">Number</font>： 直接调用浏览器最底层的数据类型机制来完成的<ul>
<li><font color="#f40">true为1   false 为0</font> </li>
<li><font color="#f40">null为0   undefined为 NaN</font></li>
<li><font color="#f40">空字符串为0</font></li>
<li><font color="#f40">处理的值为字符串时，必须保证都是有效数字才会转换成数字，否则都是NaN</font>，比如Number(“100”)为100，Number(“100px”)为NaN</li>
</ul>
</li>
</ul>
<h2 id="Number的测试题"><a href="#Number的测试题" class="headerlink" title="Number的测试题"></a>Number的测试题</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">""</span>)    <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">""</span>)      <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">""</span>)       <span class="comment">// false  先把""转换成数字，isNaN(0)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">null</span>)  <span class="comment">// NaN，先把null转换成字符串，parseInt("null")</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>)     <span class="comment">// false，isNaN(0)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10px"</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"10px"</span>)  <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">"10px"</span>)   <span class="comment">// true，isNaN(NaN)</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"1.6px"</span>)+<span class="built_in">parseInt</span>(<span class="string">"1.2px"</span>)+<span class="keyword">typeof</span> <span class="built_in">parseInt</span>(<span class="literal">null</span>); <span class="comment">// "2.6number"，1.6+1+"number"</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="built_in">Number</span>(!!<span class="built_in">parseInt</span>(<span class="string">"0.8"</span>)))  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> !<span class="built_in">parseInt</span>(<span class="literal">null</span>) + !<span class="built_in">isNaN</span>(<span class="literal">null</span>)   <span class="comment">// "booleantrue"，typeof true + !false =&gt; "boolean" + true</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js检验对象类型的方法instanceof操作符Object.prototype.toString.call</title>
    <url>/js%E6%A3%80%E9%AA%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95instanceof%E6%93%8D%E4%BD%9C%E7%AC%A6Object-prototype-toString-call/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>用typeof能区别出<code>string</code> ， <code>number</code> ， <code>boolean</code> ， <code>undefined</code> ，<code>object</code>  </p>
<h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><p>但是想要知道object是什么类型就要用<code>instanceof</code> 操作符了<br><code>数组（Array）</code>，<code>对象（Object）</code>，<code>正则（RegExp）</code>，<code>null</code> ，<code>Function</code>  都属于对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">   obj = &#123;&#125;,</span><br><span class="line">   reg = <span class="regexp">/n$/</span>,</span><br><span class="line">   fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line"><span class="built_in">console</span>.log(reg <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fun <span class="keyword">instanceof</span> <span class="built_in">Function</span>);</span><br></pre></td></tr></table></figure>
<p>结果图：</p>
<a id="more"></a>
<p><img src="/js%E6%A3%80%E9%AA%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95instanceof%E6%93%8D%E4%BD%9C%E7%AC%A6Object-prototype-toString-call/1.png" alt="1.png"></p>
<ul>
<li><p>instanceof  <code>用于测试构造函数的prototype属性是否出现在对象的原型链中的任何位置</code></p>
<ul>
<li>解读：<code>用于判断某个对象是不是某个构造函数的一个实例，或者是不是某个构造函数的一个后代实例</code></li>
<li>语法：<code>对象 instanceof 数据类型（或者构造函数名）:返回true/false</code></li>
</ul>
</li>
<li><p>即比较对象.<strong>proto</strong>和数据类型（构造函数）.prototype,如果相等就为true,<br>不同就继续跟着对象的原型链，比较对象隐式原型里的隐式原型与数据类型（构造函数）.prototype<br>根据原型链的知识直到<code>原型链的最终</code>，指向<code>Object.prototype.__proto__---为null</code></p>
</li>
</ul>
<p>判断两个函数是不是在同一条原形链</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span> (<span class="params">score</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student.prototype = <span class="keyword">new</span> Person(<span class="string">"小李"</span>);</span><br><span class="line">    <span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(stu <span class="keyword">instanceof</span> Student); <span class="comment">//true  stu.__proto__ == Student.prototype很易理解</span></span><br><span class="line">    <span class="built_in">console</span>.log(stu <span class="keyword">instanceof</span> Person);  <span class="comment">//true</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据原型链：stu.__proto__ == Student.prototype == new Person</span></span><br><span class="line">    <span class="comment">// stu.__proto__.__proto__ == new Person.__proto__ == Person.prototype</span></span><br></pre></td></tr></table></figure>

<h1 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h1><p>用法：<code>Object.prototype.toString.call(value)</code><br>这是<code>对象的一个原生原型扩展函数，用来精确的区分数据类型…</code><br>toString方法的作用是返回一个对象的字符串形式，默认情况下返回类型字符串。</p>
<ul>
<li>数值：返回<code>[object Number]</code>。</li>
<li>字符串：返回<code>[object String]</code>。</li>
<li>布尔值：返回<code>[object Boolean]</code>。</li>
<li>undefined：返回<code>[object Undefined]</code>。</li>
<li>null：返回<code>[object Null]</code>。</li>
<li>数组：返回<code>[object Array]</code>。</li>
<li>arguments对象：返回<code>[object Arguments]</code>。</li>
<li>函数：返回<code>[object Function]</code>。</li>
<li>Error对象：返回<code>[object Error]</code>。</li>
<li>Date对象：返回<code>[object Date]</code>。</li>
<li>RegExp对象：返回<code>[object RegExp]</code>。</li>
<li>其他对象：返回<code>[object Object]</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>)) <span class="comment">//object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">'123'</span>)) <span class="comment">//object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)) <span class="comment">//object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)) <span class="comment">//object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([]) <span class="comment">//object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)) <span class="comment">//object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)) <span class="comment">//object Object]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js正则表达式中的indexOf和search的区别，exec与match的区别说明</title>
    <url>/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84indexOf%E5%92%8Csearch%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8Cexec%E4%B8%8Ematch%E7%9A%84%E5%8C%BA%E5%88%AB%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="indexOf和search的区别"><a href="#indexOf和search的区别" class="headerlink" title="indexOf和search的区别"></a>indexOf和search的区别</h1><p>search和indexOf的作用都是匹配出符合条件的字符串的索引位置，区别是search能用正则表达式匹配</p>
<a id="more"></a>
<h1 id="exec与match的区别"><a href="#exec与match的区别" class="headerlink" title="exec与match的区别"></a>exec与match的区别</h1><ol>
<li><p>当正则表达式<font color="#f40">无子表达式</font>，并且定义为<font color="#f40">非全局匹配</font>时，exec和match执行的<font color="#f40">结果是一样</font>，均返回第一个匹配的字符串内容 ,如下边的第1种情况；</p>
</li>
<li><p>当正则表达式<font color="#f40">无子表达式</font>，并且定义为<font color="#f40">全局匹配</font>时，exec和match执行，做存在多处匹配内容，则match返回的是<font color="#f40">多个元素数组</font>，而<font color="#f40">exec只会找到一个匹配的即返回</font>,如下边的第2种情况；</p>
</li>
<li><p>当正则表达式<font color="#f40">有子表达式</font>时，并且定义为<font color="#f40">非全局匹配</font>，exec和match执行的<font color="#f40">结果是一样</font>如下边的第3种情况；</p>
</li>
<li><p>当正则表达式<font color="#f40">有子表达式</font>时，并且定义为<font color="#f40">全局匹配</font>，exec和match执行的<font color="#f40">结果不一样</font>，此时<font color="#f40">match将忽略子表达式，只查找全匹配正则表达式并返回所有内容</font>，如下第4种情况；</p>
</li>
</ol>
<p>也就说，<font color="#f40">exec与全局是否定义无关系，而match则于全局相关联，当定义为非全局，两者执行结果相同<br></font></p>
<p>第1种情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>) ; </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"3abc4,5abc6"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));    <span class="comment">//abc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));   <span class="comment">//abc</span></span><br></pre></td></tr></table></figure>

<p>第2种情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>,<span class="string">"g"</span>) ; </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"3abc4,5abc6"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));<span class="comment">//["abc", index: 1, input: "3abc4,5abc6", groups: undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">//["abc", "abc"]</span></span><br></pre></td></tr></table></figure>
<p>效果图：<br><img src="/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84indexOf%E5%92%8Csearch%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8Cexec%E4%B8%8Ematch%E7%9A%84%E5%8C%BA%E5%88%AB%E8%AF%B4%E6%98%8E/0.png" alt></p>
<p>第3种情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a(bc)"</span>) ; </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"3abc4,5abc6"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));<span class="comment">//abc,bc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">//abc,bc</span></span><br></pre></td></tr></table></figure>
<p>效果图：<br><img src="/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84indexOf%E5%92%8Csearch%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8Cexec%E4%B8%8Ematch%E7%9A%84%E5%8C%BA%E5%88%AB%E8%AF%B4%E6%98%8E/1.png" alt></p>
<p>第4种情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"a(bc)"</span>,<span class="string">"g"</span>) ; </span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"3abc4,5abc6"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));<span class="comment">//abc,bc</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">//abc,abc</span></span><br></pre></td></tr></table></figure>
<p>效果图<br><img src="/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84indexOf%E5%92%8Csearch%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8Cexec%E4%B8%8Ematch%E7%9A%84%E5%8C%BA%E5%88%AB%E8%AF%B4%E6%98%8E/2.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>koa-session获取session为undefined</title>
    <url>/koa-session%E8%8E%B7%E5%8F%96session%E4%B8%BAundefined/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用koa-session时，获取session显示的是undefined</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>session是依赖于cookie的，前后端跨域时，前后端需要配置允许携带cookie</p>
<a id="more"></a>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li><p>前端<br>由于前端使用的axios，所以需要在axios中配置<code>withCredentials: true</code>。<br>例子：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $axios = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">"http://localhost:3030/"</span>, <span class="comment">// 发送请求的前置的url</span></span><br><span class="line">  timeout: <span class="number">10000</span>, <span class="comment">// 请求超时的时间</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>   <span class="comment">// 允许携带cookie</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>后端<br>后端用的是koa2-cor包进行的跨域，所以需要配置<code>credentials: true</code><br>例子：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'koa2-cors'</span>);</span><br><span class="line">app.keys = [<span class="string">'some secret hurr'</span>];</span><br><span class="line"><span class="keyword">const</span> sessionConfig = &#123;</span><br><span class="line">    key: <span class="string">'koa:sess'</span>,   <span class="comment">//cookie key (default is koa:sess)</span></span><br><span class="line">    maxAge: <span class="number">86400000</span>,  <span class="comment">// cookie的过期时间 maxAge in ms (default is 1 days)</span></span><br><span class="line">    overwrite: <span class="literal">true</span>,  <span class="comment">//是否可以overwrite    (默认default true)</span></span><br><span class="line">    httpOnly: <span class="literal">true</span>, <span class="comment">//cookie是否只有服务器端可以访问 httpOnly or not (default true)</span></span><br><span class="line">    signed: <span class="literal">true</span>,   <span class="comment">//签名默认true</span></span><br><span class="line">    rolling: <span class="literal">false</span>,  <span class="comment">//在每次请求时强行设置cookie，这将重置cookie过期时间（默认：false）</span></span><br><span class="line">    renew: <span class="literal">false</span>,  <span class="comment">//(boolean) renew session when session is nearly expired,</span></span><br><span class="line">&#125;;</span><br><span class="line">app.use(session(sessionConfig, app));</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>koa-static静态托管</title>
    <url>/koa-static%E9%9D%99%E6%80%81%E6%89%98%E7%AE%A1/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i koa-static --save</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="comment">// 引入 koa-static</span></span><br><span class="line"><span class="keyword">const</span> koaStatic= <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">app.use(koaStatic(path.join(__dirname, <span class="string">'./static'</span>)))</span><br><span class="line">app.listen(<span class="number">3030</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>先看一下项目的目录结构<br><img src="/koa-static%E9%9D%99%E6%80%81%E6%89%98%E7%AE%A1/1.png" alt="1.png"><br>查看静态文件<br><img src="/koa-static%E9%9D%99%E6%80%81%E6%89%98%E7%AE%A1/2.png" alt="2.png"></p>
<h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>访问静态文件时，要直接通过<code>http://localhost:3030/index.html</code>访问，不是<code>http://localhost:3030/static/index.html</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Koa</tag>
      </tags>
  </entry>
  <entry>
    <title>node框架express中生成验证码svg-captcha</title>
    <url>/node%E6%A1%86%E6%9E%B6express%E4%B8%AD%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81svg-captcha/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h1><p>本文章采用了svg-captcha方法去实现验证码功能，后端是express，前端是vue。<br>实现方式：</p>
<ol>
<li>通过后端生成验证码，把验证码的值存到<code>session</code>中;</li>
<li>再把验证码发到前端，前端去接收并把验证码在界面中显示出来;</li>
<li>前端输入验证码后提交到后端，和后端session中保存的验证码做对比，看是否一致。</li>
</ol>
<h1 id="svg-captcha使用步骤"><a href="#svg-captcha使用步骤" class="headerlink" title="svg-captcha使用步骤"></a>svg-captcha使用步骤</h1><ol>
<li>安装svg-captcha<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i svg-captcha -S</span><br></pre></td></tr></table></figure></li>
<li>后端生成验证码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">'svg-captcha'</span>); <span class="comment">// 引入svg-captcha模块</span></span><br><span class="line">router.get(<span class="string">"/captchapng"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> cap = svgCaptcha.create(); <span class="comment">// 此时创建的图形验证码默认为四个字符和一根干扰线条，背景色默认无</span></span><br><span class="line">    <span class="built_in">console</span>.log(cap); <span class="comment">// &#123;text: 'adfd', data: '&lt;svg&gt;.......&lt;svg/&gt;'&#125;</span></span><br><span class="line">    req.session.captcha = cap.text; <span class="comment">// 把验证码的值存到session中</span></span><br><span class="line">    res.type(<span class="string">'svg'</span>)</span><br><span class="line">    res.status(<span class="number">200</span>).send(cap.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>前端接收</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- html部分 --&gt;</span><br><span class="line">&lt;div ref&#x3D;&quot;svg&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- script部分 --&gt;</span><br><span class="line">mounted() &#123;</span><br><span class="line">this.$axios(&#123;</span><br><span class="line">  method: &quot;get&quot;,</span><br><span class="line">  url: &quot;&#x2F;captchapng&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(res &#x3D;&gt; &#123;</span><br><span class="line">    this.imgSrc&#x3D;res.data;</span><br><span class="line">    this.$refs.svg.innerHTML &#x3D; res.data</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(err &#x3D;&gt; console.log(err));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>运行效果：<br><img src="/node%E6%A1%86%E6%9E%B6express%E4%B8%AD%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81svg-captcha/1.png" alt="1.png"></p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="svgCaptcha-create-options"><a href="#svgCaptcha-create-options" class="headerlink" title="svgCaptcha.create(options)"></a>svgCaptcha.create(options)</h2><p>如果未传递任何选项，则将获得一个随机字符串，该字符串包含四个字符和相应的svg。</p>
<ul>
<li><code>size</code>：4 //随机字符串的大小</li>
<li><code>ignoreChars</code>：’0o1i’//过滤掉一些字符，例如0o1i</li>
<li><code>noise</code>：1 //噪声线数</li>
<li><code>color</code>：true //字符将具有不同的颜色而不是灰色，如果设置了背景选项，则为true</li>
<li><code>background</code>：’＃cc9966’// SVG图片的背景颜色</li>
</ul>
<p>此函数返回具有以下属性的对象：</p>
<ul>
<li><code>data</code>：字符串// svg路径数据</li>
<li><code>text</code>：字符串//验证码文本</li>
</ul>
<h2 id="svgCaptcha-createMathExpr-options"><a href="#svgCaptcha-createMathExpr-options" class="headerlink" title="svgCaptcha.createMathExpr(options)"></a>svgCaptcha.createMathExpr(options)</h2><p>与创建api类似，您可以使用上述选项以及3个其他选项：</p>
<ul>
<li><code>mathMin</code>：1 //数学表达式可以为的最小值</li>
<li><code>mathMax</code>：9 //数学表达式可以为的最大值<br>mathOperator：+ //要使用+，-或的运算符+-（对于random +或-）</li>
</ul>
<p>此函数返回具有以下属性的对象：</p>
<ul>
<li><code>data</code>：string //数学表达式的svg</li>
<li><code>text</code>：string //数学表达式的答案</li>
</ul>
<h2 id="svgCaptcha-loadFont-url"><a href="#svgCaptcha-loadFont-url" class="headerlink" title="svgCaptcha.loadFont(url)"></a>svgCaptcha.loadFont(url)</h2><p>加载您自己的字体并覆盖默认字体。<br>ps: 这个api真心没弄懂</p>
<ul>
<li><code>url</code>：string // 字体的路径此api是opentype.js的loadFont api的包装。<br>您可能需要围绕各种选项进行实验，以使自己的字体可访问。</li>
</ul>
<h2 id="svgCaptcha-options"><a href="#svgCaptcha-options" class="headerlink" title="svgCaptcha.options"></a>svgCaptcha.options</h2><p>访问全局设置对象。它用于create和createMathExpr api作为默认选项。</p>
<p>除了大小，噪点，颜色和背景之外，您还可以设置以下属性：</p>
<ul>
<li><code>width</code>：数字//验证码的宽度</li>
<li><code>height</code>：数字//验证码的高度</li>
<li><code>fontSize</code>：数字//验证码文字大小</li>
<li><code>charPreset</code>：字符串//随机字符预设</li>
</ul>
<h2 id="svgCaptcha-randomText-size-options"><a href="#svgCaptcha-randomText-size-options" class="headerlink" title="svgCaptcha.randomText([size|options])"></a>svgCaptcha.randomText([size|options])</h2><p>返回一个随机字符串。</p>
<h2 id="svgCaptcha-text-options"><a href="#svgCaptcha-text-options" class="headerlink" title="svgCaptcha(text, options)"></a>svgCaptcha(text, options)</h2><p>根据提供的文本返回svg验证码。</p>
<p>在1.1.0之前的版本中，您必须调用这两个函数，<br>现在您可以调用create（）保存一些按键；）。</p>
<h1 id="根据api来设置options来实现api中的功能"><a href="#根据api来设置options来实现api中的功能" class="headerlink" title="根据api来设置options来实现api中的功能"></a>根据api来设置options来实现api中的功能</h1><p>根据之前的例子来进行举例：</p>
<p>多个干扰线，字体多种也是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">'svg-captcha'</span>); <span class="comment">// 引入svg-captcha模块</span></span><br><span class="line">router.get(<span class="string">"/captchapng"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> options = &#123;</span><br><span class="line">        noise: <span class="number">5</span>,</span><br><span class="line">        color: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> cap = svgCaptcha.create(options); <span class="comment">// 此时创建的图形验证码默认为四个字符和一根干扰线条，背景色默认无</span></span><br><span class="line">    <span class="built_in">console</span>.log(cap); <span class="comment">// &#123;text: 'adfd', data: '&lt;svg&gt;.......&lt;svg/&gt;'&#125;</span></span><br><span class="line">    req.session.captcha = cap.text; <span class="comment">// 把验证码的值存到session中</span></span><br><span class="line">    res.type(<span class="string">'svg'</span>)</span><br><span class="line">    res.status(<span class="number">200</span>).send(cap.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>运行效果：<br><img src="/node%E6%A1%86%E6%9E%B6express%E4%B8%AD%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81svg-captcha/2.png" alt="2.png"></p>
<p>数学表达式验证码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let options &#x3D; &#123;</span><br><span class="line">            noise: 5,</span><br><span class="line">            color: true</span><br><span class="line">        &#125;</span><br><span class="line">const cap &#x3D; svgCaptcha.createMathExpr(options);</span><br></pre></td></tr></table></figure>

<p>运行效果：<br><img src="/node%E6%A1%86%E6%9E%B6express%E4%B8%AD%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81svg-captcha/3.png" alt="3.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>path.resolve和path.join</title>
    <url>/path-resolve%E5%92%8Cpath-join/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、path模块的引入"><a href="#一、path模块的引入" class="headerlink" title="一、path模块的引入"></a>一、path模块的引入</h1><p>需要引入path模块才能使用path.resolve()和path.join()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;);</span><br></pre></td></tr></table></figure>
<h1 id="二、path-resolve-from…-to"><a href="#二、path-resolve-from…-to" class="headerlink" title="二、path.resolve([from…],to)"></a>二、path.resolve([from…],to)</h1><p>作用：把一个路径或路径片段的序列解析为一个绝对路径。相当于执行cd操作。<br><code>path.resolve 中 &#39;doc&#39; 和 &#39;./doc&#39; 等价，代表当前文件夹下。但是&#39;/doc&#39;代表的是根目录下的doc</code></p>
<a id="more"></a>
<h2 id="Node的path-resolve-dirname，’-src’"><a href="#Node的path-resolve-dirname，’-src’" class="headerlink" title="Node的path.resolve(__dirname，’./src’)"></a>Node的path.resolve(__dirname，’./src’)</h2><p>这个问题可以拆分为两个知识点：</p>
<ol>
<li>path.resolve( )方法</li>
<li><strong>dirname变量<br>__dirname是</strong>directory+name的缩写，顾名思义，是目录名的意思，代表当前文件的绝对路径。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">console.log(__dirname)</span><br><span class="line">console.log(path.resolve(__dirname,&quot;&#x2F;aaa&#x2F;bbb&quot;))</span><br><span class="line">console.log(path.resolve(__dirname,&quot;.&#x2F;aaa&#x2F;bbb&quot;))</span><br><span class="line">console.log(path.resolve(__dirname,&quot;aaa&#x2F;bbb&quot;))</span><br><span class="line">console.log(path.resolve(&quot;aaa&quot;))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\Users\m1883\Desktop\webpack-test\src</span><br><span class="line">c:\aaa\bbb</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\src\aaa\bbb</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\src\aaa\bbb</span><br><span class="line">c:\aaa</span><br></pre></td></tr></table></figure>

<p>注意：  </p>
<ol>
<li>只传入__dirname也可以自动调用path.resolve方法</li>
<li>可以拼接路径字符串，<strong>但是不调用path.resolve()方法<font color="#f40">拼接失败</font></strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">console.log(__dirname)</span><br><span class="line">console.log(__dirname+&quot;aaa&quot;)</span><br><span class="line">console.log(__dirname+&quot;&#x2F;aaa&quot;)</span><br></pre></td></tr></table></figure>
运行结果：<br>看看第二个和第三个的结果是错误的路径<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\Users\m1883\Desktop\webpack-test\src</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\srcaaa</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\srcaaa</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如果没有用__dirname,直接传值的话，那么值会覆盖上级的路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">console.log(path.resolve(&quot;aaa&quot;))</span><br><span class="line">console.log(path.resolve(__dirname,&quot;aaa&quot;))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\Users\m1883\Desktop\webpack-test\aaa</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\src\aaa</span><br></pre></td></tr></table></figure>



<h1 id="三、path-join-path1，path2，path3……"><a href="#三、path-join-path1，path2，path3……" class="headerlink" title="三、path.join(path1，path2，path3…….)"></a>三、path.join(path1，path2，path3…….)</h1><p> 作用：将路径片段使用特定的分隔符（window：\）连接起来形成路径，并规范化生成的路径。若任意一个路径片段类型错误，会报错。<br><code>path.join 中 &#39;doc&#39; 、&#39;/doc&#39; 和 &#39;./doc&#39; 三者等价，代表当前目录下。</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">console.log(__dirname)</span><br><span class="line">console.log(path.join(__dirname,&quot;&#x2F;aaa&#x2F;bbb&quot;))</span><br><span class="line">console.log(path.join(__dirname,&quot;.&#x2F;aaa&#x2F;bbb&quot;))</span><br><span class="line">console.log(path.join(__dirname,&quot;aaa&#x2F;bbb&quot;))</span><br><span class="line">console.log(path.join(&quot;aaa&quot;))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\Users\m1883\Desktop\webpack-test\src</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\src\aaa\bbb</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\src\aaa\bbb</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\src\aaa\bbb</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure>

<h1 id="path-resolve-和path-join-的区别"><a href="#path-resolve-和path-join-的区别" class="headerlink" title="path.resolve()和path.join()的区别"></a>path.resolve()和path.join()的区别</h1><p>join()只是拼接各个path片段，并不像resolve()一样除了拼接各个字段<code>还拼接了工作目录的路径</code>。  </p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path &#x3D; require(&quot;path&quot;);</span><br><span class="line">console.log(path.join(&quot;aaa&quot;))</span><br><span class="line">console.log(path.resolve(&quot;aaa&quot;))</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaa</span><br><span class="line">c:\Users\m1883\Desktop\webpack-test\aaa</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>react使用自定义动画CSSTransition详解</title>
    <url>/react%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BBCSSTransition%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、先下载依赖包"><a href="#一、先下载依赖包" class="headerlink" title="一、先下载依赖包"></a>一、先下载依赖包</h1><p>安装两个包 <code>react-transition-group</code> 和 <code>@types/react-transition-group</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install react-transition-group  @types&#x2F;react-transition-group --save</span><br></pre></td></tr></table></figure>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><p>例子<br>APP.js文件中定义CSSTransition中的一些属性，和通过classNames自定义动画名字</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition &#125; <span class="keyword">from</span> <span class="string">"react-transition-group"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [open, setOpen] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span> &gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setOpen(!open)&#125;&gt;toggle&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;CSSTransition</span></span><br><span class="line"><span class="regexp">        in=&#123;open&#125;</span></span><br><span class="line"><span class="regexp">        timeout=&#123;300&#125;</span></span><br><span class="line"><span class="regexp">        classNames="diy-transition"</span></span><br><span class="line"><span class="regexp">        unmountOnExit</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;1&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;<span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;3&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>CSSTransition&gt;</span><br><span class="line">    &lt;<span class="regexp">/div &gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>App.css中根据<code>CSSTransition中的classNames的属性值</code>编写对应想要的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 显示的初始样式 */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出现时 */</span></span><br><span class="line"><span class="selector-class">.diy-transition-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  元素出现的最终样式 */</span></span><br><span class="line"><span class="selector-class">.diy-transition-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">32</span>, <span class="number">218</span>, <span class="number">209</span>);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">300ms</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素消失时 */</span></span><br><span class="line"><span class="selector-class">.diy-transition-exit</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.diy-transition-exit-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">300ms</span> ease-in-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果图<br><img src="/react%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BBCSSTransition%E8%AF%A6%E8%A7%A3/1.gif" alt="1.gif"></p>
<h1 id="三、CSSTransition参数"><a href="#三、CSSTransition参数" class="headerlink" title="三、CSSTransition参数"></a>三、CSSTransition参数</h1><p>CSSTransition中的属性值的讲解</p>
<ul>
<li><p>in：<br>必备的参数，默认是false，类型是boolean,切换状态时所用的值，是显示还是隐藏元素<br><code>type:boolean</code><br><code>default: false</code></p>
</li>
<li><p>timeout：<br>延时<br><code>type:number</code></p>
</li>
<li><p>classNames：<br>所应用样式的前缀<br>可以使string类型也可以是object类型<br>例子：<br>string型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">classNames=<span class="string">"my-appear"</span></span><br></pre></td></tr></table></figure>
<p>object类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">classNames=&#123;&#123;</span><br><span class="line">  appear: <span class="string">'my-appear'</span>,</span><br><span class="line">  appearActive: <span class="string">'my-active-appear'</span>,</span><br><span class="line">  appearDone: <span class="string">'my-done-appear'</span>,</span><br><span class="line">  enter: <span class="string">'my-enter'</span>,</span><br><span class="line">  enterActive: <span class="string">'my-active-enter'</span>,</span><br><span class="line">  enterDone: <span class="string">'my-done-enter'</span>,</span><br><span class="line">  exit: <span class="string">'my-exit'</span>,</span><br><span class="line">  exitActive: <span class="string">'my-active-exit'</span>,</span><br><span class="line">  exitDone: <span class="string">'my-done-exit'</span>,</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><code>type: string | { appear?: string, appearActive?: string, appearDone?: string, enter?: string, enterActive?: string, enterDone?: string, exit?: string, exitActive?: string, exitDone?: string, }</code><br><code>default: &#39;&#39;</code></p>
</li>
<li><p>unmountOnExit：<br>消失时移除组件<br><code>type:boolean</code><br><code>default: false</code></p>
</li>
<li><p>appear<br>刚加载时是否使用动画<br>appear要重点说明一下，应用场景是当元素在页面第一次加载渲染的时候显示在页面时，在页面加载渲染的时候是否执行动画，下面举个例子<br>App.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition &#125; <span class="keyword">from</span> <span class="string">"react-transition-group"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> [open, setOpen] = useState(<span class="literal">true</span>);  <span class="comment">// 默认true</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span> &gt;</span><br><span class="line">    &lt;button onClick=&#123;() =&gt; setOpen(!open)&#125;&gt;toggle&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;CSSTransition</span></span><br><span class="line"><span class="regexp">        in=&#123;open&#125;</span></span><br><span class="line"><span class="regexp">        timeout=&#123;300&#125;</span></span><br><span class="line"><span class="regexp">        classNames="diy-transition"</span></span><br><span class="line"><span class="regexp">        unmountOnExit /</span><span class="regexp">/ 为true 代表退出的时候移除dom</span></span><br><span class="line"><span class="regexp">        appear   /</span><span class="regexp">/ 为true  渲染的时候就直接执行动画，默认false，</span></span><br><span class="line"><span class="regexp">    &gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;1&lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;3&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>CSSTransition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div &gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>App.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 显示的初始样式 */</span></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 页面渲染时 */</span></span><br><span class="line"><span class="selector-class">.diy-transition-appear</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: goldenrod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.diy-transition-appear-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">300</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出现时 */</span></span><br><span class="line"><span class="selector-class">.diy-transition-enter</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  元素出现的最终样式 */</span></span><br><span class="line"><span class="selector-class">.diy-transition-enter-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">32</span>, <span class="number">218</span>, <span class="number">209</span>);</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">300ms</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素消失时 */</span></span><br><span class="line"><span class="selector-class">.diy-transition-exit</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.diy-transition-exit-active</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">300ms</span> ease-in-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：<br><img src="/react%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BBCSSTransition%E8%AF%A6%E8%A7%A3/2.gif" alt="2.gif"></p>
<h1 id="四、CSSTransition回调函数"><a href="#四、CSSTransition回调函数" class="headerlink" title="四、CSSTransition回调函数"></a>四、CSSTransition回调函数</h1></li>
<li><p>onEnter<br>  <Transition>组件的回调函数，当组件enter或appear时会立即调用。<br>  <code>type: Function(node: HtmlElement, isAppearing: bool)</code></Transition></p>
</li>
<li><p>onEntering<br>  也是一个过渡组件的回调函数，当组件enter-active或appear-active时，立即调用此函数<br>  <code>type: Function(node: HtmlElement, isAppearing: bool)</code></p>
</li>
<li><p>onEntered<br>  同样是回调函数，当组件的enter,appearclassName被移除时，意即调用此函数<br>  <code>type: Function(node: HtmlElement, isAppearing: bool)</code></p>
</li>
<li><p>onExit<br>  当组件应用exit类名时，调用此函数<br>  <code>type: Function(node: HtmlElement)</code></p>
</li>
<li><p>onExiting<br>  当组件应用exit-active类名时，调用此函数<br>  <code>type: Function(node: HtmlElement)</code></p>
</li>
<li><p>onExited<br>  当组件exit类名被移除，且添加了exit-done类名时，调用此函数<br>  <code>type: Function(node: HtmlElement)</code></p>
</li>
</ul>
<h1 id="五、配合第三方库animate-css使用"><a href="#五、配合第三方库animate-css使用" class="headerlink" title="五、配合第三方库animate.css使用"></a>五、配合第三方库animate.css使用</h1><ol>
<li><p>安装 animate.css<br><code>npm install aniamte.css --save</code></p>
</li>
<li><p>在index.js中引入animate.css</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"animate.css"</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在CSSTransition中的classNames中引入样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CSSTransition &#125; <span class="keyword">from</span> <span class="string">"react-transition-group"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [open, setOpen] = useState(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span> &gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setOpen(!open)&#125;&gt;toggle&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;CSSTransition</span></span><br><span class="line"><span class="regexp">        in=&#123;open&#125;</span></span><br><span class="line"><span class="regexp">        timeout=&#123;300&#125;</span></span><br><span class="line"><span class="regexp">        classNames=&#123;&#123;</span></span><br><span class="line"><span class="regexp">          appear:"animate__slideInDown",  /</span><span class="regexp">/ 第一次加载动画</span></span><br><span class="line"><span class="regexp">          enter:"animate__fadeIn",     /</span><span class="regexp">/ 显示动画</span></span><br><span class="line"><span class="regexp">          exit:"animate__fadeOut"      /</span><span class="regexp">/ 消失动画</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">        unmountOnExit</span></span><br><span class="line"><span class="regexp">        appear</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul className="animate__animated"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;1&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;<span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;li&gt;3&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>CSSTransition&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div &gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>运行效果:<br><img src="/react%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BBCSSTransition%E8%AF%A6%E8%A7%A3/3.gif" alt="3.gif"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>querySelectorAll和getElementsByClassName的区别</title>
    <url>/querySelectorAll%E5%92%8CgetElementsByClassName%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>一直以为querySelectorAll()系列除了兼容性以外其他方面都能完胜getElementsByClassName()系列，最近才发现我还是太年轻了。</p>
<h1 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h1><p>querySelectorAll()和querySelector()有个比较容易忽略的缺点就是<font color="#f40">获取出来的元素及元素数组是静态的</font>；<br>但是getElementsByClassName(）和getElementsByTagName()<font color="#f40">获取出来的元素及元素数组是动态的</font><br>静态的就是说它<font color="#f40">不会随着 dom 操作而改变</font>，动态的 <font color="#f40">dom 变了也会跟着变</font>。</p>
<a id="more"></a>
<h1 id="举个例子就明白了："><a href="#举个例子就明白了：" class="headerlink" title="举个例子就明白了："></a>举个例子就明白了：</h1><p>先让id为parent的元素中的class为child的元素获取出来，打印一下此时的child获取的数组；<br>再修改一下parent中的元素，改成了a标签但是class仍是child，再次打印一下此时的child获取的数组。</p>
<ol>
<li><p>用querySelectorAll()来测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;div id=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="child"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="comment">// js</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> parent = <span class="built_in">document</span>.querySelector(<span class="string">"#parent"</span>);</span><br><span class="line">    <span class="keyword">let</span> children = parent.querySelectorAll(<span class="string">".child"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(children);</span><br><span class="line">    parent.innerHTML=<span class="string">"&lt;a class='child'&gt;&lt;/a&gt;&lt;a class='child'&gt;&lt;/a&gt;"</span></span><br><span class="line">    <span class="built_in">console</span>.log(children);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/querySelectorAll%E5%92%8CgetElementsByClassName%E7%9A%84%E5%8C%BA%E5%88%AB/1.png" alt="1.png"></p>
</li>
<li><p>用getElementsByClassName()来做测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent = <span class="built_in">document</span>.querySelector(<span class="string">"#parent"</span>);</span><br><span class="line"><span class="keyword">let</span> children = parent.getElementsByClassName(<span class="string">"child"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(children);</span><br><span class="line">parent.innerHTML=<span class="string">"&lt;a class='child'&gt;&lt;/a&gt;&lt;a class='child'&gt;&lt;/a&gt;"</span></span><br><span class="line"><span class="built_in">console</span>.log(children);</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/querySelectorAll%E5%92%8CgetElementsByClassName%E7%9A%84%E5%8C%BA%E5%88%AB/2.png" alt="2.png"></p>
</li>
</ol>
<p>这样区别就一目了然了吧。<font color="#f40">getElementsByTagName()也是具有动态获取元素的功能的</font>。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>react的markdown编辑器react-markdown</title>
    <url>/react%E7%9A%84markdown%E7%BC%96%E8%BE%91%E5%99%A8react-markdown/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、用到的npm包"><a href="#一、用到的npm包" class="headerlink" title="一、用到的npm包"></a>一、用到的npm包</h1><p><code>react-markdown</code> ：用来解析markdown。<br><code>react-syntax-highlighter</code> ：用来让markdown中代码语法高亮。</p>
<h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm i react-markdown  react-syntax-highlighter --save</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h1><p>本次的例子的package.json中这两个npm包版本信息</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"react-markdown": "^5.0.2",</span><br><span class="line">"react-syntax-highlighter": "^15.3.0"</span><br></pre></td></tr></table></figure>
<p>开始例子<br><code>使用markdown中的代码功能时用~~~符号代替了```</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactMarkdown <span class="keyword">from</span> <span class="string">"react-markdown"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Prism <span class="keyword">as</span> SyntaxHighlighter &#125; <span class="keyword">from</span> <span class="string">'react-syntax-highlighter'</span></span><br><span class="line"><span class="keyword">import</span> &#123; vscDarkPlus &#125; <span class="keyword">from</span> <span class="string">'react-syntax-highlighter/dist/esm/styles/prism'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 代码语法高亮</span></span><br><span class="line">  <span class="keyword">const</span> renderers = &#123;</span><br><span class="line">    code: <span class="function">(<span class="params">&#123; language, value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SyntaxHighlighter</span> <span class="attr">style</span>=<span class="string">&#123;vscDarkPlus&#125;</span> <span class="attr">language</span>=<span class="string">&#123;language&#125;</span> <span class="attr">children</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// markdown的渲染的字符串</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">  # 说明</span></span><br><span class="line"><span class="string">  - a</span></span><br><span class="line"><span class="string">  - b</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  ~~~js</span></span><br><span class="line"><span class="string">  cosole.log(111)</span></span><br><span class="line"><span class="string">  ~~~</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span> &gt;</span><br><span class="line">      &lt;ReactMarkdown renderers=&#123;renderers&#125; children=&#123;str&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div &gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure>
<p>运行结果<br><img src="/react%E7%9A%84markdown%E7%BC%96%E8%BE%91%E5%99%A8react-markdown/1.png" alt="1.png"></p>
<p>如果想要了解更多的配置，请看两个包的文档地址：</p>
<ul>
<li><a href="https://github.com/remarkjs/react-markdown" target="_blank" rel="noopener">react-markdown文档</a></li>
<li><a href="https://github.com/react-syntax-highlighter/react-syntax-highlighter" target="_blank" rel="noopener">react-syntax-highlighter文档</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>scrollX、scrollY和scrollTop、scrollLeft的区别</title>
    <url>/scrollX%E3%80%81scrollY%E5%92%8CscrollTop%E3%80%81scrollLeft%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>


<h2 id="scrollX、scrollY和scrollTop、scrollLeft比较"><a href="#scrollX、scrollY和scrollTop、scrollLeft比较" class="headerlink" title="scrollX、scrollY和scrollTop、scrollLeft比较"></a>scrollX、scrollY和scrollTop、scrollLeft比较</h2><ul>
<li>相同点：都可以获取到滚动条的位置，都是window对象下的。bom对象</li>
<li>不同点：scrollX、scrollY<font color="#f40">只读不写</font>;scrollTop、scrollLeft：<font color="#f40">可读可写</font>  </li>
</ul>
<a id="more"></a>

<p>例子:在console控制台有输入代码，出现相应的结果<br><img src="/scrollX%E3%80%81scrollY%E5%92%8CscrollTop%E3%80%81scrollLeft%E7%9A%84%E5%8C%BA%E5%88%AB/3.png" alt><br><br><br><img src="/scrollX%E3%80%81scrollY%E5%92%8CscrollTop%E3%80%81scrollLeft%E7%9A%84%E5%8C%BA%E5%88%AB/4.png" alt></p>
<h2 id="获取到scrollTop、scrollLeft的方法是"><a href="#获取到scrollTop、scrollLeft的方法是" class="headerlink" title="获取到scrollTop、scrollLeft的方法是"></a>获取到scrollTop、scrollLeft的方法是</h2><ol>
<li><p>原生js获取 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> top = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line"><span class="keyword">let</span> left = <span class="built_in">document</span>.documentElement.scrollLeft;</span><br></pre></td></tr></table></figure>
</li>
<li><p>jq中的获取方法是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> top =  $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="keyword">let</span> left =  $(<span class="built_in">window</span>).scrollLeft();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="用scollTop做一个返回顶部功能按钮"><a href="#用scollTop做一个返回顶部功能按钮" class="headerlink" title="用scollTop做一个返回顶部功能按钮"></a>用scollTop做一个返回顶部功能按钮</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> back=<span class="built_in">document</span>.querySelector(<span class="string">".back"</span>);</span><br><span class="line">back.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> distance = <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">    <span class="built_in">console</span>.log(distance);</span><br><span class="line">    <span class="keyword">let</span> s = distance / <span class="number">600</span> * <span class="number">25</span>;  <span class="comment">//路程/时间=s *25每隔25ms秒 动的路程</span></span><br><span class="line">    <span class="keyword">let</span> st = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        distance -= s;</span><br><span class="line">        <span class="keyword">if</span> (distance &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            distance = <span class="number">0</span>; <span class="comment">//当l&lt;=0时，设置l=0</span></span><br><span class="line">            clearInterval(st);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.scrollTop = distance;</span><br><span class="line">    &#125;, <span class="number">25</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript中的Partial和Omit</title>
    <url>/typescript%E4%B8%AD%E7%9A%84Partial%E5%92%8COmit/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<h1 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial<Type></Type></h1><p>构造一个类型，将<code>Type的所有属性</code>设置为<code>可选</code>。该实用程序将返回一个表示给定类型的所有子集的类型。</p>
<p>例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Todo &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  description: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用partial将接口Todo所有属性变成可选</span><br><span class="line">function updateTodo(todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;) &#123;</span><br><span class="line">  return &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const todo1 &#x3D; &#123;</span><br><span class="line">  title: &quot;organize desk&quot;,</span><br><span class="line">  description: &quot;clear clutter&quot;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 虽然第二个参数没有给声明title属性，但不报错</span><br><span class="line">const todo2 &#x3D; updateTodo(todo1, &#123;</span><br><span class="line">  description: &quot;throw out trash&quot;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Omit-lt-Type-Keys-gt"><a href="#Omit-lt-Type-Keys-gt" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a>Omit&lt;Type, Keys&gt;</h1><p>通过从<code>Type</code>中选取所有属性，然后删除属性<code>Keys</code>来构造一个类型。 </p>
<p>例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Todo &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  description: string;</span><br><span class="line">  completed: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 类型TodoPreview等于接口Todo移除descprition属性的接口</span><br><span class="line">type TodoPreview &#x3D; Omit&lt;Todo, &quot;description&quot;&gt;;</span><br><span class="line"></span><br><span class="line">const todo: TodoPreview &#x3D; &#123;</span><br><span class="line">  title: &quot;Clean room&quot;,</span><br><span class="line">  completed: false,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
  <entry>
    <title>video的autoplay在chrome浏览器失效的解决方案</title>
    <url>/video%E7%9A%84autoplay%E5%9C%A8chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当给video或audio标签添加autoplay属性时，在chrome浏览器会失效。</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>Chrome为了不造成噪音污染，提升用户体验，首次让用户自己选择，关掉了声音自动播放</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><a id="more"></a>
<p>如果视频本身已经被设置为<code>静音</code>的情况下,那么浏览器将<code>不会再拦截其加载进行自动播放</code>。<br>video标签有一个<code>muted</code>属性可以将视频设置为静音状态。<br>代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">muted</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h1><p>副作用就是视频自动播放但是没有声音。不适用既要自动播放又要有声音的场景。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Html5</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli4修改index.html中的title</title>
    <url>/vue-cli4%E4%BF%AE%E6%94%B9index-html%E4%B8%AD%E7%9A%84title/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>由于vue-cli4的index.html的title是在webpack中定义的，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;&lt;%&#x3D; htmlWebpackPlugin.options.title %&gt;&lt;&#x2F;title&gt;</span><br></pre></td></tr></table></figure>
<p>修改方法：<br>在vue.config.js中设置</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;修改或新增html-webpack-plugin的值，在index.html里面能读取htmlWebpackPlugin.options.title</span><br><span class="line">    chainWebpack: config &#x3D;&gt;&#123;</span><br><span class="line">      config.plugin(&#39;html&#39;)</span><br><span class="line">        .tap(args &#x3D;&gt; &#123;</span><br><span class="line">          args[0].title &#x3D; &quot;宝贝商城&quot;;</span><br><span class="line">          return args;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue上typescript的用法</title>
    <url>/vue%E4%B8%8Atypescript%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="Vue-extend-和-vue-class-component"><a href="#Vue-extend-和-vue-class-component" class="headerlink" title="Vue.extend 和 vue-class-component"></a>Vue.extend 和 vue-class-component</h1><p>使用 TypeScript 写 Vue 组件时，有两种推荐形式：</p>
<ul>
<li><code>Vue.extend()</code>：使用基础 Vue 构造器，创建一个“子类”。此种写法与 Vue 单文件组件标准形式最为接近，唯一不同仅是组件选项需要被包裹在 Vue.extend() 中。</li>
<li><code>vue-class-component</code>：通常与 <code>vue-property-decorator</code> 一起使用，提供一系列装饰器，能让我们书写类风格的 Vue 组件，和react写法很像，推荐这种写法，如果你会vue和react的话，用这种写法不容易对react的项目手生，不会react的话，用这种写法，会对后来对react的学习有很大的帮助。<h1 id="vue项目中安装"><a href="#vue项目中安装" class="headerlink" title="vue项目中安装"></a>vue项目中安装</h1></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -S vue-class-component </span><br><span class="line">npm i -S vue-property-decorator</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="一个基本的-vue-组件模板"><a href="#一个基本的-vue-组件模板" class="headerlink" title="一个基本的 vue 组件模板"></a>一个基本的 vue 组件模板</h1><p><code>@Component({})</code>是必须要有的，即使不用也要留着，要不然页面不加载该组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content-wrapper"</span> &gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang = <span class="string">"ts"</span> &gt;</span><br><span class="line">	<span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line">	</span><br><span class="line">	@Component(&#123;&#125;)</span><br><span class="line">	<span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped &gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="声明响应式属性-data"><a href="#声明响应式属性-data" class="headerlink" title="声明响应式属性 data"></a>声明响应式属性 data</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default class App extends Vue &#123;</span><br><span class="line">  private name: string &#x3D; &#39;kaelyn&#39;;   &#x2F;&#x2F; 声明响应式属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的写法等同于之前的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'App'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">'kaelyn'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">     &lt;button @click&#x3D;&quot;age &#x3D; number + 1&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123;age&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">     &lt;button @click&#x3D;&quot;age &#x3D; number - 1&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	import &#123; Component, Vue &#125; from &#39;vue-property-decorator&#39;;</span><br><span class="line">	@Component(&#123;&#125;)</span><br><span class="line">	export default class App extends Vue &#123;</span><br><span class="line">	  private number: number &#x3D; 0;</span><br><span class="line">	</span><br><span class="line">	  get age(): string &#123;   &#x2F;&#x2F; 计算属性的get</span><br><span class="line">	    return &#96;I am $&#123;this.number&#125; years old&#96;;</span><br><span class="line">	  &#125;</span><br><span class="line">	  set age(value) &#123;      &#x2F;&#x2F; 计算属性的set</span><br><span class="line">	    this.number &#x3D; Number(value);</span><br><span class="line">  	  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>当点击 button 的时候会执行<code>set age(value)</code>去改变 number 的值，同时计算出新的 age 值，这样的写法等于之前的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  age: &#123;</span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`I am <span class="subst">$&#123;<span class="keyword">this</span>.number&#125;</span> years old`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function (value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.number = <span class="built_in">Number</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分享个小技巧，如果想要传参给 computed，可以令计算属性返回一个函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> foo() &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">params: any</span>) =&gt;</span> &#123;</span><br><span class="line">  	<span class="keyword">let</span> returnValue;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> returnValue; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="侦听属性-watch"><a href="#侦听属性-watch" class="headerlink" title="侦听属性 watch"></a>侦听属性 watch</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue, Watch &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  private number: number = <span class="number">0</span>;</span><br><span class="line">  @Watch(<span class="string">'number'</span>)</span><br><span class="line">  changeAge(newValue: number, <span class="attr">oldValue</span>: number)  &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`newValue: <span class="subst">$&#123;newValue&#125;</span>, oldValue: <span class="subst">$&#123;oldValue&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的写法等同于之前的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  changeAge: <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`newValue: <span class="subst">$&#123;newValue&#125;</span>, oldValue: <span class="subst">$&#123;oldValue&#125;</span>`</span>);          	</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>声明周期还是原来的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生命周期</span></span><br><span class="line">beforeCreate() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before create'</span>);</span><br><span class="line">&#125;</span><br><span class="line">created() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'created'</span>);：</span><br><span class="line">&#125;</span><br><span class="line">beforeMount() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before mount'</span>);</span><br><span class="line">&#125;</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'mounted'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="组件注册与传递-Prop"><a href="#组件注册与传递-Prop" class="headerlink" title="组件注册与传递 Prop"></a>组件注册与传递 Prop</h1><p>父组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;Son msg=<span class="string">"msg from parent"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line">	<span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">	<span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./components/Son.vue'</span>;</span><br><span class="line">	@Component(&#123;</span><br><span class="line"> 	  components: &#123; Son &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Son.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;son&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">	import &#123; Component, Prop, Vue &#125; from &#39;vue-property-decorator&#39;;</span><br><span class="line"></span><br><span class="line">	@Component</span><br><span class="line">	export default class Son extends Vue &#123;</span><br><span class="line">  		@Prop() private msg!: string;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="父子组件通信-Emit"><a href="#父子组件通信-Emit" class="headerlink" title="父子组件通信 Emit"></a>父子组件通信 Emit</h1><p>父组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;Son v-on:methodFromParent=<span class="string">"methodFromParent"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script lang=<span class="string">"ts"</span>&gt;</span><br><span class="line">	<span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line">	<span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./components/Son.vue'</span>;</span><br><span class="line">	@Component(&#123;</span><br><span class="line"> 	  components: &#123; Son &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">      methodFromParent(val: string) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'data from sub:'</span>, val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Son.vue</span></span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'methodFromParent'</span>, <span class="string">'hello my parent'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样子组件挂载好之后父组件就回被触发事件打印出<code>data from sub: hello my parent</code>。<br>也可以使用 <strong>Vue Property Decorator</strong>官方提供的 <strong>Emit</strong> 的装饰器来实现通信和传参：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Emit &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">YourComponent</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  @Emit()</span><br><span class="line">  addToCount(n: number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.count += n</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Emit(<span class="string">'reset'</span>)</span><br><span class="line">  resetCount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Emit()</span><br><span class="line">  returnValue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Emit()</span><br><span class="line">  promise() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">20</span>)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法相对于之前的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addToCount(n) &#123;</span><br><span class="line">      <span class="keyword">this</span>.count += n</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'add-to-count'</span>, n)</span><br><span class="line">    &#125;,</span><br><span class="line">    resetCount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'reset'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    returnValue() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'return-value'</span>, <span class="number">10</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    promise() &#123;</span><br><span class="line">      <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(<span class="number">20</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'promise'</span>, value)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="过滤器filters"><a href="#过滤器filters" class="headerlink" title="过滤器filters"></a>过滤器filters</h1><p>要在@Component({})中写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  filters: &#123;</span><br><span class="line">    <span class="comment">// 过滤每个分类的数量</span></span><br><span class="line">    categoryCount(index: number): number &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="依赖注入-provide-和-inject"><a href="#依赖注入-provide-和-inject" class="headerlink" title="依赖注入 provide 和 inject"></a>依赖注入 provide 和 inject</h1><p>该例子是子孙组件调用祖先组件依赖注入来达到刷新页面的效果。  </p>
<p>父组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view v-<span class="keyword">if</span>=<span class="string">"isShow"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Vue, Provide &#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  @Provide() public componentReload = <span class="keyword">this</span>.reload;</span><br><span class="line">  private isShow: boolean = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  reload() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isShow = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.isShow = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue, Inject &#125; <span class="keyword">from</span> <span class="string">"vue-property-decorator"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">     @Inject() private componentReload!: any; <span class="comment">// 祖先组件传递下来用来刷新组件用的</span></span><br><span class="line">     mounted() &#123;</span><br><span class="line">         <span class="keyword">this</span>.componentReload(); <span class="comment">//调用</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="混入对象-Mixins"><a href="#混入对象-Mixins" class="headerlink" title="混入对象 Mixins"></a>混入对象 Mixins</h1><p>在一个 ts 文件中定义 Mixins：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mixins.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Vue, Component &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"></span><br><span class="line">declare <span class="built_in">module</span> <span class="string">'vue/types/vue'</span> &#123;</span><br><span class="line">  interface Vue &#123;</span><br><span class="line">    methodFromMixins(value: number | string): <span class="keyword">void</span>;  <span class="comment">// 记得声明一下，要不然会报错 Property 'methodFromMixins' does not exist on type 'App'.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Mixins</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  public methodFromMixins(value: number | string): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'method from mixins'</span>, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在想使用 Mixins 的组件中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span>;</span><br><span class="line"><span class="keyword">import</span> mixins <span class="keyword">from</span> <span class="string">"./common/mixins"</span>;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  mixins: [mixins]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123; </span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">this</span>.methodFromMixins(<span class="string">'hello'</span>);	<span class="comment">// method from mixins hello</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用自两篇博客<br><a href="https://www.jianshu.com/p/7ed6d954164f?utm_source=oschina-app" target="_blank" rel="noopener">在 Vue 中使用 TypeScript 的一些思考（实践）</a><br><a href="https://blog.csdn.net/kaelyn_X/article/details/85019575" target="_blank" rel="noopener">使用 TypeScript 来写 Vue</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中的filters过滤器</title>
    <url>/vue%E4%B8%AD%E7%9A%84filters%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p><font color="#f40"></font><br><font color="#f40">Vue2.0以后内置过滤器都去掉了，要用filters只能自定义写。</font></p>
<h1 id="一、自定义filters过滤器"><a href="#一、自定义filters过滤器" class="headerlink" title="一、自定义filters过滤器"></a>一、自定义filters过滤器</h1><p>过滤器函数始终以<font color="#f40">表达式的值</font>作为<font color="#f40">第一个参数</font>。带引号的参数视为字符串，而不带引号的参数按表达式计算 </p>
<a id="more"></a>
<h1 id="二、局部定义的fliters"><a href="#二、局部定义的fliters" class="headerlink" title="二、局部定义的fliters"></a>二、局部定义的fliters</h1><p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; message | toUpperCase&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;.&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        filters:&#123;</span><br><span class="line">            toUpperCase(val)&#123;</span><br><span class="line">                return val.toString().toUpperCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果图:<br><img src="/vue%E4%B8%AD%E7%9A%84filters%E8%BF%87%E6%BB%A4%E5%99%A8/0.png" alt="0"></p>
<h1 id="三、可以设置多个过滤器"><a href="#三、可以设置多个过滤器" class="headerlink" title="三、可以设置多个过滤器"></a>三、可以设置多个过滤器</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; message | toUpperCase | changeColor&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;.&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&#39;hello world&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        filters:&#123;</span><br><span class="line">            toUpperCase(val)&#123;</span><br><span class="line">                return val.toString().toUpperCase();</span><br><span class="line">            &#125;,</span><br><span class="line">            changeColor(val)&#123;</span><br><span class="line">                return val.toString().replace(&#39;HELLO&#39;,&#39;hello&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果图:<br><img src="/vue%E4%B8%AD%E7%9A%84filters%E8%BF%87%E6%BB%A4%E5%99%A8/1.png" alt="1"></p>
<h1 id="四、全局定义的filter"><a href="#四、全局定义的filter" class="headerlink" title="四、全局定义的filter"></a>四、全局定义的filter</h1><h2 id="1：在main-js里定义"><a href="#1：在main-js里定义" class="headerlink" title="1：在main.js里定义:"></a>1：在main.js里定义:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.filter(&quot;定义的过滤器名字&quot;, function(val) &#123;</span><br><span class="line">  return val + &quot;aa&quot;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="2-在需要处理数据的地方调用自定义过滤器"><a href="#2-在需要处理数据的地方调用自定义过滤器" class="headerlink" title="2:在需要处理数据的地方调用自定义过滤器"></a>2:在需要处理数据的地方调用自定义过滤器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;msg|自定义的过滤器名字&#125;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue引入echarts</title>
    <url>/vue%E5%BC%95%E5%85%A5echarts/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="下载echarts"><a href="#下载echarts" class="headerlink" title="下载echarts"></a>下载echarts</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure>
<h1 id="全局引入Echarts"><a href="#全局引入Echarts" class="headerlink" title="全局引入Echarts"></a>全局引入Echarts</h1><p>在/src/main.js中加入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure>
<h1 id="创建一个图表"><a href="#创建一个图表" class="headerlink" title="创建一个图表"></a>创建一个图表</h1><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"histogramChart"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name:<span class="string">'Histogram'</span>,</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      <span class="comment">//在mounted生命周期函数中实例化echarts对象</span></span><br><span class="line">      <span class="keyword">this</span>.drawHistogarm();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      drawHistogarm()&#123;</span><br><span class="line">        <span class="comment">//初始化echarts实例</span></span><br><span class="line">        <span class="keyword">let</span> histogram = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'histogramChart'</span>))</span><br><span class="line">        <span class="keyword">let</span> option = &#123;</span><br><span class="line">          title: &#123;</span><br><span class="line">            text: <span class="string">'柱状图示例'</span>,</span><br><span class="line">            left: <span class="string">'center'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          tooltip: &#123;</span><br><span class="line">            trigger:<span class="string">'axis'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          xAxis: &#123;</span><br><span class="line">            type: <span class="string">'category'</span>,</span><br><span class="line">            data: [<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>,<span class="string">"星期日"</span>]</span><br><span class="line">          &#125;,</span><br><span class="line">          yAxis: &#123;</span><br><span class="line">            type: <span class="string">'value'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          series: [&#123;</span><br><span class="line">            name: <span class="string">'数量'</span>,</span><br><span class="line">            type: <span class="string">'bar'</span>,</span><br><span class="line">            barWidth: <span class="string">'50%'</span>,<span class="comment">//设置柱子的宽度</span></span><br><span class="line">            data: [<span class="number">204</span>,<span class="number">106</span>,<span class="number">190</span>,<span class="number">230</span>,<span class="number">100</span>,<span class="number">170</span>,<span class="number">201</span>]</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;;</span><br><span class="line">        histogram.setOption(option);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">  #histogramChart &#123;</span></span><br><span class="line"><span class="regexp">    width: 500px;</span></span><br><span class="line"><span class="regexp">    height: 500px;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<p>原文链接：<a href="https://blog.csdn.net/HH18700418030/java/article/details/96131262" target="_blank" rel="noopener">https://blog.csdn.net/HH18700418030/java/article/details/96131262</a></p>
<h1 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h1><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><p>不用再main.js中全局加载，可以在用的的组件中引入<br>import echarts from ‘echarts’</p>
<p>直接就用就好了<br>上述例子中this.$echarts 改为echarts就好了</p>
<h2 id="第二种方法（推荐）"><a href="#第二种方法（推荐）" class="headerlink" title="第二种方法（推荐）"></a>第二种方法（推荐）</h2><p>在Echarts.vue文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入基本模板</span></span><br><span class="line"><span class="keyword">let</span> echarts = <span class="built_in">require</span>(<span class="string">"echarts/lib/echarts"</span>);</span><br><span class="line"><span class="comment">// 引入饼状图组件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"echarts/lib/chart/pie"</span>);</span><br><span class="line"><span class="comment">// 引入提示框和title组件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"echarts/lib/component/tooltip"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"echarts/lib/component/legend"</span>);</span><br><span class="line"><span class="comment">//引入模型Series</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"echarts/lib/model/Series"</span>);</span><br></pre></td></tr></table></figure>
<p>使用 require 而不是 import</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue引入阿里图标库的方法css-loader以及报错解决方案</title>
    <url>/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="下载到本地"><a href="#下载到本地" class="headerlink" title="下载到本地"></a>下载到本地</h1><p>想需要的图标加入购物车，然后添加至项目中，再选择下载至本地<br><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/8.png" alt></p>
<a id="more"></a>
<p>会得到一个压缩文件夹，打开这个文件，复制里面所有 iconfont 命名的文件，在 vue 项目中新建一个文件夹存放这些文件，我这里是在<font color="#f40">assets 文件夹</font>下新建 iconfont 文件夹。<br><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/9.png" alt></p>
<h1 id="在-main-js-中引入"><a href="#在-main-js-中引入" class="headerlink" title="在 main.js 中引入"></a>在 main.js 中引入</h1><p>然后在 vue 项目的<font color="#f40">main.js</font>文件中进行引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./assets/font/iconfont.css"</span>;</span><br></pre></td></tr></table></figure>


<h1 id="安装-css-loader-依赖包"><a href="#安装-css-loader-依赖包" class="headerlink" title="安装 css-loader 依赖包"></a>安装 css-loader 依赖包</h1><p>此时，如果直接使用，会报错，所以还需要安装<font color="#f40">css-loader</font>依赖包：<br><code>npm install --save css-loader</code><br>安装完成以后，就可以直接在需要使用图标的页面直接使用了。</p>
<h1 id="使用图标"><a href="#使用图标" class="headerlink" title="使用图标"></a>使用图标</h1><p>一定要先引用<font color="#f40">iconfont 类名</font>，再使用具体的类名,否则会失效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-build"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-cuo"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-dui"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont icon-android"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果图：<br><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/10.png" alt></p>
<p>可以用 css 样式自定义具体类名图标的大小，用<font color="#f40">font-size</font> 就行，一样要加<font color="#f40">!important</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.iconfont</span><span class="selector-class">.icon-build</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：<br><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/11.png" alt></p>
<h1 id="报错解决方案"><a href="#报错解决方案" class="headerlink" title="报错解决方案"></a>报错解决方案</h1><p>用vue-cli3导入外部的iconfont.css图标样式遇到的坑:These relative modules were not found:…<br>报错截图<br><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/12.png" alt></p>
<p>原因是引入的iconfont.css 文件中的url地址没有删除掉<br>注意我这是举的是另一个例子，和上面不是一个例子，根据对应的url地址改的。<br><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/13.png" alt></p>
<p><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/14.png" alt><br>修改后：<br><img src="/vue%E5%BC%95%E5%85%A5%E9%98%BF%E9%87%8C%E5%9B%BE%E6%A0%87%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95css-loader%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/15.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue解决子组件改变父组件传入props的值警告问题</title>
    <url>/vue%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E6%94%B9%E5%8F%98%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%85%A5props%E7%9A%84%E5%80%BC%E8%AD%A6%E5%91%8A%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>子组件想要改变父组件传入的值（props） </p>
<p>例子：<br>点击按钮，改变数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 父组件代码</span><br><span class="line">&lt;hello-world :msg&#x3D;&quot;str&quot;&gt;&lt;&#x2F;hello-world&gt;</span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        str:&quot;啦啦啦&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;子组件代码</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;change&quot;&gt;改变&lt;&#x2F;button&gt;&#123;&#123; msg &#125;&#125;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;HelloWorld&#39;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: String</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    change()&#123;</span><br><span class="line">      this.msg&#x3D;&quot;已改变&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行结果<br><font color="#f40">值确实改变了，但是会有警告</font><br><img src="/vue%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E6%94%B9%E5%8F%98%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%85%A5props%E7%9A%84%E5%80%BC%E8%AD%A6%E5%91%8A%E9%97%AE%E9%A2%98/0.png" alt></p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>vue父组件props传值子组件是<font color="#f40">单向数据</font>的，子组件改变props值的话，父组件监听不到的。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>用<font color="#f40">$emit</font>自定义事件来告诉父组件变化<br>先用子组件定义事件，父组件去监听，子组件一触发父组件就能监听到。<br>改后的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 父组件 监听子组件自定义的change-props事件</span><br><span class="line"> &lt;hello-world :msg&#x3D;&quot;str&quot; @change-props&#x3D;&quot;changeLate&quot;&gt;&lt;&#x2F;hello-world&gt;</span><br><span class="line">  data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            str:&quot;啦啦啦&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeLate(data) &#123;</span><br><span class="line">        this.str &#x3D; data;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 子组件  改变props值时，自定义change-props事件，把要改变成的数据传入事件中</span><br><span class="line">&lt;button @click&#x3D;&quot;change&quot;&gt;改变&lt;&#x2F;button&gt;&#123;&#123; msg &#125;&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;HelloWorld&#39;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      msg: String</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      change()&#123;</span><br><span class="line">        let late&#x3D;&quot;已改变&quot;;</span><br><span class="line">        this.$emit(&quot;change-props&quot;,late); &#x2F;&#x2F;自定义事件</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>运行结果<br>完美解决<br><img src="/vue%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E6%94%B9%E5%8F%98%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%85%A5props%E7%9A%84%E5%80%BC%E8%AD%A6%E5%91%8A%E9%97%AE%E9%A2%98/1.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的路由复用和导航守卫</title>
    <url>/vue%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%8D%E7%94%A8%E5%92%8C%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、路由复用"><a href="#一、路由复用" class="headerlink" title="一、路由复用"></a>一、路由复用</h1><p>路由复用要在相对应的路由中添加的是在<font color="#f40">components</font>里面，不是children。<br>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">"/"</span>,</span><br><span class="line">    name: <span class="string">"Home"</span>,</span><br><span class="line">    components: &#123; <span class="comment">//这里是components不是component</span></span><br><span class="line">      <span class="keyword">default</span>: Home,</span><br><span class="line">      <span class="string">"Delivery"</span>: Delivery,</span><br><span class="line">      <span class="string">"History"</span>: History,</span><br><span class="line">      <span class="string">"OrderingGuide"</span>: OrderingGuide</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>App组件部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-row <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;</span><br><span class="line">&lt;router-view&gt;&lt;<span class="regexp">/router-view&gt;    /</span><span class="regexp">/没有指定路由，当访问哪个路由显示哪个相对应的组件</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-row&gt;</span><br><span class="line">&lt;el-row&gt;</span><br><span class="line">&lt;el-col :md=<span class="string">"8"</span>&gt;</span><br><span class="line">  &lt;router-view name=<span class="string">"Delivery"</span>&gt;&lt;<span class="regexp">/router-view&gt;  /</span><span class="regexp">/ 这三个有指定路由，会显示指定的组件</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-col&gt;</span><br><span class="line">&lt;el-col :md=<span class="string">"8"</span>&gt;</span><br><span class="line">  &lt;router-view name=<span class="string">"History"</span>&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-col&gt;</span><br><span class="line">&lt;el-col :md=<span class="string">"8"</span>&gt;</span><br><span class="line">  &lt;router-view name=<span class="string">"OrderingGuide"</span>&gt;&lt;<span class="regexp">/router-view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-col&gt;</span><br><span class="line">&lt;<span class="regexp">/el-row&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行结果图：<br><img src="/vue%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%8D%E7%94%A8%E5%92%8C%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB/0.png" alt="0.png"></p>
<p><img src="/vue%E7%9A%84%E8%B7%AF%E7%94%B1%E5%A4%8D%E7%94%A8%E5%92%8C%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB/1.png" alt="1.png"></p>
<font color="#f40">
    解释一下上面这个例子：
    Home组件对应的路径是"/"，也就是根路径。App组件是首页组件，因为只有Home组件有components的配置的复用组件，所以只有在根路径才会显示那三个复用的路由组件。也就是上面运行结果表现出来的。
</font>

<h1 id="二、导航守卫"><a href="#二、导航守卫" class="headerlink" title="二、导航守卫"></a>二、导航守卫</h1><p>记住参数或查询的改变并不会触发进入/离开的导航守卫。你可以通过观察 $route 对象来应对这些变化，或使用 beforeRouteUpdate 的组件内守卫。</p>
<h2 id="（1）全局前置守卫"><a href="#（1）全局前置守卫" class="headerlink" title="（1）全局前置守卫"></a>（1）全局前置守卫</h2><p>你可以使用 router.beforeEach 注册一个全局前置守卫：<br><font color="#f40">在配置完router后面注册router.beforeEach。</font></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 等待中。<br>每个守卫方法接收三个参数：</p>
<ul>
<li>to: Route: 即将要进入的目标 路由对象</li>
<li>from: Route: 当前导航正要离开的路由</li>
<li>next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。<ul>
<li>next(): <font color="#f40">进行管道中的下一个钩子</font>。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</li>
<li>next(false): <font color="#f40">中断当前的导航</font>。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</li>
<li>next(‘/‘) 或者 next({ path: ‘/‘ }): <font color="#f40">跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航</font>。你可以向 next 传递任意位置对象，且<font color="#f40">允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项</font>。</li>
<li>next(error):  如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。<br>确保要调用 next 方法，否则钩子就不会被 resolved。</li>
</ul>
</li>
</ul>
<h2 id="（2）全局后置钩子"><a href="#（2）全局后置钩子" class="headerlink" title="（2）全局后置钩子"></a>（2）全局后置钩子</h2><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子<font color="#f40">不会接受 next 函数也不会改变导航本身</font>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;   <span class="comment">// 没有next参数</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="（3）路由独享的守卫"><a href="#（3）路由独享的守卫" class="headerlink" title="（3）路由独享的守卫"></a>（3）路由独享的守卫</h2><p>你可以在<font color="#f40">路由配置上直接定义</font> beforeEnter 守卫：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这些守卫与全局前置守卫的方法参数是一样的。</p>
<h2 id="（4）组件内的守卫"><a href="#（4）组件内的守卫" class="headerlink" title="（4）组件内的守卫"></a>（4）组件内的守卫</h2><p>最后，你可以在路由组件内直接定义以下路由导航守卫：</p>
<ul>
<li>beforeRouteEnter</li>
<li>beforeRouteUpdate (2.2 新增)</li>
<li>beforeRouteLeave<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">beforeRouteEnter 守卫 不能 访问 <span class="keyword">this</span>，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</span><br><span class="line">不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注意<br><font color="#f40">beforeRouteEnter 是支持给 next 传递回调的唯一守卫</font>。对于 <font color="#f40">beforeRouteUpdate 和 beforeRouteLeave</font> 来说，<font color="#f40">this 已经可用了</font>，所以不支持传递回调，因为没有必要了。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="comment">// just use `this`</span></span><br><span class="line">  <span class="keyword">this</span>.name = to.params.name</span><br><span class="line">  next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这个离开守卫通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 <font color="#f40">next(false)</font> 来取消。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = <span class="built_in">window</span>.confirm(<span class="string">'Do you really want to leave? you have unsaved changes!'</span>)</span><br><span class="line">  <span class="keyword">if</span> (answer) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="（5）完整的导航解析流程"><a href="#（5）完整的导航解析流程" class="headerlink" title="（5）完整的导航解析流程"></a>（5）完整的导航解析流程</h2><ol>
<li>导航被触发。</li>
<li>在失活的组件里调用离开守卫。</li>
<li>调用全局的 <font color="#f40">beforeEach</font> 守卫。</li>
<li>在重用的组件里调用 <font color="#f40">beforeRouteUpdate</font> 守卫 (2.2+)。</li>
<li>在路由配置里调用 <font color="#f40">beforeEnter</font>。</li>
<li>解析异步路由组件。</li>
<li>在被激活的组件里调用 <font color="#f40">beforeRouteEnter</font>。</li>
<li>调用全局的 <font color="#f40">beforeResolve</font> 守卫 (2.5+)。</li>
<li>导航被确认。</li>
<li>调用全局的 <font color="#f40">afterEach</font> 钩子。     </li>
<li>用创建好的实例调用 beforeRouteEnter 守卫中传给 <font color="#f40">next</font> 的回调函数。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue项目实现github-pages的预览</title>
    <url>/vue%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0github-pages%E7%9A%84%E9%A2%84%E8%A7%88/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><p>目前使用的是vue-cli4.0</p>
<h1 id="1、打包vue-项目"><a href="#1、打包vue-项目" class="headerlink" title="1、打包vue 项目"></a>1、打包vue 项目</h1><p>vue项目：<br>现在github上传建一个github.io仓库，例如xxx.github.io，并再创建一个gh-pages分支。  </p>
<p>在本地先把本地仓库上传到远程仓库的master分支。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 远程仓库地址</span><br><span class="line">git add .</span><br><span class="line">git commit -m&quot;&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>再在命令行输入打包命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>，生成了dist文件夹：<br>打包完成。  </p>
<h2 id="1-1、打包常见问题1——项目资源无法加载"><a href="#1-1、打包常见问题1——项目资源无法加载" class="headerlink" title="1.1、打包常见问题1——项目资源无法加载"></a>1.1、打包常见问题1——项目资源无法加载</h2><p>打开刚刚打包好的dist文件夹，浏览器打开index.html  </p>
<p>发现该页面是空白的，打开控制台发现  </p>
<p>这里看到index.html文件中<font color="#f40">没有加载任何css、js文件</font>。</p>
<h2 id="1-2、解决方法——修改config文件"><a href="#1-2、解决方法——修改config文件" class="headerlink" title="1.2、解决方法——修改config文件"></a>1.2、解决方法——修改config文件</h2><p>打开项目根目录vue.config.js文件，进行如下修改：<br>即将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">publicPath: &#39;&#x2F;&#39;</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">publicPath: &#39;.&#x2F;&#39;</span><br></pre></td></tr></table></figure>
<p>重新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>vue项目的根目录下会生成dist文件夹，会把文件打包进去。<br>一般来说，直接打开dist文件下的index.html就可以直接看到效果了。</p>
<h1 id="2、上传vue-项目并预览"><a href="#2、上传vue-项目并预览" class="headerlink" title="2、上传vue 项目并预览"></a>2、上传vue 项目并预览</h1><p>在dist文件目录下，创建另一个本地仓库，上传到远程仓库的gh-pages分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 远程仓库地址</span><br><span class="line">git add .</span><br><span class="line">git commit -m&quot;&quot;</span><br><span class="line">git push -u origin master:gh-pages</span><br></pre></td></tr></table></figure>

<h1 id="3、其他问题"><a href="#3、其他问题" class="headerlink" title="3、其他问题"></a>3、其他问题</h1><ol>
<li><p>用mock模拟数据，无法使用。解决方案：创建一个.json文件把数据写死，然后引用这个文件。</p>
</li>
<li><p>对于使用Vue-cli3.0构建的项目出现的样式失效问题，解决方案：在vue.config.js中设置baseUrl: ‘/staff/‘。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端如何使用RSA加密和解密</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RSA%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="一、用openssl工具生成RSA的公钥和私钥"><a href="#一、用openssl工具生成RSA的公钥和私钥" class="headerlink" title="一、用openssl工具生成RSA的公钥和私钥"></a>一、用openssl工具生成RSA的公钥和私钥</h1><p><a href="https://oomake.com/download/openssl" target="_blank" rel="noopener">openssl下载地址</a><br>下载完openssl工具并安装之后，打开openssl文件夹下的bin文件夹，执行<font color="#f40">openssl.exe</font>程序：<br>如图：<br><img src="/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RSA%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/1.png" alt="1.png"></p>
<a id="more"></a>
<h2 id="（1）生成RSA私钥"><a href="#（1）生成RSA私钥" class="headerlink" title="（1）生成RSA私钥"></a>（1）生成RSA私钥</h2><p>打开openssl.exe 后输入<font color="#f40">genrsa -out rsa_private_key.pem 1024</font>   回车会看到结果<br><img src="/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RSA%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/2.png" alt="2.png"></p>
<p>这时候bin文件夹中看到一个文件名为<font color="#f40">rsa_private_key.pem</font>的文件，用记事本方式打开它，可以看到—–BEGIN RSA PRIVATE KEY—–开头，—–END RSA PRIVATE KEY—–结尾的没有换行的字符串，这个就是原始的私钥。每次使用<font color="#f40">genrsa -out rsa_private_key.pem 1024</font>命令，私钥都会变的。<br><img src="/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RSA%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/3.png" alt="3.png"></p>
<h2 id="（2）生成RSA公钥"><a href="#（2）生成RSA公钥" class="headerlink" title="（2）生成RSA公钥"></a>（2）生成RSA公钥</h2><p>输入命令：<font color="#f40">rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</font>，并回车，得到生成成功的结果<br><img src="/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RSA%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/4.png" alt="4.png"></p>
<p>这时候可以在bin文件夹中看到一个文件名为rsa_public_key.pem的文件，用记事本方式打开它，可以看到—–BEGIN PUBLIC KEY—–开头，—–END PUBLIC KEY—–结尾的没有换行的字符串，这个就是公钥。<br><img src="/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RSA%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/5.png" alt="5.png"></p>
<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><font color="#f40">必须先生成私钥再生成公钥才行。</font></p>
<h1 id="二、用jsencrypt来进行RSA的加密和解密"><a href="#二、用jsencrypt来进行RSA的加密和解密" class="headerlink" title="二、用jsencrypt来进行RSA的加密和解密"></a>二、用jsencrypt来进行RSA的加密和解密</h1><p>这次我是用的React使用的jsencrypt进行的操作。<br><font color="#f40">使用场景</font></p>
<ul>
<li>需要在本地存储一些标志位，安全问题</li>
<li>用户登录密码的加密<h2 id="（1）安装jsencrypt"><a href="#（1）安装jsencrypt" class="headerlink" title="（1）安装jsencrypt"></a>（1）安装jsencrypt</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install jsencrypt --save</span><br></pre></td></tr></table></figure>
<h2 id="（2）生成一对RSA公钥和私钥"><a href="#（2）生成一对RSA公钥和私钥" class="headerlink" title="（2）生成一对RSA公钥和私钥"></a>（2）生成一对RSA公钥和私钥</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> JSEncrypt <span class="keyword">from</span> <span class="string">'jsencrypt'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私钥内容</span></span><br><span class="line"><span class="keyword">const</span> PRIV_KEY = <span class="string">`MIICXQIBAAKBgQDsNBA0WAtqWTNan3YrP20wbeIivc/dsXF0GBGLj3LmYrlPfOCa</span></span><br><span class="line"><span class="string">7sr0yzzzSmeb9iloig8C8Ao/swjw6iUdlcPV/pfY/FiFTTMiUNFLF503dvKkPRIf</span></span><br><span class="line"><span class="string">CLgnGb/5ZGunm7u/2W4ForUW1LsphlwUGbRmIOIuMUwXo6c8FR/4GhmqPwIDAQAB</span></span><br><span class="line"><span class="string">AoGBAOBwhClIs+gkxEBLH1zu0tDeyK6cT+Tm09gtepZzAwnZKx5VmZJ+bsl2SP8g</span></span><br><span class="line"><span class="string">ZxzyJdyYurTe484tT8SjqArZoQ9lP6Qs6ngH80WPg9O0dHFF8QD1bHFG2IfSlS40</span></span><br><span class="line"><span class="string">p5Tqlc2WT6RJgIK4NekowC7tPu7PONbf67CUCv2Fi0s3zpopAkEA/+lyaJNyVpA4</span></span><br><span class="line"><span class="string">Bd7mb5tvk8VmcPhHdpNkVuP29Glc74P5+VdsvNvDgo/StYooi8TscDNcIjBGLtom</span></span><br><span class="line"><span class="string">gljLARBqAwJBAOxI4SeYo6Vak8Eib83QiHEcDdM3HxEmzzRZkQJohipZwNGEqCDV</span></span><br><span class="line"><span class="string">WWsrXL2upUOT16xzOElZmnpOsxkRA3llqBUCQQD7AeX2ztCyOSjKEVSiman6Hf+Z</span></span><br><span class="line"><span class="string">xNyLYIxlcZnzJzlBsIhKWcbNAx0j/Z+l8opMdW2Xq7ity/26zLxC04biV1AzAkAJ</span></span><br><span class="line"><span class="string">BUdDQbqNp4WYi/4Et39eAhotBB+1gevLLdgxZVgp6b9IwG3CwyJkywUBYNeCWvSS</span></span><br><span class="line"><span class="string">6tstQbR6EuMXg+TED7N5AkA2xfsjd4z6jG1C6n8GpTo9S+Sz8obk2QUH0EqsN1E6</span></span><br><span class="line"><span class="string">Fg3nV/1B8xdPlhWhy77uC5UEDuJ57+5hj27jKf01CmU/`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥内容</span></span><br><span class="line"><span class="keyword">const</span> PUB_KEY = <span class="string">`MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsNBA0WAtqWTNan3YrP20wbeIi</span></span><br><span class="line"><span class="string">vc/dsXF0GBGLj3LmYrlPfOCa7sr0yzzzSmeb9iloig8C8Ao/swjw6iUdlcPV/pfY</span></span><br><span class="line"><span class="string">/FiFTTMiUNFLF503dvKkPRIfCLgnGb/5ZGunm7u/2W4ForUW1LsphlwUGbRmIOIu</span></span><br><span class="line"><span class="string">MUwXo6c8FR/4GhmqPwIDAQAB`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> encrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    encrypt.setPublicKey(PUB_KEY);</span><br><span class="line">    <span class="keyword">const</span> encrypted = encrypt.encrypt(text);</span><br><span class="line">    <span class="keyword">return</span> encrypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私钥解密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> decrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    decrypt.setPrivateKey(PRIV_KEY);</span><br><span class="line">    <span class="keyword">const</span> decrypted = decrypt.decrypt(text);</span><br><span class="line">    <span class="keyword">return</span> decrypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(encrypt(<span class="string">"我是一段数据"</span>))  <span class="comment">// 加密</span></span><br><span class="line"><span class="built_in">console</span>.log(decrypt(encrypt(<span class="string">"我是一段数据"</span>)))  <span class="comment">// 解密</span></span><br></pre></td></tr></table></figure>
运行结果：<br><img src="/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8RSA%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/6.png" alt="6.png"></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>数据可视化工具对比</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="常见到的数据可视化工具"><a href="#常见到的数据可视化工具" class="headerlink" title="常见到的数据可视化工具"></a>常见到的数据可视化工具</h1><ul>
<li><a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">Echarts</a> JavaScript 实现的开源可视化库</li>
<li><a href="https://antv.gitee.io/zh" target="_blank" rel="noopener">AntV</a> 蚂蚁集团数据可视化团队</li>
<li><a href="https://d3js.org/" target="_blank" rel="noopener">D3.js</a> 将强大的可视化组件和数据驱动的 DOM 操作方法完美结合。</li>
<li><a href="https://vega.github.io/vega/" target="_blank" rel="noopener">vega</a>  华盛顿大学计算机学院数据交互实验室（IDL）开发的一套交互图形语法</li>
<li><a href="https://www.highcharts.com.cn/" target="_blank" rel="noopener">HighCharts</a> 纯 JavaScript 编写的图表库</li>
<li><a href="https://www.finebi.com/?utm_source=media&utm_medium=zhihu" target="_blank" rel="noopener">FineBI</a>  新一代自助大数据分析的BI软件<a id="more"></a>

</li>
</ul>
<p>以上几种中<code>商用收费</code>的有<code>HighCharts</code>和<code>FineBI</code>，不考虑使用这两款产品，以下的对比忽略这两个;</p>
<h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><ol>
<li>Echarts 兼容 IE6 及以上的所有主流浏览器，同样支持移动端的缩放和手势操作。</li>
<li>D3.js 兼容IE9 及以上的所有主流浏览器，对于移动端的兼容性也同上。</li>
<li>Antv 不详</li>
</ol>
<h1 id="渲染方式"><a href="#渲染方式" class="headerlink" title="渲染方式"></a>渲染方式</h1><p>第三方库都是基于这两种浏览器图形渲染技术实现的： Canvas 和 SVG 。下面是它们的区别：</p>
<table>
<thead>
<tr>
<th align="center">SVG</th>
<th align="center">Canvas</th>
</tr>
</thead>
<tbody><tr>
<td align="center">不依赖分辨率</td>
<td align="center">依赖分辨率</td>
</tr>
<tr>
<td align="center">支持事件处理器</td>
<td align="center">不支持事件处理器</td>
</tr>
<tr>
<td align="center">最适合带有大型渲染区域的应用程序(如地图)</td>
<td align="center">弱的文本渲染能力</td>
</tr>
<tr>
<td align="center">复杂度高会减慢渲染速度(任何过度使用DOM的应用都不快)</td>
<td align="center">能够以.png或.jpg格式保存结果图像</td>
</tr>
<tr>
<td align="center">不适合游戏应用</td>
<td align="center">最适合图像密集型的游戏</td>
</tr>
<tr>
<td align="center">可以为某个元素附加JavaScript事件处理器。在SVG 中，每个被绘制的图形均被视为对象。</td>
<td align="center">一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景都需要重新绘制。</td>
</tr>
</tbody></table>
<p>SVG渲染:</p>
<ul>
<li>vega</li>
<li>D3.js</li>
</ul>
<p>ECharts v4.0 发布了 SVG 渲染器，也可以支持SVG渲染。<br>AntV中G2既支持SVG渲染也支持Canvas渲染</p>
<h1 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h1><h3 id="1-Ecahrts"><a href="#1-Ecahrts" class="headerlink" title="1. Ecahrts"></a>1. Ecahrts</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul>
<li>易上手，文档详细</li>
<li>移动端优化，交互和布局适配，按需打包</li>
<li>配置项驱动，三级个性化图表样式管理</li>
<li>丰富的图表类型，覆盖主流常规的统计图表</li>
<li>深度的交互式数据探索</li>
<li>地理特效（百度迁徙，百度人气，公交轨迹等效果）</li>
</ul>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul>
<li>复杂关系型图表比较难定制</li>
<li>灵活性上不如 Vega 等基于图形语法的类库</li>
</ul>
<h3 id="2-AntV"><a href="#2-AntV" class="headerlink" title="2. AntV"></a>2. AntV</h3><h4 id="AntV分类："><a href="#AntV分类：" class="headerlink" title="AntV分类："></a>AntV分类：</h4><ul>
<li>G2 强大的语义化图表语法类库 （主要用到的）</li>
<li>F2 移动可视化方案</li>
<li>G6 提供了基本的网图和树图功能，并支持多种内置布局</li>
<li>X6 图编辑引擎</li>
<li>L7 地理空间数据可视化</li>
<li>等等</li>
</ul>
<h4 id="G2优点："><a href="#G2优点：" class="headerlink" title="G2优点："></a>G2优点：</h4><ul>
<li>数据处理能力、便利的扩展方式和强大交互能力；</li>
<li>可以按需加载</li>
<li>支持canvas和svg</li>
</ul>
<h4 id="G2缺点"><a href="#G2缺点" class="headerlink" title="G2缺点:"></a>G2缺点:</h4><ul>
<li>文档说明有点简略了</li>
<li>需要学习相对应的语法，学习成本相对来说有点高</li>
</ul>
<h3 id="3-Vega"><a href="#3-Vega" class="headerlink" title="3. Vega"></a>3. Vega</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h4><ul>
<li>完全基于 JSON 语法，提供从数据到图形的映射规则</li>
<li>支持常见的交互语法</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><ul>
<li>没有中文文档</li>
<li>复杂的语法设计，使用和学习成本很高</li>
</ul>
<h1 id="Echarts按需加载"><a href="#Echarts按需加载" class="headerlink" title="Echarts按需加载"></a>Echarts按需加载</h1><p>5.0以后版本按需加载的方式是<code>import</code>，4.9版本是使用<code>require</code>进行按需加载的<br>以下例子都是按照饼状图为例</p>
<h3 id="5-0版本"><a href="#5-0版本" class="headerlink" title="5.0版本"></a>5.0版本</h3><p>按需加载的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts/core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  TitleComponent,</span><br><span class="line">  TooltipComponent,</span><br><span class="line">  LegendComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  PieChart</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/charts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  CanvasRenderer</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/renderers'</span>;</span><br><span class="line"></span><br><span class="line">echarts.use(</span><br><span class="line">  [TitleComponent, TooltipComponent, LegendComponent, PieChart, CanvasRenderer]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>TypeScript版按需加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">'echarts/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BarChart,</span><br><span class="line">    <span class="comment">// 系列类型的定义后缀都为 SeriesOption</span></span><br><span class="line">    BarSeriesOption,</span><br><span class="line">    LineChart,</span><br><span class="line">    LineSeriesOption</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/charts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    TitleComponent,</span><br><span class="line">    <span class="comment">// 组件类型的定义后缀都为 ComponentOption</span></span><br><span class="line">    TitleComponentOption,</span><br><span class="line">    GridComponent,</span><br><span class="line">    GridComponentOption</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    CanvasRenderer</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/renderers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 ComposeOption 来组合出一个只有必须组件和图表的 Option 类型</span></span><br><span class="line">type ECOption = echarts.ComposeOption&lt;</span><br><span class="line">  BarSeriesOption | LineSeriesOption | TitleComponentOption | GridComponentOption</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册必须的组件</span></span><br><span class="line">echarts.use(</span><br><span class="line">    [TitleComponent, TooltipComponent, GridComponent, BarChart, CanvasRenderer]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> option: ECOption = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-9版本"><a href="#4-9版本" class="headerlink" title="4.9版本"></a>4.9版本</h3><p>按需加载的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts/lib/echarts'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/chart/pie'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/tooltip'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/title'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"echarts/lib/component/legend"</span>);</span><br></pre></td></tr></table></figure>
<p>5.0.2和4.9.0按需加载前后对比</p>
<table>
<thead>
<tr>
<th align="center">版本</th>
<th align="center">未按需加载</th>
<th align="center">按需加载</th>
<th align="center">节省空间比例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5.0.2</td>
<td align="center">2.92MB</td>
<td align="center">1.09MB</td>
<td align="center">63%</td>
</tr>
<tr>
<td align="center">4.9.0</td>
<td align="center">2.55MB</td>
<td align="center">0.91MB</td>
<td align="center">64%</td>
</tr>
</tbody></table>
<h3 id="5-0和4-9版本地图用法"><a href="#5-0和4-9版本地图用法" class="headerlink" title="5.0和4.9版本地图用法"></a>5.0和4.9版本地图用法</h3><p>4.9使用地图的方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/map/js/china.js'</span>;</span><br><span class="line"><span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'iphone'</span>,</span><br><span class="line">          type: <span class="string">'map'</span>,</span><br><span class="line">          mapType: <span class="string">'china'</span>,</span><br><span class="line">          ...</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5.0中移除了内置的 geoJSON（原先在 echarts/map 文件夹下），如果使用者仍然需要他们，可以去从老版本中得到（下载文件中的map文件，引入本地），或者自己寻找更合适的数据然后通过 registerMap 接口注册到 ECharts 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"><span class="keyword">import</span> chinaJson <span class="keyword">from</span> <span class="string">"./china.json"</span>; <span class="comment">// 引入中国地图数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line">echarts.registerMap(<span class="string">'china'</span>, chinaJson);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'iphone'</span>,</span><br><span class="line">          type: <span class="string">'map'</span>,</span><br><span class="line">          map: <span class="string">'china'</span>,</span><br><span class="line">          ...</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Echarts</tag>
        <tag>AntV</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器的加载机制以及监听加载的事件</title>
    <url>/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E7%9B%91%E5%90%AC%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>


<h1 id="浏览器如何进行加载、解析、渲染？"><a href="#浏览器如何进行加载、解析、渲染？" class="headerlink" title="浏览器如何进行加载、解析、渲染？"></a>浏览器如何进行加载、解析、渲染？</h1><ol>
<li>用户访问网页，DNS服务器（<code>域名解析</code>系统）会根据用户提供的域名查找对应的IP地址，找到后，系统会向对应IP地址的网络服务器发送一个http请求。</li>
<li>网络服务器解析请求，并发送请求给数据库服务器。</li>
<li>数据库服务器将请求的资源返回给网络服务器，网络服务器解析数据，并生成html文件，放入<code>http response</code>中，返回给浏览器。</li>
<li>浏览器<code>解析 http response</code>。</li>
<li>浏览器解析 http response后，需要下载html文件，以及html文件内包含的外部引用文件，及文件内涉及的图片或者多媒体文件。<br>　<code>解析html 构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</code><a id="more"></a>
<img src="/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E7%9B%91%E5%90%AC%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%BA%8B%E4%BB%B6/1.png" alt="img"></li>
</ol>
<p>解析：</p>
<ol>
<li>将HTML构建成一个DOM树。</li>
<li>将CSS解析成CSS去构造CSSOM树( CSSOM = CSS Object Model CSS对象模型)</li>
<li>根据<code>DOM树</code>和<code>CSSOM</code>来构造 <code>Rendering Tree（渲染树）</code>。注意：Rendering Tree 渲染树并<code>不等同于</code> DOM 树，因为一些像 Header 或 display:none 的东西就没必要放在渲染树中了。</li>
<li>有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。</li>
<li>下一步操作称之为Layout，顾名思义就是计算出每个节点在屏幕中的位置 layout render tree。</li>
<li>再下一步就是<code>绘制</code>，即遍历render树，并使用浏览器UI后端层绘制每个节点。</li>
</ol>
<p>性能优化中重绘、重排：<br>（1）<code>Reflow（回流/重排</code>）：当它发现了某个部分发生了变化影响了布局，渲染树需要重新计算。<br>（2）<code>Repaint（重绘</code>）：改变了某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的repaint，根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排；</p>
<p><code>Reflow要比Repaint更花费时间</code>，也就<code>更影响性能</code>。所以在写代码的时候，要尽量避免过多的Reflow。</p>
<h1 id="监听浏览器加载的事件"><a href="#监听浏览器加载的事件" class="headerlink" title="监听浏览器加载的事件"></a>监听浏览器加载的事件</h1><ul>
<li>DOMContentLoaded<br>触发时间：页面dom加载完成触发，无需等待后续图片等资源</li>
<li>onload<br>触发时间：当浏览器加载完成之后触发，load一定在DOMContentLoaded之后触发。</li>
</ul>
<p>二者的区别</p>
<p>DOM文档加载的步骤为  </p>
<ol>
<li>解析HTML结构。</li>
<li>加载外部脚本和样式表文件。</li>
<li>解析并执行脚本代码。</li>
<li><code>DOM树构建完成。//DOMContentLoaded</code></li>
<li>加载图片等外部文件。</li>
<li><code>页面加载完毕。//load</code></li>
</ol>
<blockquote>
<p>部分内容参考自：<a href="https://blog.csdn.net/baidu_30668495/article/details/83069761?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160704333019195265145954%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160704333019195265145954&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-3-83069761.pc_search_result_cache&utm_term=%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6&spm=1018.2118.3001.4449" target="_blank" rel="noopener">浏览器页面加载解析渲染机制</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自制简易的localStorage和sessionStorage的封装库</title>
    <url>/%E8%87%AA%E5%88%B6%E7%AE%80%E6%98%93%E7%9A%84localStorage%E5%92%8CsessionStorage%E7%9A%84%E5%B0%81%E8%A3%85%E5%BA%93/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>该封装库只是对localStorage和sessionStorage进行的简易封装。<br>优点：</p>
<ul>
<li>对localStorage和sessionStorage的操作更能加便捷。</li>
</ul>
<p>缺点：</p>
<ul>
<li>因为使用的JSON.parse和JSON.stringify，所以存取数据如果为对象并且对象中的值为undefined、function等会照成数据丢失。</li>
</ul>
<h1 id="封装的代码"><a href="#封装的代码" class="headerlink" title="封装的代码"></a>封装的代码</h1><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Store</span>(<span class="params">webStorage</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (webStorage !== <span class="string">"localStorage"</span> &amp;&amp; webStorage !== <span class="string">"sessionStorage"</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">` invalid parameter, parameter should be localStorage or sessionStorage`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.storage = webStorage === <span class="string">"localStorage"</span> ? <span class="built_in">window</span>.localStorage : <span class="built_in">window</span>.sessionStorage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>key  要获取的key值的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.getItem = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.storage.getItem(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>key  要新建的数据的key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String,Object,Array&#125;</span> </span>val  要新建的数据的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.setItem = <span class="function"><span class="keyword">function</span> (<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.storage.setItem(key, <span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除某一项数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>key 要删除key值的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.removeItem = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.storage.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                state: <span class="number">1</span>,</span><br><span class="line">                message: <span class="string">`删除失败，没有key值为<span class="subst">$&#123;key&#125;</span>字段`</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.storage.removeItem(key);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            state: <span class="number">0</span>,</span><br><span class="line">            message: <span class="string">"删除成功"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除所有数据</span></span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Store;</span><br></pre></td></tr></table></figure>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入webStorage文件</span></span><br><span class="line"><span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">"../utils/webStorage.js"</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化Store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Store(<span class="string">"localStorage"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个key值为www，value值为123的localStorage数据</span></span><br><span class="line">store.setItem(<span class="string">"www"</span>,<span class="number">123</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取key值为www的数据</span></span><br><span class="line">store.getItem(<span class="string">"www"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除key值为www的数据</span></span><br><span class="line">store.removeItem(<span class="string">"www"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除所有数据</span></span><br><span class="line">store.clear();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>antd-mobile中form表单中的rc-form</title>
    <url>/%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84rc-form/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/bai.js"></script>

<p>antd mobile 的form表单是InputItem<br>如图：<br><img src="/%E8%A1%A8%E5%8D%95%E4%B8%AD%E7%9A%84rc-form/1.png" alt="1.png"></p>
<h1 id="rc-form"><a href="#rc-form" class="headerlink" title="rc-form"></a>rc-form</h1><a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>rc-form是一个<font color="#f40">将输入框变为受控组件的库</font>，也是一个<font color="#f40">React的高阶form组件</font>。它集合了对于输入框的各种方法，可以使我们方便的控制输入框的状态。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>基本使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createForm &#125; <span class="keyword">from</span> <span class="string">'rc-form'</span>;</span><br><span class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">()</span>=&gt;</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createForm()(Form);</span><br></pre></td></tr></table></figure>

<p>如果想要能够使用porps.history.push()进行路由跳转的话，要使用withRouter()，要使用一下写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createForm &#125; <span class="keyword">from</span> <span class="string">'rc-form'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">()</span>=&gt;</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createForm()(withRouter(Form));</span><br></pre></td></tr></table></figure>

<p>如果在同一个js文件中，当做子组件时，要再次赋值一下，再使用新的赋值的组件，写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createForm &#125; <span class="keyword">from</span> <span class="string">'rc-form'</span>;</span><br><span class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">()</span>=&gt;</span>&#123;...&#125;</span><br><span class="line"><span class="keyword">const</span> Form1 = createForm()(Form);  <span class="comment">//赋值一下</span></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Form1</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent;</span><br></pre></td></tr></table></figure>

<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="validateFields"><a href="#validateFields" class="headerlink" title="validateFields"></a>validateFields</h2><p><font color="#f40">validateFields([fieldNames: string[]],[options: object],callback(errors, values)) =&gt; void </font>        校验并获取一组输入域的值与 Error，若 fieldNames 参数为空，则校验全部组件。</p>
<h2 id="getFieldsValue"><a href="#getFieldsValue" class="headerlink" title="getFieldsValue"></a>getFieldsValue</h2><p><font color="#f40">getFieldsValue( [fieldNames: string[]] )</font>     <font color="#f40">获取一组控件的值</font>，若 fieldNames <font color="#f40">参数为空</font>，则<font color="#f40">获取全部组件</font>。</p>
<h2 id="getFieldsError"><a href="#getFieldsError" class="headerlink" title="getFieldsError"></a>getFieldsError</h2><p><font color="#f40">getFieldsError( [names: string[]] ) </font>         获取一组输入控件的 Error ，如不传入参数，则<font color="#f40">获取全部组件的 Error</font>。</p>
<h2 id="getFieldProps"><a href="#getFieldProps" class="headerlink" title="getFieldProps"></a>getFieldProps</h2><p><font color="#f40">getFieldProps( name,options )</font>              <font color="#f40">name用于为控件绑定名称(key)</font>，及控件的一些默认配置。<br>其中<font color="#f40">options参数</font>简单说两个 <font color="#f40">initialValue</font>和 <font color="#f40">validate</font>，<font color="#f40">initialValue</font>是控件的<font color="#f40">默认初始值绑定在name上</font>；<br><font color="#f40">validate</font>中有<font color="#f40">trigger</font>和<font color="#f40">rules</font>，trigger是校验触发的时机，可以是onBlur或者onChange等默认是onChange，<font color="#f40">rules</font>是对输入框的内容做一些限制，比如是否必须输入(require)，最大(max)最小(min)长度等,也可以<font color="#f40">自定义限制(validator：function(rule, value, callback))</font>。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>这是我在项目中的一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line">import &#123; withRouter &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; List, InputItem, Button, WingBlank, WhiteSpace, Picker, Toast &#125; from &#39;antd-mobile&#39;;</span><br><span class="line">import VerificationCode from &quot;..&#x2F;..&#x2F;component&#x2F;verificationCode&quot;; &#x2F;&#x2F;验证码组件</span><br><span class="line">import &#123; createForm &#125; from &#39;rc-form&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const Form &#x3D; (props) &#x3D;&gt; &#123;</span><br><span class="line">    const [password, setPassword] &#x3D; useState(&quot;&quot;);</span><br><span class="line">    const [userType, setUserType] &#x3D; useState([&quot;0&quot;]);    &#x2F;&#x2F;用户类型，默认是1即是老板的选项</span><br><span class="line">    const [canvasCode, setCanvasCode] &#x3D; useState(&quot;&quot;); &#x2F;&#x2F;canvas生成的验证码</span><br><span class="line">    &#x2F;&#x2F; 用户类型数据</span><br><span class="line">    const userTypeData &#x3D; [</span><br><span class="line">        &#123;</span><br><span class="line">            label: &quot;大神&quot;,</span><br><span class="line">            value: &quot;0&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            label: &quot;老板&quot;,</span><br><span class="line">            value: &quot;1&quot;,</span><br><span class="line">        &#125;];</span><br><span class="line">    const &#123; getFieldProps, getFieldError &#125; &#x3D; props.form;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 点击注册</span><br><span class="line">    const handleClick &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        props.form.validateFields(&#123; force: true &#125;, (error) &#x3D;&gt; &#123;</span><br><span class="line">            if (!error) &#123;</span><br><span class="line">                console.log(props.form.getFieldsValue());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Toast.info(&quot;请确认表单内容全部正确&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 获取子组件传过来的验证码</span><br><span class="line">    const getCode &#x3D; (value) &#x3D;&gt; &#123;</span><br><span class="line">        setCanvasCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 校验用户名</span><br><span class="line">    const validateUserName &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 仅允许输入英文和数字</span><br><span class="line">        const reg &#x3D; &#x2F;^\w&#123;3,8&#125;$&#x2F;;</span><br><span class="line">        if (reg.test(value)) &#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            callback(new Error(&quot;仅允许英文、数字长度为3到8&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 输入密码校验</span><br><span class="line">    const validatePassword &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;匹配是否有特殊字符（包括空格）,允许的特殊字符@,.</span><br><span class="line">        const reg &#x3D; &#x2F;^[\w@,.]&#123;6,16&#125;$&#x2F;;</span><br><span class="line">        if (reg.test(value)) &#123;</span><br><span class="line">            setPassword(value);</span><br><span class="line">            callback();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            callback(new Error(&quot;仅允许英文、数字和特殊字符@ , .长度为6到16&quot;))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 再次输入密码校验</span><br><span class="line">    const validateRePassword &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class="line">        if (value &amp;&amp; value &#x3D;&#x3D;&#x3D; password) &#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125; else if (value.length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">            callback(new Error(&#39;请再次输入密码&#39;));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            callback(new Error(&#39;两次输入密码不一致&#39;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 校验验证码</span><br><span class="line">    const validateVerificationCode &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class="line">        if (value.toLowerCase() &#x3D;&#x3D;&#x3D; canvasCode.toLowerCase()) &#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            callback(new Error(&quot;验证码错误&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;WingBlank&gt;</span><br><span class="line">            &lt;List&gt;</span><br><span class="line"></span><br><span class="line">                &#123;&#x2F;* 用户名 *&#x2F;&#125;</span><br><span class="line">                &lt;InputItem</span><br><span class="line">                    &#123;...getFieldProps(&#39;userName&#39;, &#123;</span><br><span class="line">                        validate: [&#123;</span><br><span class="line">                            trigger: &quot;onBlur&quot;,</span><br><span class="line">                            rules: [</span><br><span class="line">                                &#123; validator: validateUserName &#125;</span><br><span class="line">                            ],</span><br><span class="line">                        &#125;],</span><br><span class="line"></span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                    error&#x3D;&#123;!!getFieldError(&#39;userName&#39;)&#125;</span><br><span class="line">                    onErrorClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">                        Toast.info(getFieldError(&#39;userName&#39;), 1);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    clear</span><br><span class="line">                    placeholder&#x3D;&quot;请输入用户名&quot;</span><br><span class="line">                &gt;用户名&lt;&#x2F;InputItem&gt;</span><br><span class="line"></span><br><span class="line">                &#123;&#x2F;* 密码 *&#x2F;&#125;</span><br><span class="line">                &lt;InputItem</span><br><span class="line">                    &#123;...getFieldProps(&#39;password&#39;, &#123;</span><br><span class="line">                        validate: [&#123;</span><br><span class="line">                            trigger: &quot;onBlur&quot;,</span><br><span class="line">                            rules: [</span><br><span class="line">                                &#123; validator: validatePassword &#125;</span><br><span class="line">                            ],</span><br><span class="line">                        &#125;],</span><br><span class="line"></span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                    error&#x3D;&#123;!!getFieldError(&#39;password&#39;)&#125;</span><br><span class="line">                    onErrorClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">                        Toast.info(getFieldError(&#39;password&#39;), 1);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    type&#x3D;&quot;password&quot;</span><br><span class="line">                    clear</span><br><span class="line">                    placeholder&#x3D;&quot;请输入密码&quot;</span><br><span class="line">                &gt;密码&lt;&#x2F;InputItem&gt;</span><br><span class="line"></span><br><span class="line">                &#123;&#x2F;* 确认密码 *&#x2F;&#125;</span><br><span class="line">                &lt;InputItem</span><br><span class="line">                    &#123;...getFieldProps(&#39;rePassword&#39;, &#123;</span><br><span class="line">                        validate: [&#123;</span><br><span class="line">                            trigger: &quot;onBlur&quot;,</span><br><span class="line">                            rules: [</span><br><span class="line">                                &#123; validator: validateRePassword &#125;,</span><br><span class="line">                            ],</span><br><span class="line">                        &#125;],</span><br><span class="line"></span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                    error&#x3D;&#123;!!getFieldError(&#39;rePassword&#39;)&#125;</span><br><span class="line">                    onErrorClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">                        Toast.info(getFieldError(&#39;rePassword&#39;), 1);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    type&#x3D;&quot;password&quot;</span><br><span class="line">                    clear</span><br><span class="line">                    placeholder&#x3D;&quot;请再次输入密码&quot;</span><br><span class="line">                &gt;确认密码&lt;&#x2F;InputItem&gt;</span><br><span class="line"></span><br><span class="line">                &#123;&#x2F;* 用户类型 *&#x2F;&#125;</span><br><span class="line">                &lt;Picker</span><br><span class="line">                    &#123;...getFieldProps(&#39;userType&#39;, &#123;</span><br><span class="line">                        initialValue: userType</span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                    data&#x3D;&#123;userTypeData&#125;</span><br><span class="line">                    title&#x3D;&quot;用户类型&quot;</span><br><span class="line">                    extra&#x3D;&quot;请选择&quot;</span><br><span class="line">                    cols&#x3D;&#123;1&#125;</span><br><span class="line">                    value&#x3D;&#123;userType&#125;</span><br><span class="line">                    onOk&#x3D;&#123;v &#x3D;&gt; setUserType(v)&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;List.Item arrow&#x3D;&quot;horizontal&quot;&gt;用户类型&lt;&#x2F;List.Item&gt;</span><br><span class="line">                &lt;&#x2F;Picker&gt;</span><br><span class="line"></span><br><span class="line">                &#123;&#x2F;* 验证码 *&#x2F;&#125;</span><br><span class="line">                &lt;List.Item&gt;</span><br><span class="line">                    &lt;VerificationCode getCode&#x3D;&#123;value &#x3D;&gt; getCode(value)&#125; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;List.Item&gt;</span><br><span class="line">                &lt;WhiteSpace &#x2F;&gt;</span><br><span class="line">                &lt;InputItem</span><br><span class="line">                    &#123;...getFieldProps(&#39;verificationCode&#39;, &#123;</span><br><span class="line">                        validate: [&#123;</span><br><span class="line">                            trigger: &quot;onBlur&quot;,</span><br><span class="line">                            rules: [</span><br><span class="line">                                &#123; validator: validateVerificationCode &#125;,</span><br><span class="line">                            ],</span><br><span class="line">                        &#125;],</span><br><span class="line"></span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                    error&#x3D;&#123;!!getFieldError(&#39;verificationCode&#39;)&#125;</span><br><span class="line">                    onErrorClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class="line">                        Toast.info(getFieldError(&#39;verificationCode&#39;), 1);</span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                    clear</span><br><span class="line">                    placeholder&#x3D;&quot;请输入验证码&quot;</span><br><span class="line">                &gt;验证码&lt;&#x2F;InputItem&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &lt;List.Item&gt;</span><br><span class="line">                    &lt;Button</span><br><span class="line">                        type&#x3D;&quot;primary&quot;</span><br><span class="line">                        onClick&#x3D;&#123;handleClick&#125;</span><br><span class="line">                    &gt;注册&lt;&#x2F;Button&gt;</span><br><span class="line">                &lt;&#x2F;List.Item&gt;</span><br><span class="line"></span><br><span class="line">                &lt;List.Item&gt;</span><br><span class="line">                    &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; &#123; props.history.push(&quot;&#x2F;login&quot;) &#125;&#125;&gt;</span><br><span class="line">                        已有账户</span><br><span class="line">                    &lt;&#x2F;Button&gt;</span><br><span class="line">                &lt;&#x2F;List.Item&gt;</span><br><span class="line">            &lt;&#x2F;List&gt;</span><br><span class="line">        &lt;&#x2F;WingBlank&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">const Form1 &#x3D; createForm()(withRouter(Form))</span><br><span class="line"></span><br><span class="line">const Register &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    return (&lt;div className&#x3D;&quot;register&quot;&gt;</span><br><span class="line">            &lt;Form1 &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;)</span><br><span class="line">&#125;</span><br><span class="line">export default withRouter(Register);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>部分内容借鉴的博客地址：<a href="https://www.jianshu.com/p/6e1ebce3966d" target="_blank" rel="noopener">https://www.jianshu.com/p/6e1ebce3966d</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
</search>
