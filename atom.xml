<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>会飞的猪的个人博客</title>
  
  
  <link href="https://blogwxb.cn/atom.xml" rel="self"/>
  
  <link href="https://blogwxb.cn/"/>
  <updated>2021-07-20T01:57:01.962Z</updated>
  <id>https://blogwxb.cn/</id>
  
  <author>
    <name>wxb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Date获取指定月份的总天数</title>
    <link href="https://blogwxb.cn/Date%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E6%9C%88%E4%BB%BD%E7%9A%84%E6%80%BB%E5%A4%A9%E6%95%B0/"/>
    <id>https://blogwxb.cn/Date%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E6%9C%88%E4%BB%BD%E7%9A%84%E6%80%BB%E5%A4%A9%E6%95%B0/</id>
    <published>2021-07-15T01:55:33.000Z</published>
    <updated>2021-07-20T01:57:01.962Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="new-Date-使用手册"><a href="#new-Date-使用手册" class="headerlink" title="new Date()使用手册"></a>new Date()使用手册</h1><p>new Date()的参数：</p><ul><li><p>new Date();<br>实例化时刻的日期和时间</p></li><li><p>new Date(value);<br>value是个时间戳，value的类型必须是Number类型的值，以毫秒数计算的。</p><a id="more"></a></li><li><p>new Date(dateString);<br>dateString表示日期的字符串值，必须是正确的日期字符串才行，否则报错。<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2021-6-1'</span>))</span><br><span class="line"><span class="comment">// Tue Jun 01 2021 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2021-6-0'</span>))</span><br><span class="line"><span class="comment">// Invalid Date</span></span><br></pre></td></tr></table></figure></li><li><p>new Date(year, monthIndex, day, hours, minutes, seconds, milliseconds);   </p><ul><li>year(必选)<br>表示年份的整数值。 </li><li>monthIndex(必选)<br>表示月份的整数值。</li><li>date(可选)<br>表示一个月中的第几天的整数值，从1开始。默认值为1。</li><li>hours (可选)<br>表示一天中的小时数的整数值 (24小时制)。默认值为0（午夜）。</li><li>minutes (可选)<br>表示一个完整时间（如 01:10:00）中的分钟部分的整数值。默认值为0。</li><li>seconds (可选)<br>表示一个完整时间（如 01:10:00）中的秒部分的整数值。默认值为0。</li><li>milliseconds (可选)<br>表示一个完整时间的毫秒部分的整数值。默认值为0。</li></ul></li></ul><h1 id="获取指定月份的总天数的方法"><a href="#获取指定月份的总天数的方法" class="headerlink" title="获取指定月份的总天数的方法"></a>获取指定月份的总天数的方法</h1><p>要用到<code>new Date(year, monthIndex, day, hours, minutes, seconds, milliseconds)</code>的方法去获取指定月份总天数。<br>当day参数为0时就会跳转到上个月的最后一天，再通过getDate()方法去获取上个月总天数即可。<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>,<span class="number">6</span>,<span class="number">0</span>))</span><br><span class="line"><span class="comment">//  Wed Jun 30 2021 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2021</span>,<span class="number">6</span>,<span class="number">0</span>).getDate())</span><br><span class="line"><span class="comment">//  30</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;new-Date-使用手册&quot;&gt;&lt;a href=&quot;#new-Date-使用手册&quot; class=&quot;headerlink&quot; title=&quot;new Date()使用手册&quot;&gt;&lt;/a&gt;new Date()使用手册&lt;/h1&gt;&lt;p&gt;new Date()的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;new Date();&lt;br&gt;实例化时刻的日期和时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;new Date(value);&lt;br&gt;value是个时间戳，value的类型必须是Number类型的值，以毫秒数计算的。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://blogwxb.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>reactQuery状态管理</title>
    <link href="https://blogwxb.cn/reactQuery%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    <id>https://blogwxb.cn/reactQuery%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</id>
    <published>2021-07-08T12:09:16.000Z</published>
    <updated>2021-07-08T12:10:25.424Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="react-query简介"><a href="#react-query简介" class="headerlink" title="react-query简介"></a>react-query简介</h1><p>react-query是用于状态管理，是为了处理请求的状态。目前在github上已有21.1k个star了。<a href="https://github.com/tannerlinsley/react-query" target="_blank" rel="noopener">react-query的github地址</a></p><h1 id="react-query的使用"><a href="#react-query的使用" class="headerlink" title="react-query的使用"></a>react-query的使用</h1><p>第一步需要用<code>QueryClientProvider</code>组件来包裹项目的根组件。例子如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Layout from &#39;.&#x2F;layout&#39;</span><br><span class="line">import &#123;</span><br><span class="line">  QueryClient,</span><br><span class="line">  QueryClientProvider,</span><br><span class="line">&#125; from &quot;react-query&quot;;</span><br><span class="line"></span><br><span class="line">const queryClient &#x3D; new QueryClient()</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;QueryClientProvider client&#x3D;&#123;queryClient&#125;&gt;</span><br><span class="line">        &lt;Layout &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;QueryClientProvider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>react-query的请求处理是通过<code>useQuery</code>、<code>useMutation</code> 等 Hooks API来实现的。下面将介绍一下useQuery和useMutation。  </p><ul><li>useQuery的使用<ul><li>两个参数：一个是请求的<code>Query key</code>，一个是发送请求进行处理并返回数据的异步方法。  </li></ul></li></ul><p>例子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useQuery &#125; from &quot;react-query&quot;;</span><br><span class="line">const &#123; data, isSuccess &#125; &#x3D; useQuery(&quot;getData&quot;, async () &#x3D;&gt; &#123;</span><br><span class="line">    const res &#x3D; await axios.get(&quot;&#x2F;api&quot;);</span><br><span class="line">    return res;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(data, isSuccess);</span><br></pre></td></tr></table></figure><p>打印结果： <code>[1,2,3,4,5] true</code></p><ul><li>useMutation的使用<ul><li>如果说useQuery是对数据的查，那么useMutation是增/删/改，两个参数：一个是发送请求的函数，一个是对请求的数据状态不同的处理。</li><li>例子如下：  </li></ul></li></ul><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMutation &#125; <span class="keyword">from</span> <span class="string">"react-query"</span>;</span><br><span class="line"><span class="keyword">const</span> mutation = useMutation(</span><br><span class="line">    <span class="comment">// data为参数</span></span><br><span class="line">    <span class="keyword">async</span> (data: string) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">"/api/updateUsername"</span>, &#123;</span><br><span class="line">        params: &#123; <span class="attr">username</span>: data &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 成功回调</span></span><br><span class="line">      onSuccess(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 失败回调</span></span><br><span class="line">      onError(err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    &lt;button</span><br><span class="line">      onClick=&#123;() =&gt; &#123;</span><br><span class="line">       <span class="comment">// 使用mutate传参并发送请求</span></span><br><span class="line">        mutation.mutate(<span class="string">'www'</span>);</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      change username</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h1 id="获取缓存的数据"><a href="#获取缓存的数据" class="headerlink" title="获取缓存的数据"></a>获取缓存的数据</h1><p>在使用useQuery时，第一个参数要填入唯一的key值，useQuery是有缓存的能力，默认是5分钟，所以可以通过queryClient来获取到useQuery请求的缓存数据。例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useQuery,useQueryClient &#125; <span class="keyword">from</span> <span class="string">"react-query"</span>;</span><br><span class="line"><span class="comment">// getData为useQuery的query key值</span></span><br><span class="line"><span class="keyword">const</span> &#123; data, isSuccess &#125; = useQuery(<span class="string">"getData"</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">"/api"</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryClient = useQueryClient();</span><br><span class="line"><span class="comment">// 获取query key为query的缓存数据</span></span><br><span class="line"><span class="built_in">console</span>.log(queryClient.getQueryData(<span class="string">'getData'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>参考自： <a href="https://react-query.tanstack.com/overview" target="_blank" rel="noopener">React Query官网</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;react-query简介&quot;&gt;&lt;a href=&quot;#react-query简介&quot; class=&quot;headerlink&quot; title=&quot;react-query简介&quot;&gt;&lt;/a&gt;react-query简介&lt;/h1&gt;&lt;p&gt;react-query是用于状态管理，是为了处理请求的状态。目前在github上已有21.1k个star了。&lt;a href=&quot;https://github.com/tannerlinsley/react-query&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-query的github地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;react-query的使用&quot;&gt;&lt;a href=&quot;#react-query的使用&quot; class=&quot;headerlink&quot; title=&quot;react-query的使用&quot;&gt;&lt;/a&gt;react-query的使用&lt;/h1&gt;&lt;p&gt;第一步需要用&lt;code&gt;QueryClientProvider&lt;/code&gt;组件来包裹项目的根组件。例子如下：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="react" scheme="https://blogwxb.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>emotion中React的typeScript使用说明</title>
    <link href="https://blogwxb.cn/emotion%E4%B8%ADReact%E7%9A%84typeScript%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://blogwxb.cn/emotion%E4%B8%ADReact%E7%9A%84typeScript%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2021-07-01T06:51:56.000Z</published>
    <updated>2021-07-01T06:54:44.718Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><p>React的TypeScript中使用手册:</p><h1 id="emotion-react"><a href="#emotion-react" class="headerlink" title="@emotion/react"></a>@emotion/react</h1><p>举一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* @jsxImportSource @emotion&#x2F;react *&#x2F;</span><br><span class="line">import &#123; css &#125; from &#39;@emotion&#x2F;react&#39;</span><br><span class="line"></span><br><span class="line"> &lt;div</span><br><span class="line">    css&#x3D;&#123;css&#96;</span><br><span class="line">        color: red</span><br><span class="line">    &#96;&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这个例子的css样式没有生效的，反而会报错，报错信息如：<code>Property &#39;css&#39; does not exist on type &#39;DetailedHTMLProps&lt;HTMLAttributes&lt;HTMLDivElement&gt;, HTMLDivElement&gt;&#39;</code></p><a id="more"></a><h3 id="解决方案如下："><a href="#解决方案如下：" class="headerlink" title="解决方案如下："></a>解决方案如下：</h3><ul><li>第一种：在文件的头部添加 <code>/* @jsxImportSource @emotion/react */</code>，让组件识别出emotion样式。<br>例子如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* @jsxImportSource @emotion&#x2F;react *&#x2F;</span><br><span class="line">import &#123; css &#125; from &#39;@emotion&#x2F;react&#39;</span><br><span class="line"></span><br><span class="line"> &lt;div</span><br><span class="line">    css&#x3D;&#123;css&#96;</span><br><span class="line">        color: red</span><br><span class="line">    &#96;&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li>第二种：用babel插件<code>@emotion/babel-plugin</code>(ps: 因为该项目使用的是nextjs，所以使用的babel插件也和其他的react框架会有所差异，官方推荐原生的react使用的是<a href="https://emotion.sh/docs/@emotion/babel-preset-css-prop" target="_blank" rel="noopener">@emotion/babel-preset-css-prop</a>)<br>在nextjs中的babel文件配置如下:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"next/babel"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"preset-react"</span>: &#123;</span><br><span class="line">            <span class="attr">"runtime"</span>: <span class="string">"automatic"</span>,</span><br><span class="line">            <span class="attr">"importSource"</span>: <span class="string">"@emotion/react"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"@emotion/babel-plugin"</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>配置完babel插件后在使用emotion的css样式会出现效果，但是css仍然会报错，这就需要在<code>tsconfig.json</code>文件中添加 <code>&quot;jsxImportSource&quot;: &quot;@emotion/react&quot;</code>，然后重启项目就行了。<br>例子如下(前提是babel和tsconfig.js配置完成后)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; css &#125; <span class="keyword">from</span> <span class="string">'@emotion/react'</span></span><br><span class="line"></span><br><span class="line"> &lt;div</span><br><span class="line">    css=&#123;css`</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">red</span></span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>提示： css={css``}中css反引号中样式的写法和普通的css写法是一样的。如：  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div</span><br><span class="line">    css=&#123;css`</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-top</span>: 10<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000000</span>;</span></span><br><span class="line"><span class="css">    `</span>&#125;</span><br><span class="line"> &gt;</span><br><span class="line">    emotion</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h1 id="emotion-styled的使用方法"><a href="#emotion-styled的使用方法" class="headerlink" title="@emotion/styled的使用方法"></a>@emotion/styled的使用方法</h1><p>@emotion/styled基本没什么注意的点，直接开干，举个例子：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">"@emotion/styled"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Wrap = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">    border: 1px solid #000;</span></span><br><span class="line"><span class="string">    color: red;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Wrap&gt;</span><br><span class="line">      emotion</span><br><span class="line">    &lt;<span class="regexp">/Wrap&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>通过styled的形式定义css样式来生成组件，写法还有一种:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 括号的形式</span></span><br><span class="line"><span class="keyword">const</span> Wrap = styled(<span class="string">'div'</span>)<span class="string">`   </span></span><br><span class="line"><span class="string">  border: 1px solid #000;</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;Wrap&gt;</span><br><span class="line">    emotion</span><br><span class="line">  &lt;<span class="regexp">/Wrap&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>使用参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Wrap = styled.div&lt;&#123; <span class="attr">diyBgColor</span>:string &#125;&gt;<span class="string">` </span></span><br><span class="line"><span class="string">  border: 1px solid #000;</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props=&gt;props.diyBgColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;Wrap diyBgColor=<span class="string">'#f40'</span>&gt;</span><br><span class="line">    emotion</span><br><span class="line">  &lt;<span class="regexp">/Wrap&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>以上是emotion在react typescript中的基本使用方式，本人暂时没有时间去整理react的js中使用说明。</p><blockquote><p><a href="https://emotion.sh/docs/typescript" target="_blank" rel="noopener">Emotion的React的TypeScript官方文档</a><br><a href="https://emotion.sh/docs/introduction" target="_blank" rel="noopener">Emotion所有官方文档</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;React的TypeScript中使用手册:&lt;/p&gt;
&lt;h1 id=&quot;emotion-react&quot;&gt;&lt;a href=&quot;#emotion-react&quot; class=&quot;headerlink&quot; title=&quot;@emotion/react&quot;&gt;&lt;/a&gt;@emotion/react&lt;/h1&gt;&lt;p&gt;举一个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;* @jsxImportSource @emotion&amp;#x2F;react *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &amp;#123; css &amp;#125; from &amp;#39;@emotion&amp;#x2F;react&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;div&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    css&amp;#x3D;&amp;#123;css&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        color: red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#96;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    emotion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子的css样式没有生效的，反而会报错，报错信息如：&lt;code&gt;Property &amp;#39;css&amp;#39; does not exist on type &amp;#39;DetailedHTMLProps&amp;lt;HTMLAttributes&amp;lt;HTMLDivElement&amp;gt;, HTMLDivElement&amp;gt;&amp;#39;&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://blogwxb.cn/tags/React/"/>
    
    <category term="css" scheme="https://blogwxb.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Git如何同时提交到github和码云gitee上</title>
    <link href="https://blogwxb.cn/Git%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0github%E5%92%8C%E7%A0%81%E4%BA%91gitee%E4%B8%8A/"/>
    <id>https://blogwxb.cn/Git%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E6%8F%90%E4%BA%A4%E5%88%B0github%E5%92%8C%E7%A0%81%E4%BA%91gitee%E4%B8%8A/</id>
    <published>2021-05-07T07:23:20.000Z</published>
    <updated>2021-07-01T03:00:29.432Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><p>使用多个远程库时，要注意git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。仍然以learngit本地库为例，先删除已关联的名为origin的远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></table></figure><p>然后，先关联GitHub的远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:xxx&#x2F;LearnGit.git</span><br></pre></td></tr></table></figure><p>注意，远程库的名称叫<code>github</code>，不叫<code>origin</code>了。  </p><a id="more"></a><p>接着，再关联码云的远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:xxx&#x2F;LearnGit.git</span><br></pre></td></tr></table></figure><p>同样注意，远程库的名称叫<code>gitee</code>，不叫<code>origin</code>。  </p><p>现在，我们用git remote -v查看远程库信息，可以看到两个远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gitee   git@gitee.com:xxx&#x2F;LearnGit.git (fetch)</span><br><span class="line">gitee   git@gitee.com:xxx&#x2F;LearnGit.git (push)</span><br><span class="line">github  git@github.com:xxx&#x2F;LearnGit.git (fetch)</span><br><span class="line">github  git@github.com:xxx&#x2F;LearnGit.git (push)</span><br></pre></td></tr></table></figure><p>如果要推送到<code>GitHub</code>，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure><p>如果要推送到码云，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><p>这样一来，本地库就可以同时与多个远程库互相同步</p>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;使用多个远程库时，要注意git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。仍然以learngit本地库为例，先删除已关联的名为origin的远程库：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote rm origin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，先关联GitHub的远程库：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote add github git@github.com:xxx&amp;#x2F;LearnGit.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，远程库的名称叫&lt;code&gt;github&lt;/code&gt;，不叫&lt;code&gt;origin&lt;/code&gt;了。  &lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="https://blogwxb.cn/categories/git/"/>
    
    
    <category term="git" scheme="https://blogwxb.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化工具对比</title>
    <link href="https://blogwxb.cn/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94/"/>
    <id>https://blogwxb.cn/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94/</id>
    <published>2021-03-31T08:09:52.000Z</published>
    <updated>2021-07-01T03:00:29.477Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="常见到的数据可视化工具"><a href="#常见到的数据可视化工具" class="headerlink" title="常见到的数据可视化工具"></a>常见到的数据可视化工具</h1><ul><li><a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener">Echarts</a> JavaScript 实现的开源可视化库</li><li><a href="https://antv.gitee.io/zh" target="_blank" rel="noopener">AntV</a> 蚂蚁集团数据可视化团队</li><li><a href="https://d3js.org/" target="_blank" rel="noopener">D3.js</a> 将强大的可视化组件和数据驱动的 DOM 操作方法完美结合。</li><li><a href="https://vega.github.io/vega/" target="_blank" rel="noopener">vega</a>  华盛顿大学计算机学院数据交互实验室（IDL）开发的一套交互图形语法</li><li><a href="https://www.highcharts.com.cn/" target="_blank" rel="noopener">HighCharts</a> 纯 JavaScript 编写的图表库</li><li><a href="https://www.finebi.com/?utm_source=media&utm_medium=zhihu" target="_blank" rel="noopener">FineBI</a>  新一代自助大数据分析的BI软件<a id="more"></a></li></ul><p>以上几种中<code>商用收费</code>的有<code>HighCharts</code>和<code>FineBI</code>，不考虑使用这两款产品，以下的对比忽略这两个;</p><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><ol><li>Echarts 兼容 IE6 及以上的所有主流浏览器，同样支持移动端的缩放和手势操作。</li><li>D3.js 兼容IE9 及以上的所有主流浏览器，对于移动端的兼容性也同上。</li><li>Antv 不详</li></ol><h1 id="渲染方式"><a href="#渲染方式" class="headerlink" title="渲染方式"></a>渲染方式</h1><p>第三方库都是基于这两种浏览器图形渲染技术实现的： Canvas 和 SVG 。下面是它们的区别：</p><table><thead><tr><th align="center">SVG</th><th align="center">Canvas</th></tr></thead><tbody><tr><td align="center">不依赖分辨率</td><td align="center">依赖分辨率</td></tr><tr><td align="center">支持事件处理器</td><td align="center">不支持事件处理器</td></tr><tr><td align="center">最适合带有大型渲染区域的应用程序(如地图)</td><td align="center">弱的文本渲染能力</td></tr><tr><td align="center">复杂度高会减慢渲染速度(任何过度使用DOM的应用都不快)</td><td align="center">能够以.png或.jpg格式保存结果图像</td></tr><tr><td align="center">不适合游戏应用</td><td align="center">最适合图像密集型的游戏</td></tr><tr><td align="center">可以为某个元素附加JavaScript事件处理器。在SVG 中，每个被绘制的图形均被视为对象。</td><td align="center">一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景都需要重新绘制。</td></tr></tbody></table><p>SVG渲染:</p><ul><li>vega</li><li>D3.js</li></ul><p>ECharts v4.0 发布了 SVG 渲染器，也可以支持SVG渲染。<br>AntV中G2既支持SVG渲染也支持Canvas渲染</p><h1 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h1><h3 id="1-Ecahrts"><a href="#1-Ecahrts" class="headerlink" title="1. Ecahrts"></a>1. Ecahrts</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>易上手，文档详细</li><li>移动端优化，交互和布局适配，按需打包</li><li>配置项驱动，三级个性化图表样式管理</li><li>丰富的图表类型，覆盖主流常规的统计图表</li><li>深度的交互式数据探索</li><li>地理特效（百度迁徙，百度人气，公交轨迹等效果）</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>复杂关系型图表比较难定制</li><li>灵活性上不如 Vega 等基于图形语法的类库</li></ul><h3 id="2-AntV"><a href="#2-AntV" class="headerlink" title="2. AntV"></a>2. AntV</h3><h4 id="AntV分类："><a href="#AntV分类：" class="headerlink" title="AntV分类："></a>AntV分类：</h4><ul><li>G2 强大的语义化图表语法类库 （主要用到的）</li><li>F2 移动可视化方案</li><li>G6 提供了基本的网图和树图功能，并支持多种内置布局</li><li>X6 图编辑引擎</li><li>L7 地理空间数据可视化</li><li>等等</li></ul><h4 id="G2优点："><a href="#G2优点：" class="headerlink" title="G2优点："></a>G2优点：</h4><ul><li>数据处理能力、便利的扩展方式和强大交互能力；</li><li>可以按需加载</li><li>支持canvas和svg</li></ul><h4 id="G2缺点"><a href="#G2缺点" class="headerlink" title="G2缺点:"></a>G2缺点:</h4><ul><li>文档说明有点简略了</li><li>需要学习相对应的语法，学习成本相对来说有点高</li></ul><h3 id="3-Vega"><a href="#3-Vega" class="headerlink" title="3. Vega"></a>3. Vega</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h4><ul><li>完全基于 JSON 语法，提供从数据到图形的映射规则</li><li>支持常见的交互语法</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><ul><li>没有中文文档</li><li>复杂的语法设计，使用和学习成本很高</li></ul><h1 id="Echarts按需加载"><a href="#Echarts按需加载" class="headerlink" title="Echarts按需加载"></a>Echarts按需加载</h1><p>5.0以后版本按需加载的方式是<code>import</code>，4.9版本是使用<code>require</code>进行按需加载的<br>以下例子都是按照饼状图为例</p><h3 id="5-0版本"><a href="#5-0版本" class="headerlink" title="5.0版本"></a>5.0版本</h3><p>按需加载的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts/core"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  TitleComponent,</span><br><span class="line">  TooltipComponent,</span><br><span class="line">  LegendComponent</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  PieChart</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/charts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  CanvasRenderer</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/renderers'</span>;</span><br><span class="line"></span><br><span class="line">echarts.use(</span><br><span class="line">  [TitleComponent, TooltipComponent, LegendComponent, PieChart, CanvasRenderer]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>TypeScript版按需加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">'echarts/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    BarChart,</span><br><span class="line">    <span class="comment">// 系列类型的定义后缀都为 SeriesOption</span></span><br><span class="line">    BarSeriesOption,</span><br><span class="line">    LineChart,</span><br><span class="line">    LineSeriesOption</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/charts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    TitleComponent,</span><br><span class="line">    <span class="comment">// 组件类型的定义后缀都为 ComponentOption</span></span><br><span class="line">    TitleComponentOption,</span><br><span class="line">    GridComponent,</span><br><span class="line">    GridComponentOption</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/components'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    CanvasRenderer</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'echarts/renderers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 ComposeOption 来组合出一个只有必须组件和图表的 Option 类型</span></span><br><span class="line">type ECOption = echarts.ComposeOption&lt;</span><br><span class="line">  BarSeriesOption | LineSeriesOption | TitleComponentOption | GridComponentOption</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册必须的组件</span></span><br><span class="line">echarts.use(</span><br><span class="line">    [TitleComponent, TooltipComponent, GridComponent, BarChart, CanvasRenderer]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> option: ECOption = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-9版本"><a href="#4-9版本" class="headerlink" title="4.9版本"></a>4.9版本</h3><p>按需加载的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts/lib/echarts'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/chart/pie'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/tooltip'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/title'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"echarts/lib/component/legend"</span>);</span><br></pre></td></tr></table></figure><p>5.0.2和4.9.0按需加载前后对比</p><table><thead><tr><th align="center">版本</th><th align="center">未按需加载</th><th align="center">按需加载</th><th align="center">节省空间比例</th></tr></thead><tbody><tr><td align="center">5.0.2</td><td align="center">2.92MB</td><td align="center">1.09MB</td><td align="center">63%</td></tr><tr><td align="center">4.9.0</td><td align="center">2.55MB</td><td align="center">0.91MB</td><td align="center">64%</td></tr></tbody></table><h3 id="5-0和4-9版本地图用法"><a href="#5-0和4-9版本地图用法" class="headerlink" title="5.0和4.9版本地图用法"></a>5.0和4.9版本地图用法</h3><p>4.9使用地图的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/map/js/china.js'</span>;</span><br><span class="line"><span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'iphone'</span>,</span><br><span class="line">          type: <span class="string">'map'</span>,</span><br><span class="line">          mapType: <span class="string">'china'</span>,</span><br><span class="line">          ...</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.0中移除了内置的 geoJSON（原先在 echarts/map 文件夹下），如果使用者仍然需要他们，可以去从老版本中得到（下载文件中的map文件，引入本地），或者自己寻找更合适的数据然后通过 registerMap 接口注册到 ECharts 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"><span class="keyword">import</span> chinaJson <span class="keyword">from</span> <span class="string">"./china.json"</span>; <span class="comment">// 引入中国地图数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line">echarts.registerMap(<span class="string">'china'</span>, chinaJson);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  series: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'iphone'</span>,</span><br><span class="line">          type: <span class="string">'map'</span>,</span><br><span class="line">          map: <span class="string">'china'</span>,</span><br><span class="line">          ...</span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;常见到的数据可视化工具&quot;&gt;&lt;a href=&quot;#常见到的数据可视化工具&quot; class=&quot;headerlink&quot; title=&quot;常见到的数据可视化工具&quot;&gt;&lt;/a&gt;常见到的数据可视化工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://echarts.apache.org/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Echarts&lt;/a&gt; JavaScript 实现的开源可视化库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://antv.gitee.io/zh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AntV&lt;/a&gt; 蚂蚁集团数据可视化团队&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://d3js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;D3.js&lt;/a&gt; 将强大的可视化组件和数据驱动的 DOM 操作方法完美结合。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vega.github.io/vega/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vega&lt;/a&gt;  华盛顿大学计算机学院数据交互实验室（IDL）开发的一套交互图形语法&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.highcharts.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HighCharts&lt;/a&gt; 纯 JavaScript 编写的图表库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.finebi.com/?utm_source=media&amp;utm_medium=zhihu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FineBI&lt;/a&gt;  新一代自助大数据分析的BI软件&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Echarts" scheme="https://blogwxb.cn/tags/Echarts/"/>
    
    <category term="AntV" scheme="https://blogwxb.cn/tags/AntV/"/>
    
  </entry>
  
  <entry>
    <title>git的基本操作</title>
    <link href="https://blogwxb.cn/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://blogwxb.cn/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-03-24T10:13:45.000Z</published>
    <updated>2021-07-01T03:00:29.445Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><p>在进行git 操作之前，先进行一个配置，这个配置告诉git  用户和邮箱<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;wxb&quot; </span><br><span class="line">git config --global user.email &quot;******@163.com&quot;</span><br></pre></td></tr></table></figure><p>参考下面的流程图：</p><a id="more"></a><p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1.png" alt="1.png"></p><p><code>git init</code> : 初始化仓库<br><code>git status</code> :  查看git工作区（仓库）的一个状态<br><code>git add</code> ：添加文件到暂存区<br><code>git add</code> . :    添加所有未到暂存区的文件<br><code>git commit -m &quot;备注：1.0&quot;</code>   : 将暂存区的文件进入提交区，文件被git真正意义的管理起来<br><code>git log</code>:查看日志信息</p><p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/2.png" alt="2.png"></p><p>commit 后面的hash（哈希）值是每次git commit 生成的<code>commit  id</code>值<br><code>git reset --hard (commitid)</code> : 切换到指定的id值版本(这个id可以根据git log查看日志信息去找到) </p><p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3.png" alt="3.png"></p><p><code>git log --pretty=oneline</code> : 让git log 日志只显示 commit id 和 备注</p><p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/4.png" alt="4.png"></p><p><code>git reset --hard HEAD^</code>    回退到上个版本<br><code>git reset --hard HEAD^^</code>  回退到上上个版本</p><p>注意：进行版本回退之后，发现commit最新的没了，可以使用<code>git reflog</code>进行所有的commitid 的查询</p><p><img src="/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/5.png" alt="5.png"></p>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;在进行git 操作之前，先进行一个配置，这个配置告诉git  用户和邮箱&lt;br&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;wxb&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &amp;quot;******@163.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考下面的流程图：&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="https://blogwxb.cn/categories/git/"/>
    
    
    <category term="git" scheme="https://blogwxb.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>koa-static静态托管</title>
    <link href="https://blogwxb.cn/koa-static%E9%9D%99%E6%80%81%E6%89%98%E7%AE%A1/"/>
    <id>https://blogwxb.cn/koa-static%E9%9D%99%E6%80%81%E6%89%98%E7%AE%A1/</id>
    <published>2021-03-17T06:06:00.000Z</published>
    <updated>2021-07-01T03:00:29.454Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa-static --save</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="comment">// 引入 koa-static</span></span><br><span class="line"><span class="keyword">const</span> koaStatic= <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">app.use(koaStatic(path.join(__dirname, <span class="string">'./static'</span>)))</span><br><span class="line">app.listen(<span class="number">3030</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>先看一下项目的目录结构<br><img src="/koa-static%E9%9D%99%E6%80%81%E6%89%98%E7%AE%A1/1.png" alt="1.png"><br>查看静态文件<br><img src="/koa-static%E9%9D%99%E6%80%81%E6%89%98%E7%AE%A1/2.png" alt="2.png"></p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>访问静态文件时，要直接通过<code>http://localhost:3030/index.html</code>访问，不是<code>http://localhost:3030/static/index.html</code></p>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i koa-static --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Koa = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;koa&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Koa();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 引入 koa-static&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; koaStatic= &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;koa-static&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(koaStatic(path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;./static&#39;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.listen(&lt;span class=&quot;number&quot;&gt;3030&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Koa" scheme="https://blogwxb.cn/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>Generator函数</title>
    <link href="https://blogwxb.cn/Generator%E5%87%BD%E6%95%B0/"/>
    <id>https://blogwxb.cn/Generator%E5%87%BD%E6%95%B0/</id>
    <published>2021-03-12T02:55:44.000Z</published>
    <updated>2021-07-01T03:00:29.432Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="一、什么是Generator函数"><a href="#一、什么是Generator函数" class="headerlink" title="一、什么是Generator函数"></a>一、什么是Generator函数</h1><p>Generator 函数是 ES6 提供的一种<code>异步编程解决方案</code>，语法行为与传统函数完全不同。  </p><p><strong>Generator和普通函数的区别</strong></p><ol><li>写法的不同，Generator函数function后要加上<code>星号</code>，Generator函数是可以<code>暂停执行</code>的。<br>例子：<a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generator函数的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>Generator函数体内使用<code>yield</code>语句，可以定义不同的内部状态；状态其实就是数据。使用yield进行暂停操作，和async await异步处理中的<code>await</code>效果一样。</li></ol><h1 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h1><p>Generator函数配合yield的使用，想要获取到yield的数据，要使用<code>next()</code>进行迭代获取。<br>next()返回的是一个对象，对象里面有两个属性，一个是<code>value</code>，一个是<code>done</code>。<br><code>value</code>代表<code>yield后面表达式的值</code>，<code>done</code>代表<code>是否遍历结束</code>，true表示遍历结束，false表示未结束。<br>下面的例子中第四次打印的value为undefined是因为yield已经遍历结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'c'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gen = generator();</span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next());    <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>next（）方法允许逻辑</p><ul><li>遇到yield表达式，就<code>暂停执行后面的操作</code>，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值；</li><li>下一次调用next方法时，再继续往下执行，直到遇到<code>下一个yield表达式</code>；</li><li>没有再遇到新的yield表达式，就<code>一直运行到函数结束</code>，<code>直到return语句为止</code>，并将<code>return语句</code>后面的表达式的<code>值</code>，作为返回的对象的<code>value属性值</code>；</li><li>如果该函数没有return语句，则返回的对象的value属性值为undefined；</li></ul><p>下面的例子就有点复杂了，但要记住上面的next()方法的逻辑就好理解一些</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(z);</span><br><span class="line">    <span class="keyword">yield</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = foo(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一次next()结果</span></span><br><span class="line"><span class="comment">    &#123; value: 6, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第二次next()结果</span></span><br><span class="line"><span class="comment">    NaN</span></span><br><span class="line"><span class="comment">    &#123; value: NaN, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第三次next()结果</span></span><br><span class="line"><span class="comment">    undefined</span></span><br><span class="line"><span class="comment">    &#123; value: NaN, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br></pre></td></tr></table></figure><p>第一次的next()的结果很好理解<br>第二次的next()就有点魔幻了，下面好好解释一下：  </p><ul><li>y为什么成了NaN？<br>因为<code>y=2 * undefined</code>。  </li><li>但为什么第二次执行next()，yield(x+1)变成了undefined？<br>因为第一次只是执行了<code>yield(x+1)</code>，甚至连乘以2的操作都没执行到，因为<code>next()是遇到yield表达式就会执行完停止</code>，所以第二次执行next()的时候，根本就不知道第一次的next()的执行结果是什么，因为<code>第一次没有执行到给y赋值的时候</code>，所以就变成了<code>var y = 2 * undefined</code>了。<br>同理，第三次next()的执行结果是因为第二次next()只是执行到了yield(y/3)就停止了，所以第三次的next()执行结果就为5+NaN+undefined，结果为NaN</li></ul><p><strong>next的参数</strong><br>next方法可以带一个参数，该<code>参数会成为上一个yield的返回值，并从上一次yield开始，直到下一个yield停止</code>。<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">    <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(z);</span><br><span class="line">    <span class="keyword">yield</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = foo(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// &#123; value: 6, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    24</span></span><br><span class="line"><span class="comment">    &#123; value: 8, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next(<span class="number">12</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    13</span></span><br><span class="line"><span class="comment">    &#123; value: 42, done: false &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a.next(<span class="number">13</span>));</span><br></pre></td></tr></table></figure><p>第一次next()的value是<code>5+1=6</code><br>第二次next()的value为8是因为next()的有参数，参数变成上一次yield的返回值，也就是说<code>var y = 2 * 12;</code>，然后到yield(y/3)执行完停止，所以value为8<br>第三次next()的value为42因为next()有参数，上一次的yield开始，变成了<code>var z = 13</code>,到yield(x+y+z)结束，所以value等于<code>x+y+z = 5+24+13 = 42</code></p>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;一、什么是Generator函数&quot;&gt;&lt;a href=&quot;#一、什么是Generator函数&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Generator函数&quot;&gt;&lt;/a&gt;一、什么是Generator函数&lt;/h1&gt;&lt;p&gt;Generator 函数是 ES6 提供的一种&lt;code&gt;异步编程解决方案&lt;/code&gt;，语法行为与传统函数完全不同。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generator和普通函数的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写法的不同，Generator函数function后要加上&lt;code&gt;星号&lt;/code&gt;，Generator函数是可以&lt;code&gt;暂停执行&lt;/code&gt;的。&lt;br&gt;例子：&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://blogwxb.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>antd中setFieldsValue导致提示消失</title>
    <link href="https://blogwxb.cn/antd%E4%B8%ADsetFieldsValue%E5%AF%BC%E8%87%B4%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1/"/>
    <id>https://blogwxb.cn/antd%E4%B8%ADsetFieldsValue%E5%AF%BC%E8%87%B4%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1/</id>
    <published>2021-02-26T02:49:15.000Z</published>
    <updated>2021-07-01T03:00:29.440Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h1><p>当表单输入时，限制用户最大输入的长度时，会导致提示错误消息消失<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 校验金额</span></span><br><span class="line"> <span class="keyword">const</span> validateMoney = <span class="function">(<span class="params">rule: RuleObject, value: StoreValue</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (value.length &gt; <span class="number">20</span>) &#123;</span><br><span class="line">        form.setFieldsValue(&#123; <span class="attr">cashOutAmount</span>: value.slice(<span class="number">0</span>, <span class="number">21</span>) &#125;);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'不能超过20位'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Form form=&#123;form&#125;&gt;</span><br><span class="line">    &lt;Form.Item</span><br><span class="line">        name=<span class="string">"cashOutAmount"</span></span><br><span class="line">        label=<span class="string">"提现金额"</span></span><br><span class="line">        rules=&#123;[&#123; <span class="attr">validator</span>: validateMoney &#125;]&#125;</span><br><span class="line">        validateTrigger=<span class="string">"onChange"</span></span><br><span class="line">    &gt;</span><br><span class="line">        &lt;Input/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Form&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>运行如下<br>当输入超过20位时，虽然已经校验失败了，但是提示消息不见了。<br><img src="/antd%E4%B8%ADsetFieldsValue%E5%AF%BC%E8%87%B4%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1/1.png" alt="1.png"></p><h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h1><p>可能<code>setFieldsValue</code>是异步的原因导致消息不提示</p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><p>使用<code>setFields</code>方法<br>例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 校验金额</span></span><br><span class="line"> <span class="keyword">const</span> validateMoney = <span class="function">(<span class="params">rule: RuleObject, value: StoreValue</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (value.length &gt; <span class="number">20</span>) &#123;</span><br><span class="line">         form.setFields([</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">'cashOutAmount'</span>,</span><br><span class="line">                    value: value.slice(<span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            ]);</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'不能超过20位'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Form form=&#123;form&#125;&gt;</span><br><span class="line">    &lt;Form.Item</span><br><span class="line">        name=<span class="string">"cashOutAmount"</span></span><br><span class="line">        label=<span class="string">"提现金额"</span></span><br><span class="line">        rules=&#123;[&#123; <span class="attr">validator</span>: validateMoney &#125;]&#125;</span><br><span class="line">        validateTrigger=<span class="string">"onChange"</span></span><br><span class="line">    &gt;</span><br><span class="line">        &lt;Input/&gt;</span><br><span class="line">    &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Form&gt;</span><br></pre></td></tr></table></figure><p>运行后<br><img src="/antd%E4%B8%ADsetFieldsValue%E5%AF%BC%E8%87%B4%E6%8F%90%E7%A4%BA%E6%B6%88%E5%A4%B1/2.png" alt="2.png"></p>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;场景：&quot;&gt;&lt;a href=&quot;#场景：&quot; class=&quot;headerlink&quot; title=&quot;场景：&quot;&gt;&lt;/a&gt;场景：&lt;/h1&gt;&lt;p&gt;当表单输入时，限制用户最大输入的长度时，会导致提示错误消息消失&lt;br&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 校验金额&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; validateMoney = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;rule: RuleObject, value: StoreValue&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value.length &amp;gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        form.setFieldsValue(&amp;#123; &lt;span class=&quot;attr&quot;&gt;cashOutAmount&lt;/span&gt;: value.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.reject(&lt;span class=&quot;string&quot;&gt;&#39;不能超过20位&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Form form=&amp;#123;form&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Form.Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name=&lt;span class=&quot;string&quot;&gt;&quot;cashOutAmount&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        label=&lt;span class=&quot;string&quot;&gt;&quot;提现金额&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rules=&amp;#123;[&amp;#123; &lt;span class=&quot;attr&quot;&gt;validator&lt;/span&gt;: validateMoney &amp;#125;]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        validateTrigger=&lt;span class=&quot;string&quot;&gt;&quot;onChange&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Input/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/Form.Item&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;/&lt;/span&gt;Form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="antd" scheme="https://blogwxb.cn/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>koa-session获取session为undefined</title>
    <link href="https://blogwxb.cn/koa-session%E8%8E%B7%E5%8F%96session%E4%B8%BAundefined/"/>
    <id>https://blogwxb.cn/koa-session%E8%8E%B7%E5%8F%96session%E4%B8%BAundefined/</id>
    <published>2021-02-19T12:07:59.000Z</published>
    <updated>2021-07-01T03:00:29.453Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用koa-session时，获取session显示的是undefined</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>session是依赖于cookie的，前后端跨域时，前后端需要配置允许携带cookie</p><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li><p>前端<br>由于前端使用的axios，所以需要在axios中配置<code>withCredentials: true</code>。<br>例子：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $axios = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">"http://localhost:3030/"</span>, <span class="comment">// 发送请求的前置的url</span></span><br><span class="line">  timeout: <span class="number">10000</span>, <span class="comment">// 请求超时的时间</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>   <span class="comment">// 允许携带cookie</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>后端<br>后端用的是koa2-cor包进行的跨域，所以需要配置<code>credentials: true</code><br>例子：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'koa2-cors'</span>);</span><br><span class="line">app.keys = [<span class="string">'some secret hurr'</span>];</span><br><span class="line"><span class="keyword">const</span> sessionConfig = &#123;</span><br><span class="line">    key: <span class="string">'koa:sess'</span>,   <span class="comment">//cookie key (default is koa:sess)</span></span><br><span class="line">    maxAge: <span class="number">86400000</span>,  <span class="comment">// cookie的过期时间 maxAge in ms (default is 1 days)</span></span><br><span class="line">    overwrite: <span class="literal">true</span>,  <span class="comment">//是否可以overwrite    (默认default true)</span></span><br><span class="line">    httpOnly: <span class="literal">true</span>, <span class="comment">//cookie是否只有服务器端可以访问 httpOnly or not (default true)</span></span><br><span class="line">    signed: <span class="literal">true</span>,   <span class="comment">//签名默认true</span></span><br><span class="line">    rolling: <span class="literal">false</span>,  <span class="comment">//在每次请求时强行设置cookie，这将重置cookie过期时间（默认：false）</span></span><br><span class="line">    renew: <span class="literal">false</span>,  <span class="comment">//(boolean) renew session when session is nearly expired,</span></span><br><span class="line">&#125;;</span><br><span class="line">app.use(session(sessionConfig, app));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;使用koa-session时，获取session显示的是undefined&lt;/p&gt;
&lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;session是依赖于cookie的，前后端跨域时，前后端需要配置允许携带cookie&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="https://blogwxb.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="koa" scheme="https://blogwxb.cn/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>div加入onblur事件</title>
    <link href="https://blogwxb.cn/div%E5%8A%A0%E5%85%A5onblur%E4%BA%8B%E4%BB%B6/"/>
    <id>https://blogwxb.cn/div%E5%8A%A0%E5%85%A5onblur%E4%BA%8B%E4%BB%B6/</id>
    <published>2021-02-06T06:08:30.000Z</published>
    <updated>2021-07-01T03:00:29.443Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><p>一般情况下，div是<code>没有onblur事件</code>的，但是给div加上<code>tabindex</code>属性后，就可以<code>使用onblur事件</code>了。  </p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>定义tabindex属性后，元素是默认会在聚焦的时候加上<code>outline</code>的样式，也就是onfocus时候，样式为div:focus{…}，那么在IE中可以通过<code>hidefocus=&quot;true&quot;</code>去除。其他浏览器通过outline=0进行去除，可以通过样式去修改，比如<code>div:focus{outline:none}</code>。</p><a id="more"></a><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">tabindex</span>=<span class="string">'1'</span> <span class="attr">onfocus</span>=<span class="string">'alert("得到焦点");'</span> <span class="attr">onblur</span>=<span class="string">'alert("失去焦点");'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="tabindex属性"><a href="#tabindex属性" class="headerlink" title="tabindex属性"></a>tabindex属性</h1><p>tabindex 全局属性 指示其元素是否可以聚焦，以及它是否/在何处参与顺序键盘导航（通常使用<code>Tab</code>键，因此得名）。<br>它接受一个整数作为值，具有不同的结果，具体取决于整数的值：  </p><ul><li><code>tabindex=负值</code> (通常是tabindex=“-1”)，表示元素是<code>可聚焦</code>的，但是<code>不能通过</code>键盘导航来访问到该元素，用JS做页面小组件内部键盘导航的时候非常有用。</li><li><code>tabindex=&quot;0&quot;</code> ，表示元素是<code>可聚</code>焦的，并且<code>可以通过</code>键盘导航来聚焦到该元素，它的相对顺序是当前处于的<code>DOM结构</code>来决定的。</li><li><code>tabindex=正值</code>，表示元素是<code>可聚焦</code>的，并且<code>可以通过</code>键盘导航来访问到该元素；它的相对顺序按照<code>tabindex 的数值递增而滞后获焦</code>。如果多个元素拥有相同的 tabindex，它们的相对顺序按照他们在当前DOM中的先后顺序决定。</li></ul><p>根据键盘序列导航的顺序，值为 0 、非法值、或者没有 tabindex 值的元素应该放置在 tabindex 值为正值的元素后面。  </p><p>如果我们在 <code>&lt;div&gt;</code> 上设置了 tabindex 属性，它的子元素内容<code>不能使用箭头键来滚动</code>，除非我们在内容上<code>也设置 tabindex</code>。</p><blockquote><p>注：tabindex 的最大值不应超过 32767。如果没有指定，它的默认值为 0。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;一般情况下，div是&lt;code&gt;没有onblur事件&lt;/code&gt;的，但是给div加上&lt;code&gt;tabindex&lt;/code&gt;属性后，就可以&lt;code&gt;使用onblur事件&lt;/code&gt;了。  &lt;/p&gt;
&lt;h1 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h1&gt;&lt;p&gt;定义tabindex属性后，元素是默认会在聚焦的时候加上&lt;code&gt;outline&lt;/code&gt;的样式，也就是onfocus时候，样式为div:focus{…}，那么在IE中可以通过&lt;code&gt;hidefocus=&amp;quot;true&amp;quot;&lt;/code&gt;去除。其他浏览器通过outline=0进行去除，可以通过样式去修改，比如&lt;code&gt;div:focus{outline:none}&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Html" scheme="https://blogwxb.cn/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>git忽略文件或文件夹.gitignore</title>
    <link href="https://blogwxb.cn/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9-gitignore/"/>
    <id>https://blogwxb.cn/git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E6%88%96%E6%96%87%E4%BB%B6%E5%A4%B9-gitignore/</id>
    <published>2021-01-29T01:47:22.000Z</published>
    <updated>2021-07-01T03:00:29.444Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="gitignore文件配置"><a href="#gitignore文件配置" class="headerlink" title=".gitignore文件配置"></a>.gitignore文件配置</h1><p>如果没有.gitignore文件创建一个，有的话可以直接修改。可以使用<code>ls -a</code>查看所有的隐藏的文件。</p><h1 id="gitignore规则"><a href="#gitignore规则" class="headerlink" title=".gitignore规则"></a>.gitignore规则</h1><p>简单举几个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server&#x2F;node_modules    过滤server文件夹中的node_modules文件夹</span><br><span class="line">server&#x2F;myDoc.docx      过滤server文件夹中的myDoc.docx文件</span><br><span class="line">*.zip                  过滤以.zip后缀的文件</span><br><span class="line">!root&#x2F;                 不过滤root文件</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="gitignore立即生效"><a href="#gitignore立即生效" class="headerlink" title=".gitignore立即生效"></a>.gitignore立即生效</h1><p>如果当前.gitignore规则中忽略的文件在之前的版本已经被提交过了，那么这些文件在之后的提交也不会被忽略。<br>解决方法是先把本地的缓存删除完毕，让其变成未追踪状态，然后提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached . &#x2F;&#x2F; 删除本地缓存</span><br><span class="line">git add . &#x2F;&#x2F; 添加要提交的文件</span><br><span class="line">git commit -m &#39;update&#39; &#x2F;&#x2F; 更新本地的缓存</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;gitignore文件配置&quot;&gt;&lt;a href=&quot;#gitignore文件配置&quot; class=&quot;headerlink&quot; title=&quot;.gitignore文件配置&quot;&gt;&lt;/a&gt;.gitignore文件配置&lt;/h1&gt;&lt;p&gt;如果没有.gitignore文件创建一个，有的话可以直接修改。可以使用&lt;code&gt;ls -a&lt;/code&gt;查看所有的隐藏的文件。&lt;/p&gt;
&lt;h1 id=&quot;gitignore规则&quot;&gt;&lt;a href=&quot;#gitignore规则&quot; class=&quot;headerlink&quot; title=&quot;.gitignore规则&quot;&gt;&lt;/a&gt;.gitignore规则&lt;/h1&gt;&lt;p&gt;简单举几个例子&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server&amp;#x2F;node_modules    过滤server文件夹中的node_modules文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server&amp;#x2F;myDoc.docx      过滤server文件夹中的myDoc.docx文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*.zip                  过滤以.zip后缀的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;!root&amp;#x2F;                 不过滤root文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="git" scheme="https://blogwxb.cn/categories/git/"/>
    
    
    <category term="git" scheme="https://blogwxb.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>video的autoplay在chrome浏览器失效的解决方案</title>
    <link href="https://blogwxb.cn/video%E7%9A%84autoplay%E5%9C%A8chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://blogwxb.cn/video%E7%9A%84autoplay%E5%9C%A8chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2021-01-23T11:50:01.000Z</published>
    <updated>2021-07-01T03:00:29.464Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>当给video或audio标签添加autoplay属性时，在chrome浏览器会失效。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>Chrome为了不造成噪音污染，提升用户体验，首次让用户自己选择，关掉了声音自动播放</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><a id="more"></a><p>如果视频本身已经被设置为<code>静音</code>的情况下,那么浏览器将<code>不会再拦截其加载进行自动播放</code>。<br>video标签有一个<code>muted</code>属性可以将视频设置为静音状态。<br>代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">muted</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h1><p>副作用就是视频自动播放但是没有声音。不适用既要自动播放又要有声音的场景。</p>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;当给video或audio标签添加autoplay属性时，在chrome浏览器会失效。&lt;/p&gt;
&lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;Chrome为了不造成噪音污染，提升用户体验，首次让用户自己选择，关掉了声音自动播放&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h1&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Html5" scheme="https://blogwxb.cn/tags/Html5/"/>
    
  </entry>
  
  <entry>
    <title>H5动画帧requestAnimationFrame</title>
    <link href="https://blogwxb.cn/H5%E5%8A%A8%E7%94%BB%E5%B8%A7requestAnimationFrame/"/>
    <id>https://blogwxb.cn/H5%E5%8A%A8%E7%94%BB%E5%B8%A7requestAnimationFrame/</id>
    <published>2020-12-25T03:16:40.000Z</published>
    <updated>2021-07-01T03:00:29.433Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在Web应用中，实现动画效果的方法比较多，JavaScript 中可以通过定时器 <code>setTimeout</code> 来实现，<code>css3</code> 可以使用 <code>transition</code> 和 <code>animation</code> 来实现，html5 中的 <code>canvas</code> 也可以实现。除此之外，html5 还提供一个专门用于请求动画的 API，即 <code>requestAnimationFrame（rAF）</code>，顾名思义就是 “<code>请求动画帧</code>”。 为了深入理解  <code>rAF</code> 背后的原理（后文的 <code>rAF</code> 均指的是 <code>requestAnimationFrame</code>），我们首先需要了解一下与之相关的几个概念：</p><a id="more"></a><h1 id="屏幕绘制频率"><a href="#屏幕绘制频率" class="headerlink" title="屏幕绘制频率"></a>屏幕绘制频率</h1><p>即图像在屏幕上更新的速度，也即屏幕上的图像每秒钟出现的次数，它的单位是赫兹(<code>Hz</code>)。 对于一般笔记本电脑，这个频率大概是<code>60Hz</code>， 可以在桌面上 右键 &gt; 屏幕分辨率 &gt; 高级设置 &gt; 监视器 中查看和设置。这个值的设定受屏幕分辨率、屏幕尺寸和显卡的影响，原则上设置成让眼睛看着舒适的值都行。<br><code>当你对着电脑屏幕什么也不做的情况下，显示器也会以每秒60次的频率正在不断的更新屏幕上的图像</code>。为什么你感觉不到这个变化？ 那是因为人的眼睛有<code>视觉停留效应</code>，即前一副画面留在大脑的印象还没消失，紧接着后一副画面就跟上来了，这中间只间隔了<code>16.7ms(1000/60≈16.7)</code>， 所以会让你误以为屏幕上的图像是静止不动的。而屏幕给你的这种感觉是对的，试想一下，如果刷新频率变成1次/秒，屏幕上的图像就会出现严重的闪烁，这样就很容易引起眼睛疲劳、酸痛和头晕目眩等症状。</p><h1 id="CSS-动画原理"><a href="#CSS-动画原理" class="headerlink" title="CSS 动画原理"></a>CSS 动画原理</h1><p>根据上面的原理我们知道，你眼前所看到图像正在以每秒 <code>60</code> 次的频率绘制，由于频率很高，所以你感觉不到它在绘制。而 <code>动画本质就是要让人眼看到图像被绘制而引起变化的视觉效果，这个变化要以连贯的、平滑的方式进行过渡</code>。 那怎么样才能做到这种效果呢？<br><code>60Hz</code> 的屏幕每<code>16.7ms 绘制一次</code>，如果在屏幕每次绘制前，将元素的位置向左移动一个像素，即1px，这样一来，屏幕每次绘制出来的图像位置都比前一个要差1px，你就会看到图像在移动；而由于人眼的视觉停留效应，当前位置的图像停留在大脑的印象还没消失，紧接着图像又被移到了下一个位置，这样你所看到的效果就是，图像在流畅的移动。这就是视觉效果上形成的动画。 </p><h1 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h1><p>理解了上面的概念以后，我们不难发现，<code>setTimeout</code> 其实就是通过设置一个间隔时间来不断的改变图像的位置，从而达到动画效果的。但我们会发现，利用 <code>seTimeout</code> 实现的动画在某些低端机上会出现卡顿、抖动的现象。 这种现象的产生有两个原因：</p><ul><li><code>setTimeout</code> 的执行时间并不是确定的。在JavaScript中， setTimeout 任务被放进了异步队列中，<code>只有当主线程上的任务执行完以后，才会去检查该队列里的任务是否需要开始执行</code>，所以 <code>setTimeout 的实际执行时机一般要比其设定的时间晚一些</code>。</li><li>刷新频率受 <code>屏幕分辨率</code> 和 <code>屏幕尺寸</code> 的影响，不同设备的屏幕绘制频率可能会不同，而 setTimeout 只能设置一个固定的时间间隔，这个时间不一定和屏幕的刷新时间相同。</li></ul><p>以上两种情况都会导致 <code>setTimeout 的执行步调和屏幕的刷新步调不一致</code>，从而引起<code>丢帧</code>现象。 那为什么步调不一致就会引起丢帧呢？<br>首先要明白，setTimeout 的执行只是在内存中对元素属性进行改变，这个变化必须要等到屏幕下次绘制时才会被更新到屏幕上。如果两者的步调不一致，就可能会导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素。假设屏幕每隔<code>16.7ms</code>刷新一次，而<code>setTimeout</code> 每隔<code>10ms</code>设置图像向左移动<code>1px</code>， 就会出现如下绘制过程（表格）：</p><table><thead><tr><th>时间点</th><th>情况</th></tr></thead><tbody><tr><td>第 0 ms</td><td>屏幕未绘制等待中，setTimeout 也未执行，等待中</td></tr><tr><td>第 10 ms</td><td>屏幕未绘制等待中，setTimeout 开始执行并设置元素属性 left=1px</td></tr><tr><td>第 16.7 ms</td><td>屏幕开始绘制，屏幕上的元素向左移动了 1px， setTimeout 未执行，继续等待中</td></tr><tr><td>第 20 ms</td><td>屏幕未绘制，等待中，setTimeout 开始执行并设置 left=2px</td></tr><tr><td>第 30 ms</td><td>屏幕未绘制，等待中，setTimeout 开始执行并设置 left=3px</td></tr><tr><td>第 33.4  ms</td><td>屏幕开始绘制，屏幕上的元素向左移动了 3px， setTimeout 未执行，继续等待中</td></tr><tr><td>…</td><td>….</td></tr></tbody></table><p>从上面的绘制过程中可以看出，屏幕<code>没有更新 left=2px</code> 的那一帧画面，元素直接从<code>left=1px</code> 的位置跳到了 <code>left=3px</code> 的的位置，这就是丢帧现象，这种现象就会引起动画卡顿。</p><h1 id="rAF"><a href="#rAF" class="headerlink" title="rAF"></a>rAF</h1><p>与 setTimeout 相比，<code>rAF 最大的优势</code>是 <code>由系统来决定回调函数的执行时机</code>。具体一点讲就是，<code>系统每次绘制之前会主动调用 rAF 中的回调函数</code>，如果系统绘制率是 <code>60Hz</code>，那么回调函数就每<code>16.7ms</code> 被执行一次，如果绘制频率是<code>75Hz</code>，那么这个间隔时间就变成了 <code>1000/75=13.3ms</code>。换句话说就是，<code>rAF</code> 的执行步伐跟着系统的绘制频率走。<code>它能保证回调函数在屏幕每一次的绘制间隔中只被执行一次，这样就不会引起丢帧现象，也不会导致动画出现卡顿的问题</code>。<br>这个API的调用很简单，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">varprogress = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    progress += <span class="number">1</span>;<span class="comment">//修改图像的位置</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(progress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">           <span class="comment">//在动画没有结束前，递归渲染</span></span><br><span class="line">           <span class="built_in">window</span>.requestAnimationFrame(render);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一帧渲染</span></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame(render);</span><br></pre></td></tr></table></figure><h2 id="除此之外，rAF-还有以下两个优势："><a href="#除此之外，rAF-还有以下两个优势：" class="headerlink" title="除此之外，rAF 还有以下两个优势："></a>除此之外，rAF 还有以下两个优势：</h2><ol><li><strong>CPU节能</strong>：使用 setTimeout 实现的动画，当页面被隐藏或最小化时，setTimeout 仍然在后台执行动画任务，由于此时页面处于不可见或不可用状态，刷新动画是没有意义的，而且还浪费 CPU 资源。而 rAF 则完全不同，<code>当页面处理未激活的状态下</code>，该页面的屏幕<code>绘制任务</code>也会被系统暂停，因此跟着系统步伐走的 rAF 也会停止渲染，<code>当页面被激活时，动画就从上次停留的地方继续执行，有效节省了 CPU 开销</code>。</li><li><strong>函数节流</strong>：在高频率事件(resize,scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，使用 rAF 可保证<code>每个绘制间隔内</code>，函数<code>只被执行一次</code>，这样既能保证流畅性，也能更好的节省函数执行的开销。一个绘制间隔内函数执行多次时没有意义的，因为显示器每16.7ms 绘制一次，多次绘制并不会在屏幕上体现出来。</li></ol><h1 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h1><p>由于 <code>rAF</code> 目前还存在兼容性问题，而且不同的浏览器还需要带不同的前缀。因此需要通过优雅降级的方式对 <code>rAF</code> 进行封装，优先使用高级特性，然后再根据不同浏览器的情况进行回退，直止只能使用 <code>setTimeout</code> 的情况，因此可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame       ||</span><br><span class="line">          <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">          <span class="built_in">window</span>.mozRequestAnimationFrame    ||</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params"> callback </span>)</span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">          &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>但这种写法没有考虑 cancelAnimationFrame 的兼容性，并且不是所有的设备绘制时间间隔都是1000/60，下面的代码是比较全的一个 polyfill</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Date</span>.now)</span><br><span class="line">    <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;returnnewDate().getTime(); &#125;;</span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">     </span><br><span class="line">    varvendors = [<span class="string">'webkit'</span>,<span class="string">'moz'</span>];</span><br><span class="line">    <span class="keyword">for</span>(vari = <span class="number">0</span>; i &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++i) &#123;</span><br><span class="line">        varvp = vendors[i];</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vp+<span class="string">'RequestAnimationFrame'</span>];</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame = (<span class="built_in">window</span>[vp+<span class="string">'CancelAnimationFrame'</span>]</span><br><span class="line">                                   || <span class="built_in">window</span>[vp+<span class="string">'CancelRequestAnimationFrame'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/iP(ad|hone|od).*OS 6/</span>.test(<span class="built_in">window</span>.navigator.userAgent)<span class="comment">// iOS6 is buggy</span></span><br><span class="line">        || !<span class="built_in">window</span>.requestAnimationFrame || !<span class="built_in">window</span>.cancelAnimationFrame) &#123;</span><br><span class="line">        varlastTime = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            varnow = <span class="built_in">Date</span>.now();</span><br><span class="line">            varnextTime = <span class="built_in">Math</span>.max(lastTime + <span class="number">16</span>, now);</span><br><span class="line">            returnsetTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback(lastTime = nextTime); &#125;,</span><br><span class="line">                              nextTime - now);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.cancelAnimationFrame = clearTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><blockquote><p>原创发布 <a href="http://www.cnblogs.com/onepixel/p/7078617.html" target="_blank" rel="noopener">@一像素</a></p></blockquote><h1 id="技巧："><a href="#技巧：" class="headerlink" title="技巧："></a>技巧：</h1><ol><li>return 可以停止动画帧</li><li>window.cancelAnimationFrame(动画名)可以取消动画,<br>例子:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> frame1 =   <span class="built_in">window</span>.requestAnimationFrame(fn);</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame(frame1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>想要有动画效果，window.requestAnimationFrame()要在函数体内才行<br>例子:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(.....)&#123;   <span class="comment">// 当满足某条件时，停止动画</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>总例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html</span></span><br><span class="line">&lt;div id=<span class="string">"map"</span> ref=<span class="string">"map"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/css</span></span><br><span class="line"><span class="regexp">#map &#123;</span></span><br><span class="line"><span class="regexp">  position: absolute;</span></span><br><span class="line"><span class="regexp">  width: 300px;</span></span><br><span class="line"><span class="regexp">  height: 180px;</span></span><br><span class="line"><span class="regexp">  background: red;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/js</span></span><br><span class="line"><span class="regexp"> move() &#123;</span></span><br><span class="line"><span class="regexp">      this.$nextTick(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">        let mapL = parseInt(window.getComputedStyle(this.$refs.map).left); /</span><span class="regexp">/ 获取元素的left值</span></span><br><span class="line"><span class="regexp">        mapL += 1;  /</span><span class="regexp">/ 每次绘制left值加1</span></span><br><span class="line"><span class="regexp">        this.$refs.map.style.left = mapL + "px";</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 当位移量加上元素的宽度等于大于屏幕的宽度时，停止运动</span></span><br><span class="line"><span class="regexp">        if (parseInt(this.$refs.map.style.left) + this.$refs.map.offsetWidth &gt;= window.innerWidth) &#123;</span></span><br><span class="line"><span class="regexp">          return;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 绘制函数</span></span><br><span class="line"><span class="regexp">        window.requestAnimationFrame(this.move);</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;在Web应用中，实现动画效果的方法比较多，JavaScript 中可以通过定时器 &lt;code&gt;setTimeout&lt;/code&gt; 来实现，&lt;code&gt;css3&lt;/code&gt; 可以使用 &lt;code&gt;transition&lt;/code&gt; 和 &lt;code&gt;animation&lt;/code&gt; 来实现，html5 中的 &lt;code&gt;canvas&lt;/code&gt; 也可以实现。除此之外，html5 还提供一个专门用于请求动画的 API，即 &lt;code&gt;requestAnimationFrame（rAF）&lt;/code&gt;，顾名思义就是 “&lt;code&gt;请求动画帧&lt;/code&gt;”。 为了深入理解  &lt;code&gt;rAF&lt;/code&gt; 背后的原理（后文的 &lt;code&gt;rAF&lt;/code&gt; 均指的是 &lt;code&gt;requestAnimationFrame&lt;/code&gt;），我们首先需要了解一下与之相关的几个概念：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Html5" scheme="https://blogwxb.cn/tags/Html5/"/>
    
  </entry>
  
  <entry>
    <title>jquery中的ajax、fetch和axios的区别</title>
    <link href="https://blogwxb.cn/jquery%E4%B8%AD%E7%9A%84ajax%E3%80%81fetch%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://blogwxb.cn/jquery%E4%B8%AD%E7%9A%84ajax%E3%80%81fetch%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-12-18T02:18:34.000Z</published>
    <updated>2021-07-01T03:00:29.448Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="jquery-ajax"><a href="#jquery-ajax" class="headerlink" title="jquery ajax"></a>jquery ajax</h1><p>对原生XHR的封装。</p><p>优点</p><ul><li>无页面刷新</li><li>异步</li><li>支持JSONP</li><li>为以后的优秀的http请求库打下来基础<a id="more"></a>缺点</li><li>本身是针对MVC的,不符合现在前端MVVM的模式</li><li>会造成回调地狱</li></ul><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><p>Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如  <code>Service Workers</code>。是基于Promise设计的，可以搭配上async/await使用。<br>关于service worker的一篇文章的介绍 <a href="https://www.jianshu.com/p/1bc5bf8be43d" target="_blank" rel="noopener">Service Workers简介</a>。</p><p>兼容性如下</p><p><img src="/jquery%E4%B8%AD%E7%9A%84ajax%E3%80%81fetch%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/1.png" alt="fetch兼容性"></p><p>优点：</p><ul><li>符合MVVM模式，脱离了XHR，是ES规范里新的实现方式</li><li>基于标准的Promise实现，支持async/await</li><li>更加底层，提供的API丰富（request, response）</li><li>可以取消发送请求</li></ul><p>缺点：</p><ul><li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li><li>不支持JSONP</li><li>fetch只对网络请求报错，对400，500都当做成功的请求，需要封装去处理</li><li>fetch默认不会带cookie，需要添加配置项</li><li>fetch没有办法原生监测请求的进度，而XHR可以</li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>Axios本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范。</p><p>优点：</p><ul><li>浏览器和node.js都能用</li><li>支持 Promise API</li><li>客户端支持防止CSRF</li><li>提供了拦截器</li><li>可以取消发送请求</li><li>提供了一些并发请求的接口（重要，方便了很多的操作）</li></ul><p>缺点：</p><ul><li>采用的是XHR方式，所以输入、输出和用事件来跟踪的状态混杂在一个对象里</li></ul><p><strong>客户端支持防止CSRF的实现方式：</strong><br>每个请求都带一个从<code>cookie</code>中拿到的<code>key</code>, 根据浏览器<code>同源策略</code>，假冒的网站是<code>拿不到你cookie中的key</code>，这样，后台就可以轻松辨别出这个请求是否是用户在假冒网站上的误导输入，从而采取正确的策略。</p><h2 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h2><h3 id="一、-拦截器流程图"><a href="#一、-拦截器流程图" class="headerlink" title="一、 拦截器流程图"></a>一、 拦截器流程图</h3><p><img src="/jquery%E4%B8%AD%E7%9A%84ajax%E3%80%81fetch%E5%92%8Caxios%E7%9A%84%E5%8C%BA%E5%88%AB/2.png" alt="拦截器流程图"></p><h3 id="二、拦截器的应用场景"><a href="#二、拦截器的应用场景" class="headerlink" title="二、拦截器的应用场景"></a>二、拦截器的应用场景</h3><p>对请求和其响应进行特定的处理的时候。</p><ol><li>每个请求都附带后端返回的<code>token</code>，可以使用 <code>axios request 拦截器</code>，在这里，我们给每个请求都加 token,这样就可以节省每个请求再一次次的复制粘贴代码。</li><li>当token失效或者后端返回错误信息，都可以用 <code>axios response 拦截器</code>，我们统一处理所有请求成功之后响应过来的数据，然后对特殊数据进行处理，其他的正常分发。</li></ol><h3 id="三、拦截器的使用"><a href="#三、拦截器的使用" class="headerlink" title="三、拦截器的使用"></a>三、拦截器的使用</h3><p>主要用的方法：</p><ol><li><p>实例化axios<br>axios.create([config])<br>简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,    <span class="comment">// 发送请求的前置的url</span></span><br><span class="line">  timeout: <span class="number">10000</span>,                              <span class="comment">// 请求超时的时间</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;      <span class="comment">// 请求的headers</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>请求拦截器<br>axios.interceptors.request.use(function (config) {},function (error) {})<br>例子： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>响应拦截器<br>axios.interceptors.response.use(function (config) {},function (error) {})<br>例子：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>移除拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure></li></ol><p>注意：<br>请求拦截器和响应拦截器的两个回调函数参数，需要<code>有返回值</code>才能<code>继续</code>。  </p><ul><li>请求拦截器要返回回调函数的参数才行，否则请求将会被拦截，无法发送到后端，例子如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $axios = axios.create(&#123;</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求没法发送出去的情况</span></span><br><span class="line">$axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">name</span>: <span class="string">'wxb'</span> &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);   <span class="comment">// undefined， 请求也没有发送出去</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求发送出去的情况</span></span><br><span class="line">$axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">name</span>: <span class="string">'wxb'</span> &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);   <span class="comment">// &#123;config:&#123;xxx&#125;,data:&#123;xxx&#125;,headers:&#123;xxx&#125;,request:&#123;xxx&#125;,status:xxx,statusText:'xx'&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>响应拦截器返回什么数据，then就接收到什么数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> $axios = axios.create(&#123;</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子1</span></span><br><span class="line">$axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">params</span>:&#123;<span class="attr">name</span>: <span class="string">'wxb'</span>&#125; &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">// true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子2</span></span><br><span class="line">$axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;, err =&gt; <span class="built_in">console</span>.log(err))</span><br><span class="line"></span><br><span class="line">$axios.get(<span class="string">'http://localhost:3030/api'</span>, &#123; <span class="attr">params</span>:&#123;<span class="attr">name</span>: <span class="string">'wxb'</span>&#125; &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);  <span class="comment">// &#123;config:&#123;xxx&#125;,data:&#123;xxx&#125;,headers:&#123;xxx&#125;,request:&#123;xxx&#125;,status:xxx,statusText:'xx'&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>参考文章<br><a href="http://axios-js.com/zh-cn/docs/index.html" target="_blank" rel="noopener">axios中文文档</a><br><a href="http://www.lucklnk.com/godaddy/details/aid/195114672" target="_blank" rel="noopener">axios拦截器实际应用场景</a><br><a href="https://segmentfault.com/a/1190000008484070" target="_blank" rel="noopener">fetch使用的常见问题及其解决办法</a><br><a href="https://juejin.cn/post/6844903599143649294" target="_blank" rel="noopener">Jquery ajax, Axios, Fetch区别之我见</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;jquery-ajax&quot;&gt;&lt;a href=&quot;#jquery-ajax&quot; class=&quot;headerlink&quot; title=&quot;jquery ajax&quot;&gt;&lt;/a&gt;jquery ajax&lt;/h1&gt;&lt;p&gt;对原生XHR的封装。&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无页面刷新&lt;/li&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;支持JSONP&lt;/li&gt;
&lt;li&gt;为以后的优秀的http请求库打下来基础&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Javescript" scheme="https://blogwxb.cn/tags/Javescript/"/>
    
    <category term="HTML5" scheme="https://blogwxb.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>React hooks中useContext更新数据的方法</title>
    <link href="https://blogwxb.cn/React%20hooks%E4%B8%ADuseContext%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://blogwxb.cn/React%20hooks%E4%B8%ADuseContext%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-12-15T00:58:49.000Z</published>
    <updated>2021-07-01T03:00:29.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于context的知识点"><a href="#关于context的知识点" class="headerlink" title="关于context的知识点"></a>关于context的知识点</h1><p>context 是react 提供的<code>实现数据共享的api</code>，<code>解决props层层传递的问题</code></p><ol><li><code>React.createContext()</code>创建Context对象</li><li>使用<code>Context Provider</code>包裹组件 <code>给他的后代组件提供数据</code></li><li>Context Provider所有的后代组件，都可以<code>通过Context.Consumer获取到Context数据</code></li></ol><a id="more"></a><p>useContext(context)</p><ol><li><code>useContext(context)</code>是针对context（上下文）提出的api</li><li>它接受<code>React.createContext()的返回结果作为参数</code>也就是context对象 并返回最近的context</li><li>使用useContext 将不再需要Provider和Consumer</li><li>当最近的<code>context更新</code>时，那么使用该conntext的hook将会<code>重新渲染</code></li></ol><h1 id="本次用的Hook"><a href="#本次用的Hook" class="headerlink" title="本次用的Hook"></a>本次用的Hook</h1><ul><li>useState</li><li>useContext</li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul><li>父组件App</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, createContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ChildA <span class="keyword">from</span> <span class="string">'./components/childA'</span>;</span><br><span class="line"><span class="keyword">import</span> ChildB <span class="keyword">from</span> <span class="string">'./components/childB'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> InitContext = createContext(&#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">    &lt;InitContext.Provider</span><br><span class="line">    <span class="comment">// value就是通过context 共享的数据 这里是store</span></span><br><span class="line">      value=&#123;&#123;  </span><br><span class="line">        count,</span><br><span class="line">        setCount</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div className=<span class="string">"App"</span> &gt;</span><br><span class="line">        &lt;ChildA /&gt;</span><br><span class="line">        &lt;ChildB /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>InitContext.Provider&gt;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><ul><li>子组件ChildA</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InitContext &#125; <span class="keyword">from</span> <span class="string">'../../App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ChildA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contextData = useContext(InitContext);  <span class="comment">// 接收一个 context 对象并返回该 context 的当前值。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;contextData.count&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ChildA;</span></span><br></pre></td></tr></table></figure><ul><li>子组件ChildB</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InitContext &#125; <span class="keyword">from</span> <span class="string">'../../App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ChildB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> contextData = useContext(InitContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加</span></span><br><span class="line">    <span class="keyword">const</span> add = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 调用contextData中的setCount方法来改变contextData中的count值</span></span><br><span class="line">        contextData.setCount(contextData.count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; add()&#125;&gt;增加&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ChildB;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;关于context的知识点&quot;&gt;&lt;a href=&quot;#关于context的知识点&quot; class=&quot;headerlink&quot; title=&quot;关于context的知识点&quot;&gt;&lt;/a&gt;关于context的知识点&lt;/h1&gt;&lt;p&gt;context 是react 提供的&lt;code&gt;实现数据共享的api&lt;/code&gt;，&lt;code&gt;解决props层层传递的问题&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;React.createContext()&lt;/code&gt;创建Context对象&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Context Provider&lt;/code&gt;包裹组件 &lt;code&gt;给他的后代组件提供数据&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Context Provider所有的后代组件，都可以&lt;code&gt;通过Context.Consumer获取到Context数据&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://blogwxb.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的加载机制以及监听加载的事件</title>
    <link href="https://blogwxb.cn/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E7%9B%91%E5%90%AC%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%BA%8B%E4%BB%B6/"/>
    <id>https://blogwxb.cn/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E7%9B%91%E5%90%AC%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%BA%8B%E4%BB%B6/</id>
    <published>2020-12-04T01:24:21.000Z</published>
    <updated>2021-07-01T03:00:29.477Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="浏览器如何进行加载、解析、渲染？"><a href="#浏览器如何进行加载、解析、渲染？" class="headerlink" title="浏览器如何进行加载、解析、渲染？"></a>浏览器如何进行加载、解析、渲染？</h1><ol><li>用户访问网页，DNS服务器（<code>域名解析</code>系统）会根据用户提供的域名查找对应的IP地址，找到后，系统会向对应IP地址的网络服务器发送一个http请求。</li><li>网络服务器解析请求，并发送请求给数据库服务器。</li><li>数据库服务器将请求的资源返回给网络服务器，网络服务器解析数据，并生成html文件，放入<code>http response</code>中，返回给浏览器。</li><li>浏览器<code>解析 http response</code>。</li><li>浏览器解析 http response后，需要下载html文件，以及html文件内包含的外部引用文件，及文件内涉及的图片或者多媒体文件。<br>　<code>解析html 构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</code><a id="more"></a><img src="/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%BB%A5%E5%8F%8A%E7%9B%91%E5%90%AC%E5%8A%A0%E8%BD%BD%E7%9A%84%E4%BA%8B%E4%BB%B6/1.png" alt="img"></li></ol><p>解析：</p><ol><li>将HTML构建成一个DOM树。</li><li>将CSS解析成CSS去构造CSSOM树( CSSOM = CSS Object Model CSS对象模型)</li><li>根据<code>DOM树</code>和<code>CSSOM</code>来构造 <code>Rendering Tree（渲染树）</code>。注意：Rendering Tree 渲染树并<code>不等同于</code> DOM 树，因为一些像 Header 或 display:none 的东西就没必要放在渲染树中了。</li><li>有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。</li><li>下一步操作称之为Layout，顾名思义就是计算出每个节点在屏幕中的位置 layout render tree。</li><li>再下一步就是<code>绘制</code>，即遍历render树，并使用浏览器UI后端层绘制每个节点。</li></ol><p>性能优化中重绘、重排：<br>（1）<code>Reflow（回流/重排</code>）：当它发现了某个部分发生了变化影响了布局，渲染树需要重新计算。<br>（2）<code>Repaint（重绘</code>）：改变了某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的repaint，根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排；</p><p><code>Reflow要比Repaint更花费时间</code>，也就<code>更影响性能</code>。所以在写代码的时候，要尽量避免过多的Reflow。</p><h1 id="监听浏览器加载的事件"><a href="#监听浏览器加载的事件" class="headerlink" title="监听浏览器加载的事件"></a>监听浏览器加载的事件</h1><ul><li>DOMContentLoaded<br>触发时间：页面dom加载完成触发，无需等待后续图片等资源</li><li>onload<br>触发时间：当浏览器加载完成之后触发，load一定在DOMContentLoaded之后触发。</li></ul><p>二者的区别</p><p>DOM文档加载的步骤为  </p><ol><li>解析HTML结构。</li><li>加载外部脚本和样式表文件。</li><li>解析并执行脚本代码。</li><li><code>DOM树构建完成。//DOMContentLoaded</code></li><li>加载图片等外部文件。</li><li><code>页面加载完毕。//load</code></li></ol><blockquote><p>部分内容参考自：<a href="https://blog.csdn.net/baidu_30668495/article/details/83069761?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160704333019195265145954%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160704333019195265145954&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-3-83069761.pc_search_result_cache&utm_term=%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6&spm=1018.2118.3001.4449" target="_blank" rel="noopener">浏览器页面加载解析渲染机制</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;


&lt;h1 id=&quot;浏览器如何进行加载、解析、渲染？&quot;&gt;&lt;a href=&quot;#浏览器如何进行加载、解析、渲染？&quot; class=&quot;headerlink&quot; title=&quot;浏览器如何进行加载、解析、渲染？&quot;&gt;&lt;/a&gt;浏览器如何进行加载、解析、渲染？&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;用户访问网页，DNS服务器（&lt;code&gt;域名解析&lt;/code&gt;系统）会根据用户提供的域名查找对应的IP地址，找到后，系统会向对应IP地址的网络服务器发送一个http请求。&lt;/li&gt;
&lt;li&gt;网络服务器解析请求，并发送请求给数据库服务器。&lt;/li&gt;
&lt;li&gt;数据库服务器将请求的资源返回给网络服务器，网络服务器解析数据，并生成html文件，放入&lt;code&gt;http response&lt;/code&gt;中，返回给浏览器。&lt;/li&gt;
&lt;li&gt;浏览器&lt;code&gt;解析 http response&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;浏览器解析 http response后，需要下载html文件，以及html文件内包含的外部引用文件，及文件内涉及的图片或者多媒体文件。&lt;br&gt;　&lt;code&gt;解析html 构建dom树 -&amp;gt; 构建render树 -&amp;gt; 布局render树 -&amp;gt; 绘制render树&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://blogwxb.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js中的XMLHttpRequest对象</title>
    <link href="https://blogwxb.cn/js%E4%B8%AD%E7%9A%84XMLHttpRequest%E5%AF%B9%E8%B1%A1/"/>
    <id>https://blogwxb.cn/js%E4%B8%AD%E7%9A%84XMLHttpRequest%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-12-02T09:50:52.000Z</published>
    <updated>2021-07-01T03:00:29.450Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>XMLHttpRequest对象是<code>ajax技术的核心</code>。</li><li>JavaScript通过这个对象可以自己发送请求，同时也自己处理响应。</li><li>得到了几乎所有现代浏览器的支持。</li></ul><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><p>微软最早在<code>IE5</code>中以<code>ActiveX对象</code>的形式实现了一个名叫<code>XMLHTTP</code>的对象。在IE中创建新的对象要使用下列代码：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.3.0'</span>);</span><br></pre></td></tr></table></figure><p>其他浏览器则基于<code>XMLHttpRequest</code>来创建新对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p>更麻烦的是，<code>不同IE版本</code>中使用的<code>XMLHTTP对象也不完全相同</code>。为了兼容所有浏览器，这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHTTPObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &lt;!-- 判断浏览器是否支持XMLHttpRequest --&gt;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRquest === <span class="string">'undefined'</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.6.0'</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP.3.0'</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHTTP'</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> request = getHTTPObject();</span><br></pre></td></tr></table></figure><h1 id="open方法"><a href="#open方法" class="headerlink" title="open方法"></a>open方法</h1><p>XMLHttpRequest对象的HTTP和HTTPS请求必须通过<code>opent方法初始化</code>。这个方法必须在实际发送请求之前调用，以用来验证请求方法，URL以及用户信息。这个方法不能确保URL存在或者用户信息必须正确。初始化请求可以接受5个参数，一般常用前3个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open( Method, URL, Asynchronous, UserName, Password )</span><br></pre></td></tr></table></figure><ol><li>第一个参数是<code>请求方法</code>，如下</li></ol><ul><li>GET (IE7+,Mozilla 1+)</li><li>POST (IE7+,Mozilla 1+)</li><li>HEAD (IE7+)</li><li>PUT</li><li>DELETE</li><li>OPTIONS (IE7+)  </li></ul><p>使用<code>POST</code>请求的方法的话，需要发送合适的<code>请求头信息</code>，例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setRequestHeader(&quot;Content-type&quot;, &quot;application&#x2F;x-www-form-urlencoded&quot;);</span><br></pre></td></tr></table></figure><ol start="2"><li>第二个参数是string类型，<code>标示请求的URL</code>。</li><li>第三个参数是boolean类型，<code>用于指定请求是否以异步方式发送和处理</code>。</li><li>第四个参数是string类型，指定<code>用户名</code>。</li><li>第五个参数是string类型，指定<code>密码</code>。</li></ol><h1 id="onreadystatechange事件处理函数"><a href="#onreadystatechange事件处理函数" class="headerlink" title="onreadystatechange事件处理函数"></a>onreadystatechange事件处理函数</h1><p>它会在服务器给XMLHttpRequest对象送回响应的时候被触发执行。<br>将自动在XMLHttpRequest对象的<code>readyState属性改变</code>时被触发。</p><h1 id="readyState-属性"><a href="#readyState-属性" class="headerlink" title="readyState 属性"></a>readyState 属性</h1><p>服务器在向XMLHttpRequest对象发回响应时，该对象有许多属性可用，浏览器会在不同阶段更新readyState属性的值，它有5个可能的值：</p><ul><li>0 表示未初始化</li><li>1 表示正在加载</li><li>2 表示加载完毕</li><li>3 表示正在交互</li><li>4 表示完成</li></ul><p>只有<code>readyState</code>属性的值变成了<code>4</code>，就<code>可以访问服务器发送回来的数据</code>了。</p><h1 id="status属性"><a href="#status属性" class="headerlink" title="status属性"></a>status属性</h1><p>代表请求的响应状态，如200，404等。</p><h1 id="send方法"><a href="#send方法" class="headerlink" title="send方法"></a>send方法</h1><p>向服务器发送请求，默认发送的<code>null</code>。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.send(null)</span><br></pre></td></tr></table></figure><p>send方法也可以<code>发送参数</code>，但<code>仅限post请求</code>才行，<code>get</code>请求发送参数需要在<code>open</code>里面的<code>第二个参数</code>里的请求地址后面添加。下面举个例子：   </p><p>get请求发送参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3030/api?foo=bar&amp;lorem=ipsum'</span>, <span class="literal">true</span>);     <span class="comment">// 发送的参数数据 &#123; foo: 'bar', lorem: 'ipsum' &#125;</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(request.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>post请求发送参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">request.open(<span class="string">'post'</span>, <span class="string">'http://localhost:3030/api'</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//发送合适的请求头信息</span></span><br><span class="line">request.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"></span><br><span class="line">request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (request.readyState === <span class="number">4</span> &amp;&amp; request.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(request.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line">request.send(<span class="string">"foo=bar&amp;lorem=ipsum"</span>); <span class="comment">// 发送的参数数据 &#123; foo: 'bar', lorem: 'ipsum' &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>内容部分参考自<a href="https://www.ituring.com.cn/book/42" target="_blank" rel="noopener">《JavaScript DOM 编程艺术》</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;XMLHttpRequest对象是&lt;code&gt;ajax技术的核心&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;JavaScript通过这个对象可以自己发送请求，同时也自己处理响应。&lt;/li&gt;
&lt;li&gt;得到了几乎所有现代浏览器的支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;兼容性&quot;&gt;&lt;a href=&quot;#兼容性&quot; class=&quot;headerlink&quot; title=&quot;兼容性&quot;&gt;&lt;/a&gt;兼容性&lt;/h1&gt;&lt;p&gt;微软最早在&lt;code&gt;IE5&lt;/code&gt;中以&lt;code&gt;ActiveX对象&lt;/code&gt;的形式实现了一个名叫&lt;code&gt;XMLHTTP&lt;/code&gt;的对象。在IE中创建新的对象要使用下列代码：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://blogwxb.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>typescript中的Partial和Omit</title>
    <link href="https://blogwxb.cn/typescript%E4%B8%AD%E7%9A%84Partial%E5%92%8COmit/"/>
    <id>https://blogwxb.cn/typescript%E4%B8%AD%E7%9A%84Partial%E5%92%8COmit/</id>
    <published>2020-11-30T00:46:57.000Z</published>
    <updated>2021-07-01T03:00:29.463Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script><h1 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial<Type></Type></h1><p>构造一个类型，将<code>Type的所有属性</code>设置为<code>可选</code>。该实用程序将返回一个表示给定类型的所有子集的类型。</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface Todo &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  description: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 用partial将接口Todo所有属性变成可选</span><br><span class="line">function updateTodo(todo: Todo, fieldsToUpdate: Partial&lt;Todo&gt;) &#123;</span><br><span class="line">  return &#123; ...todo, ...fieldsToUpdate &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const todo1 &#x3D; &#123;</span><br><span class="line">  title: &quot;organize desk&quot;,</span><br><span class="line">  description: &quot;clear clutter&quot;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 虽然第二个参数没有给声明title属性，但不报错</span><br><span class="line">const todo2 &#x3D; updateTodo(todo1, &#123;</span><br><span class="line">  description: &quot;throw out trash&quot;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="Omit-lt-Type-Keys-gt"><a href="#Omit-lt-Type-Keys-gt" class="headerlink" title="Omit&lt;Type, Keys&gt;"></a>Omit&lt;Type, Keys&gt;</h1><p>通过从<code>Type</code>中选取所有属性，然后删除属性<code>Keys</code>来构造一个类型。 </p><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Todo &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  description: string;</span><br><span class="line">  completed: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 类型TodoPreview等于接口Todo移除descprition属性的接口</span><br><span class="line">type TodoPreview &#x3D; Omit&lt;Todo, &quot;description&quot;&gt;;</span><br><span class="line"></span><br><span class="line">const todo: TodoPreview &#x3D; &#123;</span><br><span class="line">  title: &quot;Clean room&quot;,</span><br><span class="line">  completed: false,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/bai.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;Partial&quot;&gt;&lt;a href=&quot;#Partial&quot; class=&quot;headerlink&quot; title=&quot;Partial&quot;&gt;&lt;/a&gt;Partial&lt;Type&gt;&lt;/Type&gt;&lt;/h1&gt;&lt;p&gt;构造一个类型，将&lt;code&gt;Type的所有属性&lt;/code&gt;设置为&lt;code&gt;可选&lt;/code&gt;。该实用程序将返回一个表示给定类型的所有子集的类型。&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;interface Todo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  description: string;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; 用partial将接口Todo所有属性变成可选&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function updateTodo(todo: Todo, fieldsToUpdate: Partial&amp;lt;Todo&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return &amp;#123; ...todo, ...fieldsToUpdate &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const todo1 &amp;#x3D; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title: &amp;quot;organize desk&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  description: &amp;quot;clear clutter&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;&amp;#x2F; 虽然第二个参数没有给声明title属性，但不报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const todo2 &amp;#x3D; updateTodo(todo1, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  description: &amp;quot;throw out trash&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>css中实现单行居中，多行居左</title>
    <link href="https://blogwxb.cn/css%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%A4%9A%E8%A1%8C%E5%B1%85%E5%B7%A6/"/>
    <id>https://blogwxb.cn/css%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%A4%9A%E8%A1%8C%E5%B1%85%E5%B7%A6/</id>
    <published>2020-11-17T12:57:06.000Z</published>
    <updated>2021-07-01T03:00:29.441Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="/js/bai.js"></script><p>正常情况下对齐方式只能是按照一个方向排列，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是单行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是多行居中显示我是多行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><a id="more"></a><p><img src="/css%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%A4%9A%E8%A1%8C%E5%B1%85%E5%B7%A6/1.png" alt="1.png"></p><p>想要实现单行居中，多行居左。步骤如下：</p><ol><li>把子元素转化为<code>行内块级元素</code>，因为行内块级元素会<code>受到父元素的text-align属性的影响</code>，而且行内块级元素不设置width的情况下，它的width是由它的内容所决定的。</li><li>子元素将文本向左对齐</li></ol><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">        margin: 10px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">        text-align: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是单行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>我是多行居中显示我是多行居中显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/css%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%A4%9A%E8%A1%8C%E5%B1%85%E5%B7%A6/2.png" alt="2.png"></p>]]></content>
    
    
    <summary type="html">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/bai.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;正常情况下对齐方式只能是按照一个方向排列，如：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- css --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.father&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        padding: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;        &lt;span class=&quot;selector-tag&quot;&gt;border&lt;/span&gt;: 1&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- html  --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;father&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;我是单行居中显示&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;father&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;child&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;我是多行居中显示我是多行居中显示&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blogwxb.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="css" scheme="https://blogwxb.cn/tags/css/"/>
    
  </entry>
  
</feed>
